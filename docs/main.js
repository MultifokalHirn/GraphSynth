// Generated by Haxe 4.1.3
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class EReg {
	constructor(r,opt) {
		this.r = new RegExp(r,opt.split("u").join(""));
	}
	match(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
}
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
Object.assign(EReg.prototype, {
	__class__: EReg
});
class HxOverrides {
	static strDate(s) {
		switch(s.length) {
		case 8:
			let k = s.split(":");
			let d = new Date();
			d["setTime"](0);
			d["setUTCHours"](k[0]);
			d["setUTCMinutes"](k[1]);
			d["setUTCSeconds"](k[2]);
			return d;
		case 10:
			let k1 = s.split("-");
			return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
		case 19:
			let k2 = s.split(" ");
			let y = k2[0].split("-");
			let t = k2[1].split(":");
			return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
		default:
			throw haxe_Exception.thrown("Invalid date format : " + s);
		}
	}
	static cca(s,index) {
		let x = s.charCodeAt(index);
		if(x != x) {
			return undefined;
		}
		return x;
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static remove(a,obj) {
		let i = a.indexOf(obj);
		if(i == -1) {
			return false;
		}
		a.splice(i,1);
		return true;
	}
	static now() {
		return Date.now();
	}
}
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
Math.__name__ = "Math";
class Reflect {
	static field(o,field) {
		try {
			return o[field];
		} catch( _g ) {
			return null;
		}
	}
	static fields(o) {
		let a = [];
		if(o != null) {
			let hasOwnProperty = Object.prototype.hasOwnProperty;
			for( var f in o ) {
			if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
				a.push(f);
			}
			}
		}
		return a;
	}
	static isFunction(f) {
		if(typeof(f) == "function") {
			return !(f.__name__ || f.__ename__);
		} else {
			return false;
		}
	}
	static deleteField(o,field) {
		if(!Object.prototype.hasOwnProperty.call(o,field)) {
			return false;
		}
		delete(o[field]);
		return true;
	}
}
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
}
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
class StringBuf {
	constructor() {
		this.b = "";
	}
}
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
Object.assign(StringBuf.prototype, {
	__class__: StringBuf
});
class StringTools {
	static replace(s,sub,by) {
		return s.split(sub).join(by);
	}
}
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
class Type {
	static createEnum(e,constr,params) {
		let f = Reflect.field(e,constr);
		if(f == null) {
			throw haxe_Exception.thrown("No such constructor " + constr);
		}
		if(Reflect.isFunction(f)) {
			if(params == null) {
				throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
			}
			return f.apply(e,params);
		}
		if(params != null && params.length != 0) {
			throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
		}
		return f;
	}
	static typeof(v) {
		switch(typeof(v)) {
		case "boolean":
			return ValueType.TBool;
		case "function":
			if(v.__name__ || v.__ename__) {
				return ValueType.TObject;
			}
			return ValueType.TFunction;
		case "number":
			if(Math.ceil(v) == v % 2147483648.0) {
				return ValueType.TInt;
			}
			return ValueType.TFloat;
		case "object":
			if(v == null) {
				return ValueType.TNull;
			}
			let e = v.__enum__;
			if(e != null) {
				return ValueType.TEnum($hxEnums[e]);
			}
			let c = js_Boot.getClass(v);
			if(c != null) {
				return ValueType.TClass(c);
			}
			return ValueType.TObject;
		case "string":
			return ValueType.TClass(String);
		case "undefined":
			return ValueType.TNull;
		default:
			return ValueType.TUnknown;
		}
	}
	static enumParameters(e) {
		let enm = $hxEnums[e.__enum__];
		let ctorName = enm.__constructs__[e._hx_index];
		let params = enm[ctorName].__params__;
		if(params != null) {
			let _g = [];
			let _g1 = 0;
			while(_g1 < params.length) {
				let p = params[_g1];
				++_g1;
				_g.push(e[p]);
			}
			return _g;
		} else {
			return [];
		}
	}
}
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
class app_Clipboard {
	constructor() {
		this.data = null;
	}
	copy(data) {
		let g = graph_Graph.deserialize(data);
		g.moveCenterToZero();
		this.data = g.serialize(graph_serial_NodeFilter.ALL,false);
	}
}
$hxClasses["app.Clipboard"] = app_Clipboard;
app_Clipboard.__name__ = "app.Clipboard";
Object.assign(app_Clipboard.prototype, {
	__class__: app_Clipboard
});
class app_Gen {
	static _new(f) {
		return f;
	}
}
var app_InfoType = $hxEnums["app.InfoType"] = { __ename__ : "app.InfoType", __constructs__ : ["Persistent","Info","Warning"]
	,Persistent: {_hx_index:0,__enum__:"app.InfoType",toString:$estr}
	,Info: {_hx_index:1,__enum__:"app.InfoType",toString:$estr}
	,Warning: {_hx_index:2,__enum__:"app.InfoType",toString:$estr}
};
var app_LoadResult = $hxEnums["app.LoadResult"] = { __ename__ : "app.LoadResult", __constructs__ : ["Succeeded","Failed","Cancelled"]
	,Succeeded: {_hx_index:0,__enum__:"app.LoadResult",toString:$estr}
	,Failed: {_hx_index:1,__enum__:"app.LoadResult",toString:$estr}
	,Cancelled: {_hx_index:2,__enum__:"app.LoadResult",toString:$estr}
};
class pot_core_App {
	constructor(canvas,captureInput) {
		if(pot_core_App._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(canvas,captureInput);
	}
	_hx_constructor(canvas,captureInput) {
		if(captureInput == null) {
			captureInput = true;
		}
		this.canvas = canvas;
		this.pot = new pot_core_Pot(this,canvas);
		if(captureInput) {
			this.input = new pot_input_Input(canvas,this.pot);
		} else {
			this.input = null;
		}
		this.frameCount = 0;
		this.setup();
	}
	setup() {
	}
	loop() {
	}
}
$hxClasses["pot.core.App"] = pot_core_App;
pot_core_App.__name__ = "pot.core.App";
Object.assign(pot_core_App.prototype, {
	__class__: pot_core_App
});
class app_MainOperator {
}
$hxClasses["app.MainOperator"] = app_MainOperator;
app_MainOperator.__name__ = "app.MainOperator";
app_MainOperator.__isInterface__ = true;
Object.assign(app_MainOperator.prototype, {
	__class__: app_MainOperator
});
class app_Main extends pot_core_App {
	constructor() {
		pot_core_App._hx_skip_constructor = true;
		super();
		pot_core_App._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.menuesOpening = [];
		this.menuesToOpen = [];
		this.octaveBase = 4;
		super._hx_constructor(window.document.getElementById("canvas"),true);
	}
	setup() {
		this.pot.resize(400,500,1);
		let _gthis = this;
		if(new EReg("iPhone|Android.*Mobile","").match(window.navigator.userAgent)) {
			app_ui_view_main_graph_ClickSettings.setForMobiles();
		} else {
			app_ui_view_main_graph_ClickSettings.setForDesktops();
		}
		let resize = function() {
			let newPixelRatio = window.devicePixelRatio;
			let w = Math.ceil(_gthis.canvas.parentElement.offsetWidth * newPixelRatio);
			let h = Math.ceil(_gthis.canvas.parentElement.offsetHeight * newPixelRatio);
			if(_gthis.pot.pixelRatio != newPixelRatio || _gthis.pot.width != w || _gthis.pot.height != h) {
				_gthis.pot.resize(w,h,newPixelRatio);
				_gthis.rescaleRenderer();
			}
		};
		this.canvas.style.width = null;
		this.canvas.style.height = null;
		window.addEventListener("resize",resize);
		resize();
		this.pot.frameRate(60);
		app_Main.inputForDebug = this.input;
		this.init();
		this.pot.start();
	}
	rescaleRenderer() {
		if(this.stage == null) {
			return;
		}
		let screenW = this.canvas.width;
		let screenH = this.canvas.height;
		let scaleW = screenW / 300;
		let scaleH = screenH / 375;
		let maxScale = this.pot.pixelRatio * 2;
		let ab = scaleW < scaleH ? scaleW : scaleH;
		let scale = ab < maxScale ? ab : maxScale;
		this.stage.resize(screenW / scale,screenH / scale);
		this.stage.scale = scale;
		console.log("src/app/Main.hx:93:","scaling: window = (" + screenW + ", " + screenH + "), target = (" + 300 + ", " + 375 + "), scale = " + scale);
	}
	init() {
		this.stage = new app_ui_Stage(this.input,new app_graphics_Graphics(this.canvas));
		let wrapper = new app_ui_Sprite(new app_ui_core_Element());
		let _gthis = this;
		let _this = wrapper.element.style.size;
		_this.w = app_ui_core_LengthOrAuto.Percent(100);
		_this.h = app_ui_core_LengthOrAuto.Percent(100);
		wrapper.element.set_layout(new app_ui_core_layout_FlexLayout(true));
		this.compiler = new app_WebAudioCompiler();
		this.mainSprite = new app_ui_view_main_MainSprite(new graph_Graph(this.compiler),this);
		wrapper.addChild(this.mainSprite);
		this.keyboardSprite = new app_ui_view_main_KeyboardSprite(function() {
			return _gthis.octaveBase;
		},this);
		wrapper.addChild(this.keyboardSprite);
		let root = this.stage.root;
		root.element.set_layout(new app_ui_core_layout_OverlayLayout());
		root.addChild(wrapper);
		this.menuWrapper = new app_ui_Sprite();
		this.menuWrapper.element.set_layout(new app_ui_core_layout_OverlayLayout());
		let _this1 = this.menuWrapper.element.style.size;
		_this1.w = app_ui_core_LengthOrAuto.Percent(100);
		_this1.h = app_ui_core_LengthOrAuto.Percent(100);
		root.addChild(this.menuWrapper);
		root.addChild(new app_ui_view_main_PointerDetector());
		this.rescaleRenderer();
		this.showModalDialogue("Click to Play",($_=this.compiler,$bind($_,$_.start)));
	}
	showModalDialogue(text,onClick) {
		let cover = window.document.getElementById("cover");
		window.document.getElementById("cover-text").innerText = text;
		let listener = null;
		listener = function(e) {
			onClick();
			cover.removeEventListener("click",listener);
			cover.classList.add("hidden");
		};
		cover.addEventListener("click",listener);
		cover.classList.remove("hidden");
	}
	importData() {
		let text = window.prompt("Input text data");
		if(text == null || text == "") {
			return new common_PairData(app_LoadResult.Cancelled,null);
		}
		try {
			let data = JSON.parse(text);
			return new common_PairData(app_LoadResult.Succeeded,new common_PairData(data,graph_Graph.deserialize(data)));
		} catch( _g ) {
			window.alert("invalid data");
			return new common_PairData(app_LoadResult.Failed,null);
		}
	}
	reset() {
		this.mainSprite.resetGraph();
	}
	changeOctave(diff) {
		this.octaveBase += diff;
		if(this.octaveBase < 0) {
			this.octaveBase = 0;
		}
		if(this.octaveBase > 9) {
			this.octaveBase = 9;
		}
	}
	selectNodeCreation(n) {
		this.mainSprite.selectNodeCreation(n);
	}
	showInfo(text,type) {
		this.mainSprite.showInfo(text,type);
	}
	hideInfo() {
		this.mainSprite.hideInfo();
	}
	closeToolbar() {
		this.mainSprite.closeToolbar();
	}
	gotoGraph(graph) {
		this.mainSprite.gotoGraph(graph);
	}
	loadAsRoot(data,vibration) {
		this.mainSprite.loadAsRoot(data,vibration);
	}
	openMenu(menu) {
		this.menuesToOpen.push(menu);
	}
	copy(data) {
		this.mainSprite.copy(data);
	}
	paste() {
		return this.mainSprite.paste();
	}
	importGraph() {
		let pair = this.importData();
		switch(pair.a._hx_index) {
		case 0:
			let data = pair.b.a;
			let g = pair.b.b;
			if(!g.containsOutput()) {
				let maxX = 0.0;
				let _g = 0;
				let _g1 = g.nodes;
				while(_g < _g1.length) {
					let b = _g1[_g++].phys.vertex.point.x;
					if(!(maxX > b)) {
						maxX = b;
					}
				}
				app_NodeList.OUTPUT.create(g,maxX + 80,0,false);
				data = g.serialize(graph_serial_NodeFilter.ALL,false);
			}
			this.mainSprite.loadAsRoot(data,true);
			return app_LoadResult.Succeeded;
		case 1:
			return app_LoadResult.Failed;
		case 2:
			return app_LoadResult.Cancelled;
		}
	}
	exportData(data) {
		let _gthis = this;
		console.log("src/app/Main.hx:242:",haxe_Serializer.run(data));
		let text = JSON.stringify(data);
		this.showModalDialogue("Copying...",function() {
			let doc = window.document;
			let input = doc.createElement("pre");
			doc.body.appendChild(input);
			input.innerText = text;
			let sel = doc.getSelection();
			sel.selectAllChildren(input);
			doc.execCommand("copy");
			sel.removeAllRanges();
			doc.body.removeChild(input);
			_gthis.showInfo("Copied!",app_InfoType.Info);
		});
	}
	importModule() {
		let pair = this.importData();
		switch(pair.a._hx_index) {
		case 0:
			let data = pair.b.a;
			let g = pair.b.b;
			if(g.containsOutput()) {
				data = g.serialize(new graph_serial_NodeFilter(function(node) {
					return node.setting.role._hx_index != 2;
				}),false);
			}
			this.mainSprite.paste(data,"import");
			return app_LoadResult.Succeeded;
		case 1:
			return app_LoadResult.Failed;
		case 2:
			return app_LoadResult.Cancelled;
		}
	}
	getTopMenu() {
		if(this.menuesOpening.length == 0) {
			return null;
		}
		return this.menuesOpening[this.menuesOpening.length - 1];
	}
	getKeyboard() {
		return this.input.keyboard;
	}
	attack() {
		this.compiler.attack();
	}
	release() {
		this.compiler.release();
	}
	setFrequency(f,time) {
		this.compiler.setFrequency(f,time);
	}
	loop() {
		let _g = 0;
		let _g1 = this.menuesToOpen;
		while(_g < _g1.length) {
			let menu = _g1[_g];
			++_g;
			this.menuWrapper.addChild(menu);
			this.menuesOpening.push(menu);
		}
		if(this.menuesToOpen.length > 0) {
			this.menuWrapper.addChild(new app_ui_view_menu_EventStopper(10));
		}
		let _this = this.menuesOpening;
		let _g2 = [];
		let _g11 = 0;
		while(_g11 < _this.length) {
			let v = _this[_g11];
			++_g11;
			if(v.parent != null) {
				_g2.push(v);
			}
		}
		this.menuesOpening = _g2;
		this.menuesToOpen.length = 0;
		this.stage.update();
		this.canvas.style.cursor = this.stage.cursor;
		this.stage.draw();
	}
	static main() {
		new app_Main();
	}
}
$hxClasses["app.Main"] = app_Main;
app_Main.__name__ = "app.Main";
app_Main.__interfaces__ = [app_MainOperator];
app_Main.__super__ = pot_core_App;
Object.assign(app_Main.prototype, {
	__class__: app_Main
});
class app_NodeInfo {
	constructor(fullName,labelName,type,role,inParams,outParams) {
		this.fullName = fullName;
		this.labelName = labelName;
		this.type = type;
		this.role = role;
		this.inParams = inParams;
		this.outParams = outParams;
	}
	create(g,x,y,addNumberNodes) {
		let node = this.type;
		let node1 = this.labelName;
		let role = this.role;
		let node2;
		switch(role._hx_index) {
		case 6:
			let _g = role.env;
			node2 = synth_NodeRole.Envelope(new synth_EnvelopeData(_g.a,_g.d,_g.s,_g.r));
			break;
		case 7:
			node2 = synth_NodeRole.Number(new synth_NumberData(role.num.get_value()));
			break;
		default:
			node2 = role;
		}
		let node3 = g.createNode(x,y,node,new graph_NodeSetting(node1,node2));
		this.createInParams(g,node3,addNumberNodes);
		this.createOutParams(g,node3);
		return node3;
	}
	createInParams(g,node,addNumberNodes) {
		let ang = -((this.inParams.length - 1) * 0.62831853071795862) / 2;
		let _g = 0;
		let _g1 = this.inParams;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			let sp = node.createSocket(graph_SocketType.Param(false,p.name)).phys;
			let nx = -Math.cos(ang);
			let ny = Math.sin(ang);
			sp.setNormal(nx,ny);
			if(p.defaultValue != null && addNumberNodes) {
				let x = node.phys.vertex.point.x + nx * 80;
				let y = node.phys.vertex.point.y + ny * 80;
				app_ui_view_main_graph_GraphWrapper.connectVerticesMakingSockets(g,new app_NodeInfo("Number","",graph_NodeType.Normal(false,true),synth_NodeRole.Number(new synth_NumberData(p.defaultValue)),[],[]).create(g,x,y,false).phys.vertex,sp.vertex);
			}
			ang += 0.62831853071795862;
		}
	}
	createOutParams(g,node) {
		let ang = -((this.outParams.length - 1) * 0.62831853071795862) / 2;
		let _g = 0;
		let _g1 = this.outParams;
		while(_g < _g1.length) {
			node.createSocket(graph_SocketType.Param(false,_g1[_g++].name)).phys.setNormal(Math.cos(ang),Math.sin(ang));
			ang += 0.62831853071795862;
		}
	}
}
$hxClasses["app.NodeInfo"] = app_NodeInfo;
app_NodeInfo.__name__ = "app.NodeInfo";
Object.assign(app_NodeInfo.prototype, {
	__class__: app_NodeInfo
});
class app_NodeInputParamInfo {
	constructor(name,defaultValue) {
		this.name = name;
		this.defaultValue = defaultValue;
	}
}
$hxClasses["app.NodeInputParamInfo"] = app_NodeInputParamInfo;
app_NodeInputParamInfo.__name__ = "app.NodeInputParamInfo";
Object.assign(app_NodeInputParamInfo.prototype, {
	__class__: app_NodeInputParamInfo
});
var graph_NodeType = $hxEnums["graph.NodeType"] = { __ename__ : "graph.NodeType", __constructs__ : ["Normal","Module","Small","Boundary"]
	,Normal: ($_=function(input,output) { return {_hx_index:0,input:input,output:output,__enum__:"graph.NodeType",toString:$estr}; },$_.__params__ = ["input","output"],$_)
	,Module: ($_=function(input,output) { return {_hx_index:1,input:input,output:output,__enum__:"graph.NodeType",toString:$estr}; },$_.__params__ = ["input","output"],$_)
	,Small: {_hx_index:2,__enum__:"graph.NodeType",toString:$estr}
	,Boundary: ($_=function(io) { return {_hx_index:3,io:io,__enum__:"graph.NodeType",toString:$estr}; },$_.__params__ = ["io"],$_)
};
var synth_NodeRole = $hxEnums["synth.NodeRole"] = { __ename__ : "synth.NodeRole", __constructs__ : ["Frequency","Oscillator","Destination","Delay","Filter","Compressor","Envelope","Number","BinOp","Dupl","None"]
	,Frequency: {_hx_index:0,__enum__:"synth.NodeRole",toString:$estr}
	,Oscillator: ($_=function(type) { return {_hx_index:1,type:type,__enum__:"synth.NodeRole",toString:$estr}; },$_.__params__ = ["type"],$_)
	,Destination: {_hx_index:2,__enum__:"synth.NodeRole",toString:$estr}
	,Delay: {_hx_index:3,__enum__:"synth.NodeRole",toString:$estr}
	,Filter: ($_=function(type) { return {_hx_index:4,type:type,__enum__:"synth.NodeRole",toString:$estr}; },$_.__params__ = ["type"],$_)
	,Compressor: {_hx_index:5,__enum__:"synth.NodeRole",toString:$estr}
	,Envelope: ($_=function(env) { return {_hx_index:6,env:env,__enum__:"synth.NodeRole",toString:$estr}; },$_.__params__ = ["env"],$_)
	,Number: ($_=function(num) { return {_hx_index:7,num:num,__enum__:"synth.NodeRole",toString:$estr}; },$_.__params__ = ["num"],$_)
	,BinOp: ($_=function(type) { return {_hx_index:8,type:type,__enum__:"synth.NodeRole",toString:$estr}; },$_.__params__ = ["type"],$_)
	,Dupl: {_hx_index:9,__enum__:"synth.NodeRole",toString:$estr}
	,None: {_hx_index:10,__enum__:"synth.NodeRole",toString:$estr}
};
class synth_EnvelopeData {
	constructor(a,d,s,r) {
		this.a = a;
		this.d = d;
		this.s = s;
		this.r = r;
	}
}
$hxClasses["synth.EnvelopeData"] = synth_EnvelopeData;
synth_EnvelopeData.__name__ = "synth.EnvelopeData";
Object.assign(synth_EnvelopeData.prototype, {
	__class__: synth_EnvelopeData
});
class synth_NumberData {
	constructor(value) {
		this.set_value(value);
	}
	get_value() {
		return this.valueInt / 10000;
	}
	set_value(v) {
		if(v > 10000) {
			v = 10000;
		} else if(v < -10000) {
			v = -10000;
		}
		let vi = Math.round(v * 10000);
		if(vi == 0 && v != 0) {
			vi = v > 0 ? 1 : -1;
		}
		this.valueInt = vi;
		return this.get_value();
	}
	toString() {
		return StringTools.replace(StringTools.replace(StringTools.replace("$" + Std.string(this.get_value()),"$0.","."),"$-0.","-."),"$","");
	}
}
$hxClasses["synth.NumberData"] = synth_NumberData;
synth_NumberData.__name__ = "synth.NumberData";
Object.assign(synth_NumberData.prototype, {
	__class__: synth_NumberData
});
class app_NodeList {
	static numberOfValue(value) {
		return new app_NodeInfo("Number","",graph_NodeType.Normal(false,true),synth_NodeRole.Number(new synth_NumberData(value)),[],[]);
	}
}
$hxClasses["app.NodeList"] = app_NodeList;
app_NodeList.__name__ = "app.NodeList";
class app_NodeOutputParamInfo {
	constructor(name) {
		this.name = name;
	}
}
$hxClasses["app.NodeOutputParamInfo"] = app_NodeOutputParamInfo;
app_NodeOutputParamInfo.__name__ = "app.NodeOutputParamInfo";
Object.assign(app_NodeOutputParamInfo.prototype, {
	__class__: app_NodeOutputParamInfo
});
class app_AudioNodeTools {
	static eval(src) {
		if(!app_AudioNodeTools.mapN.has(src)) {
			app_AudioNodeTools.mapN.set(src,new haxe_ds_ObjectMap());
		}
		if(!app_AudioNodeTools.mapP.has(src)) {
			app_AudioNodeTools.mapP.set(src,new haxe_ds_ObjectMap());
		}
	}
	static connectSafe(src,targetNode,targetParam) {
		if(targetNode == null && targetParam == null) {
			throw haxe_Exception.thrown("spacify either targetNode or targetParam");
		}
		app_AudioNodeTools.eval(src);
		if(targetNode != null) {
			app_AudioNodeTools.mapN.get(src).set(targetNode,true);
			src.connect(targetNode);
		}
		if(targetParam != null) {
			app_AudioNodeTools.mapP.get(src).set(targetParam,true);
			src.connect(targetParam);
		}
	}
	static disconnectSafe(src,targetNode,targetParam) {
		if(targetNode == null && targetParam == null) {
			throw haxe_Exception.thrown("spacify either targetNode or targetParam");
		}
		app_AudioNodeTools.eval(src);
		if(targetNode != null) {
			app_AudioNodeTools.mapN.get(src).remove(targetNode);
			src.disconnect(targetNode);
		}
		if(targetParam != null) {
			app_AudioNodeTools.mapP.get(src).remove(targetParam);
			src.disconnect(targetParam);
		}
		let n = app_AudioNodeTools.mapN.get(src).keys();
		while(n.hasNext()) src.connect(n.next());
		let p = app_AudioNodeTools.mapP.get(src).keys();
		while(p.hasNext()) src.connect(p.next());
	}
	static disconnectNodesSafe(src,predicate) {
		app_AudioNodeTools.eval(src);
		let _g = [];
		let n = app_AudioNodeTools.mapN.get(src).keys();
		while(n.hasNext()) _g.push(n.next());
		let _g1 = [];
		let _g2 = 0;
		while(_g2 < _g.length) {
			let v = _g[_g2];
			++_g2;
			if(predicate(v)) {
				_g1.push(v);
			}
		}
		let _g3 = 0;
		while(_g3 < _g1.length) {
			let n = _g1[_g3];
			++_g3;
			src.disconnect(n);
			app_AudioNodeTools.mapN.get(src).remove(n);
		}
		let n1 = app_AudioNodeTools.mapN.get(src).keys();
		while(n1.hasNext()) {
			let n = n1.next();
			if(predicate(n)) {
				src.disconnect(n);
			}
		}
	}
	static disconnectParamsSafe(src,predicate) {
		app_AudioNodeTools.eval(src);
		let _g = [];
		let p = app_AudioNodeTools.mapP.get(src).keys();
		while(p.hasNext()) _g.push(p.next());
		let _g1 = [];
		let _g2 = 0;
		while(_g2 < _g.length) {
			let v = _g[_g2];
			++_g2;
			if(predicate(v)) {
				_g1.push(v);
			}
		}
		let _g3 = 0;
		while(_g3 < _g1.length) {
			let p = _g1[_g3];
			++_g3;
			src.disconnect(p);
			app_AudioNodeTools.mapP.get(src).remove(p);
		}
		let p1 = app_AudioNodeTools.mapP.get(src).keys();
		while(p1.hasNext()) {
			let p = p1.next();
			if(predicate(p)) {
				src.disconnect(p);
			}
		}
	}
	static disconnectAllSafe(src) {
		app_AudioNodeTools.eval(src);
		app_AudioNodeTools.mapN.get(src).h = { __keys__ : { }};
		app_AudioNodeTools.mapP.get(src).h = { __keys__ : { }};
		src.disconnect();
	}
}
$hxClasses["app.AudioNodeTools"] = app_AudioNodeTools;
app_AudioNodeTools.__name__ = "app.AudioNodeTools";
class app__$WebAudioCompiler_NodeData {
	constructor(id,setting,target) {
		this.id = id;
		this.setting = setting;
		this.target = target;
	}
}
$hxClasses["app._WebAudioCompiler.NodeData"] = app__$WebAudioCompiler_NodeData;
app__$WebAudioCompiler_NodeData.__name__ = "app._WebAudioCompiler.NodeData";
Object.assign(app__$WebAudioCompiler_NodeData.prototype, {
	__class__: app__$WebAudioCompiler_NodeData
});
class app__$WebAudioCompiler_SocketData {
	constructor(id,nodeId,type,target) {
		this.id = id;
		this.nodeId = nodeId;
		this.type = type;
		this.target = target;
	}
}
$hxClasses["app._WebAudioCompiler.SocketData"] = app__$WebAudioCompiler_SocketData;
app__$WebAudioCompiler_SocketData.__name__ = "app._WebAudioCompiler.SocketData";
Object.assign(app__$WebAudioCompiler_SocketData.prototype, {
	__class__: app__$WebAudioCompiler_SocketData
});
var app__$WebAudioCompiler_SocketTarget = $hxEnums["app._WebAudioCompiler.SocketTarget"] = { __ename__ : "app._WebAudioCompiler.SocketTarget", __constructs__ : ["Node","Param"]
	,Node: ($_=function(n) { return {_hx_index:0,n:n,__enum__:"app._WebAudioCompiler.SocketTarget",toString:$estr}; },$_.__params__ = ["n"],$_)
	,Param: ($_=function(p) { return {_hx_index:1,p:p,__enum__:"app._WebAudioCompiler.SocketTarget",toString:$estr}; },$_.__params__ = ["p"],$_)
};
var app__$WebAudioCompiler_NodeTarget = $hxEnums["app._WebAudioCompiler.NodeTarget"] = { __ename__ : "app._WebAudioCompiler.NodeTarget", __constructs__ : ["Node","MultiNode","OscillatorNode"]
	,Node: ($_=function(n) { return {_hx_index:0,n:n,__enum__:"app._WebAudioCompiler.NodeTarget",toString:$estr}; },$_.__params__ = ["n"],$_)
	,MultiNode: ($_=function(n) { return {_hx_index:1,n:n,__enum__:"app._WebAudioCompiler.NodeTarget",toString:$estr}; },$_.__params__ = ["n"],$_)
	,OscillatorNode: ($_=function(n) { return {_hx_index:2,n:n,__enum__:"app._WebAudioCompiler.NodeTarget",toString:$estr}; },$_.__params__ = ["n"],$_)
};
class app__$WebAudioCompiler_CustomOscillatorNode {
	constructor(ctx,type) {
		this.ctx = ctx;
		this.oscillator = ctx.createOscillator();
		this.frequency = this.oscillator.frequency;
		this.detune = this.oscillator.detune;
		this.output = ctx.createGain();
		this.gain = this.output.gain;
		this.gain.value = 1.0;
		app_AudioNodeTools.connectSafe(this.oscillator,this.output);
		this.setType(type);
		this.oscillator.start();
	}
	setType(type) {
		let tmp;
		switch(type) {
		case "saw":
			tmp = "sawtooth";
			break;
		case "sin":
			tmp = "sine";
			break;
		case "sq":
			tmp = "square";
			break;
		case "tri":
			tmp = "triangle";
			break;
		}
		this.oscillator.type = tmp;
	}
}
$hxClasses["app._WebAudioCompiler.CustomOscillatorNode"] = app__$WebAudioCompiler_CustomOscillatorNode;
app__$WebAudioCompiler_CustomOscillatorNode.__name__ = "app._WebAudioCompiler.CustomOscillatorNode";
Object.assign(app__$WebAudioCompiler_CustomOscillatorNode.prototype, {
	__class__: app__$WebAudioCompiler_CustomOscillatorNode
});
class app__$WebAudioCompiler_MultiNode {
	constructor(ctx,mul) {
		this.ctx = ctx;
		this.mul = mul;
		this.inputs = [];
		this.output = ctx.createGain();
		this.output.gain.value = 0;
		this.const = app__$WebAudioCompiler_ConstNode.make(ctx,mul ? 1 : 0);
		app_AudioNodeTools.connectSafe(this.const,this.output);
		this.nodes = [];
	}
	connectInput(input) {
		this.inputs.push(input);
		this.updateInputs();
	}
	isInternalNode(node) {
		if(node != this.output) {
			return this.nodes.includes(node);
		} else {
			return true;
		}
	}
	disconnectInput(input) {
		HxOverrides.remove(this.inputs,input);
		app_AudioNodeTools.disconnectNodesSafe(input,$bind(this,this.isInternalNode));
		this.updateInputs();
	}
	updateInputs() {
		let _g = 0;
		let _g1 = this.inputs;
		while(_g < _g1.length) app_AudioNodeTools.disconnectNodesSafe(_g1[_g++],$bind(this,this.isInternalNode));
		let _g2 = 0;
		let _g3 = this.nodes;
		while(_g2 < _g3.length) app_AudioNodeTools.disconnectAllSafe(_g3[_g2++]);
		this.nodes = [];
		if(this.mul) {
			this.const.gain.value = 1;
			let lastNode = this.output;
			let _g = 0;
			let _g1 = this.inputs;
			while(_g < _g1.length) {
				let n = _g1[_g++];
				let gain = this.ctx.createGain();
				lastNode.gain.value = 0;
				app_AudioNodeTools.connectSafe(gain,null,lastNode.gain);
				this.nodes.push(gain);
				lastNode = gain;
				app_AudioNodeTools.connectSafe(n,gain);
			}
		} else {
			this.const.gain.value = 0;
			this.output.gain.value = 1;
			let _g = 0;
			let _g1 = this.inputs;
			while(_g < _g1.length) app_AudioNodeTools.connectSafe(_g1[_g++],this.output);
		}
	}
}
$hxClasses["app._WebAudioCompiler.MultiNode"] = app__$WebAudioCompiler_MultiNode;
app__$WebAudioCompiler_MultiNode.__name__ = "app._WebAudioCompiler.MultiNode";
Object.assign(app__$WebAudioCompiler_MultiNode.prototype, {
	__class__: app__$WebAudioCompiler_MultiNode
});
class app__$WebAudioCompiler_ConstNode {
	static make(ctx,x) {
		if(x == null) {
			x = 1.0;
		}
		let buf = ctx.createBuffer(1,256,ctx.sampleRate);
		buf.getChannelData(0).fill(1);
		let one = ctx.createBufferSource();
		one.buffer = buf;
		one.loop = true;
		one.start();
		let gain = ctx.createGain();
		app_AudioNodeTools.connectSafe(one,gain);
		gain.gain.value = x;
		return gain;
	}
}
$hxClasses["app._WebAudioCompiler.ConstNode"] = app__$WebAudioCompiler_ConstNode;
app__$WebAudioCompiler_ConstNode.__name__ = "app._WebAudioCompiler.ConstNode";
class graph_GraphListener {
}
$hxClasses["graph.GraphListener"] = graph_GraphListener;
graph_GraphListener.__name__ = "graph.GraphListener";
graph_GraphListener.__isInterface__ = true;
Object.assign(graph_GraphListener.prototype, {
	__class__: graph_GraphListener
});
class app_WebAudioCompiler {
	constructor() {
		this.waveDataBuffer = new Float32Array(1024);
		this.socketMap = new haxe_ds_IntMap();
		this.nodeMap = new haxe_ds_IntMap();
		this.ctx = new (window.AudioContext || window.webkitAudioContext)();
		this.ctx.suspend();
		let saturator = this.ctx.createScriptProcessor(1024);
		let _gthis = this;
		saturator.addEventListener("audioprocess",function(e) {
			let inL = e.inputBuffer.getChannelData(0);
			let inR = e.inputBuffer.getChannelData(1);
			let outL = e.outputBuffer.getChannelData(0);
			let outR = e.outputBuffer.getChannelData(1);
			let _g = 0;
			while(_g < 1024) {
				let i = _g++;
				let x = inL[i];
				outL[i] = isNaN(x) ? 0 : x < -1 ? -1 : x > 1 ? 1 : x;
				let x1 = inR[i];
				outR[i] = isNaN(x1) ? 0 : x1 < -1 ? -1 : x1 > 1 ? 1 : x1;
			}
		});
		this.masterGain = this.ctx.createGain();
		this.masterGain.gain.value = 0.0;
		let hiddenGain = this.ctx.createGain();
		hiddenGain.gain.value = 0.8;
		app_AudioNodeTools.connectSafe(saturator,this.masterGain);
		app_AudioNodeTools.connectSafe(this.masterGain,hiddenGain);
		app_AudioNodeTools.connectSafe(hiddenGain,this.ctx.destination);
		this.dest = saturator;
		this.analyzer = this.ctx.createScriptProcessor(1024,1,1);
		this.analyzer.addEventListener("audioprocess",function(e) {
			let input = e.inputBuffer.getChannelData(0);
			let _g = 0;
			while(_g < 1024) {
				let i = _g++;
				_gthis.waveDataBuffer[i] = input[i];
			}
		});
		app_AudioNodeTools.connectSafe(this.masterGain,this.analyzer);
		app_AudioNodeTools.connectSafe(this.analyzer,this.ctx.destination);
		this.startedOnce = false;
		this.suspended = true;
		this.lastFrequency = 0;
	}
	playStartSound() {
		let oscs = [this.ctx.createOscillator(),this.ctx.createOscillator(),this.ctx.createOscillator(),this.ctx.createOscillator()];
		oscs[0].type = "square";
		oscs[1].type = "square";
		oscs[2].type = "sawtooth";
		oscs[3].type = "sawtooth";
		oscs[0].frequency.value = 220;
		oscs[1].frequency.value = 293.33333333333331;
		oscs[2].frequency.value = 366.66666666666663;
		oscs[3].frequency.value = 440;
		let gain = this.ctx.createGain();
		let _g = 0;
		while(_g < oscs.length) {
			let osc = oscs[_g];
			++_g;
			osc.connect(gain);
			osc.start();
		}
		let time = this.ctx.currentTime;
		gain.gain.setValueAtTime(0,time);
		gain.gain.linearRampToValueAtTime(1,time + 0.6);
		gain.gain.linearRampToValueAtTime(0,time + 1.2);
		let comp = this.ctx.createDynamicsCompressor();
		gain.connect(comp);
		let gain2 = this.ctx.createGain();
		gain2.gain.value = 0.5;
		comp.connect(gain2);
		gain2.connect(this.ctx.destination);
		gain2.connect(this.analyzer);
	}
	start() {
		if(this.suspended) {
			let time = this.ctx.currentTime;
			let gain = this.masterGain.gain;
			if(!this.startedOnce) {
				this.startedOnce = true;
				this.ctx.resume();
				this.playStartSound();
				gain.setValueAtTime(0,time);
				gain.linearRampToValueAtTime(0,time + 1.5);
				gain.linearRampToValueAtTime(1,time + 2.0);
			} else {
				gain.setValueAtTime(gain.value,time);
				gain.linearRampToValueAtTime(1,time + 0.01);
			}
			this.suspended = false;
		}
	}
	stop() {
		if(!this.suspended) {
			let time = this.ctx.currentTime;
			let gain = this.masterGain.gain;
			gain.setValueAtTime(gain.value,time);
			gain.linearRampToValueAtTime(0,time + 0.01);
			this.suspended = true;
		}
	}
	attack() {
		let n = this.nodeMap.iterator();
		while(n.hasNext()) {
			let n1 = n.next();
			let _g = n1.setting.role;
			if(_g._hx_index == 6) {
				let _g1 = _g.env;
				let gain = (js_Boot.__cast(this.getNodeOf(n1.id) , GainNode)).gain;
				let time = this.ctx.currentTime;
				gain.cancelScheduledValues(time);
				gain.setValueAtTime(gain.value,time);
				gain.linearRampToValueAtTime(1,time + _g1.a);
				gain.linearRampToValueAtTime(_g1.s,time + _g1.a + _g1.d);
			}
		}
	}
	release() {
		let n = this.nodeMap.iterator();
		while(n.hasNext()) {
			let n1 = n.next();
			let _g = n1.setting.role;
			if(_g._hx_index == 6) {
				let gain = (js_Boot.__cast(this.getNodeOf(n1.id) , GainNode)).gain;
				let time = this.ctx.currentTime;
				gain.cancelScheduledValues(time);
				gain.setValueAtTime(gain.value,time);
				gain.linearRampToValueAtTime(0,time + _g.env.r);
			}
		}
	}
	setFrequency(f,t) {
		this.lastFrequency = f;
		let n = this.nodeMap.iterator();
		while(n.hasNext()) {
			let n1 = n.next();
			if(n1.setting.role._hx_index == 0) {
				let gain = (js_Boot.__cast(this.getNodeOf(n1.id) , GainNode)).gain;
				let time = this.ctx.currentTime;
				gain.cancelScheduledValues(time);
				gain.setValueAtTime(gain.value,time);
				gain.linearRampToValueAtTime(f,time + t);
			}
		}
	}
	onNodeCreated(id,setting) {
		console.log("src/app/WebAudioCompiler.hx:423:","node created: " + id);
		let target;
		let _g = setting.role;
		switch(_g._hx_index) {
		case 0:
			target = app__$WebAudioCompiler_NodeTarget.Node(app__$WebAudioCompiler_ConstNode.make(this.ctx,this.lastFrequency));
			break;
		case 1:
			target = app__$WebAudioCompiler_NodeTarget.OscillatorNode(new app__$WebAudioCompiler_CustomOscillatorNode(this.ctx,_g.type));
			break;
		case 2:
			target = app__$WebAudioCompiler_NodeTarget.Node(this.dest);
			break;
		case 3:
			target = app__$WebAudioCompiler_NodeTarget.Node(this.ctx.createDelay(5));
			break;
		case 4:
			let bq = this.ctx.createBiquadFilter();
			let target1;
			switch(_g.type) {
			case "bp":
				target1 = "bandpass";
				break;
			case "bs":
				target1 = "notch";
				break;
			case "hp":
				target1 = "highpass";
				break;
			case "hs":
				target1 = "highshelf";
				break;
			case "lp":
				target1 = "lowpass";
				break;
			case "ls":
				target1 = "lowshelf";
				break;
			case "p":
				target1 = "peaking";
				break;
			}
			bq.type = target1;
			target = app__$WebAudioCompiler_NodeTarget.Node(bq);
			break;
		case 5:
			target = app__$WebAudioCompiler_NodeTarget.Node(this.ctx.createDynamicsCompressor());
			break;
		case 6:
			target = app__$WebAudioCompiler_NodeTarget.Node(app__$WebAudioCompiler_ConstNode.make(this.ctx,0));
			break;
		case 7:
			target = app__$WebAudioCompiler_NodeTarget.Node(app__$WebAudioCompiler_ConstNode.make(this.ctx,_g.num.get_value()));
			break;
		case 8:
			let target2;
			switch(_g.type) {
			case 0:
				target2 = false;
				break;
			case 1:
				target2 = true;
				break;
			}
			target = app__$WebAudioCompiler_NodeTarget.MultiNode(new app__$WebAudioCompiler_MultiNode(this.ctx,target2));
			break;
		case 9:
			target = app__$WebAudioCompiler_NodeTarget.MultiNode(new app__$WebAudioCompiler_MultiNode(this.ctx,false));
			break;
		case 10:
			throw haxe_Exception.thrown("this should not be created");
		}
		this.nodeMap.h[id] = new app__$WebAudioCompiler_NodeData(id,setting,target);
	}
	onNodeDestroyed(id) {
		console.log("src/app/WebAudioCompiler.hx:475:","node destroyed: " + id);
		this.nodeMap.remove(id);
	}
	getNodeOf(id) {
		let _g = this.nodeMap.h[id].target;
		switch(_g._hx_index) {
		case 0:
			return _g.n;
		case 1:
			return _g.n;
		case 2:
			return _g.n;
		}
	}
	onSocketCreated(id,nodeId,type) {
		console.log("src/app/WebAudioCompiler.hx:491:","socket created: " + id);
		let node = this.nodeMap.h[nodeId];
		let target;
		switch(type._hx_index) {
		case 0:
			if(type.io) {
				let terminal = this.ctx.createGain();
				let _g = node.target;
				switch(_g._hx_index) {
				case 0:
					app_AudioNodeTools.connectSafe(_g.n,terminal);
					break;
				case 1:
					app_AudioNodeTools.connectSafe(_g.n.output,terminal);
					break;
				case 2:
					app_AudioNodeTools.connectSafe(_g.n.output,terminal);
					break;
				}
				target = app__$WebAudioCompiler_SocketTarget.Node(app__$WebAudioCompiler_NodeTarget.Node(terminal));
			} else {
				target = app__$WebAudioCompiler_SocketTarget.Node(node.target);
			}
			break;
		case 1:
			let _g = type.name;
			if(type.io) {
				throw haxe_Exception.thrown("output param not supported");
			} else {
				let target1;
				switch(node.setting.role._hx_index) {
				case 1:
					let osc = js_Boot.__cast(this.getNodeOf(nodeId) , app__$WebAudioCompiler_CustomOscillatorNode);
					switch(_g) {
					case "detune":
						target1 = osc.detune;
						break;
					case "freq":
						target1 = osc.frequency;
						break;
					case "gain":
						target1 = osc.gain;
						break;
					default:
						throw haxe_Exception.thrown("!?");
					}
					break;
				case 3:
					let del = js_Boot.__cast(this.getNodeOf(nodeId) , DelayNode);
					if(_g == "time") {
						target1 = del.delayTime;
					} else {
						throw haxe_Exception.thrown("!?");
					}
					break;
				case 4:
					let bq = js_Boot.__cast(this.getNodeOf(nodeId) , BiquadFilterNode);
					switch(_g) {
					case "Q":
						target1 = bq.Q;
						break;
					case "freq":
						target1 = bq.frequency;
						break;
					case "gain":
						target1 = bq.gain;
						break;
					default:
						throw haxe_Exception.thrown("!?");
					}
					break;
				default:
					throw haxe_Exception.thrown("not implemented yet");
				}
				target = app__$WebAudioCompiler_SocketTarget.Param(target1);
			}
			break;
		case 2:
			throw haxe_Exception.thrown("this should never happen");
		}
		this.socketMap.h[id] = new app__$WebAudioCompiler_SocketData(id,nodeId,type,target);
	}
	onSocketDestroyed(id) {
		console.log("src/app/WebAudioCompiler.hx:553:","socket destroyed: " + id);
		let s = this.socketMap.h[id];
		let _g = s.type;
		if(_g._hx_index == 0 && _g.io == true) {
			let terminal;
			let _g = s.target;
			if(_g._hx_index == 0) {
				let _g1 = _g.n;
				if(_g1._hx_index == 0) {
					terminal = _g1.n;
				} else {
					throw haxe_Exception.thrown("!?");
				}
			} else {
				throw haxe_Exception.thrown("!?");
			}
			let _g1 = this.nodeMap.h[s.nodeId].target;
			switch(_g1._hx_index) {
			case 0:
				app_AudioNodeTools.disconnectSafe(_g1.n,terminal);
				break;
			case 1:
				app_AudioNodeTools.connectSafe(_g1.n.output,terminal);
				break;
			case 2:
				app_AudioNodeTools.connectSafe(_g1.n.output,terminal);
				break;
			}
		}
		this.socketMap.remove(id);
	}
	onSocketConnected(id1,id2) {
		console.log("src/app/WebAudioCompiler.hx:580:","connected: " + id1 + "->" + id2);
		let s2 = this.socketMap.h[id2];
		let _g = this.socketMap.h[id1].target;
		switch(_g._hx_index) {
		case 0:
			let _g1 = _g.n;
			switch(_g1._hx_index) {
			case 0:
				let _g2 = _g1.n;
				let _g3 = s2.target;
				switch(_g3._hx_index) {
				case 0:
					let _g4 = _g3.n;
					switch(_g4._hx_index) {
					case 0:
						app_AudioNodeTools.connectSafe(_g2,_g4.n);
						break;
					case 1:
						_g4.n.connectInput(_g2);
						break;
					case 2:
						break;
					}
					break;
				case 1:
					let _g5 = _g3.p;
					app_AudioNodeTools.connectSafe(_g2,null,_g5);
					_g5.value = 0;
					break;
				}
				break;
			case 1:
				throw haxe_Exception.thrown("starting socket target must not be a MultiNode");
			case 2:
				throw haxe_Exception.thrown("starting socket target must not be an OscillatorNode");
			}
			break;
		case 1:
			throw haxe_Exception.thrown("starting socket target must not be a param");
		}
	}
	onSocketDisconnected(id1,id2) {
		console.log("src/app/WebAudioCompiler.hx:612:","disconnected: " + id1 + "->" + id2);
		let s2 = this.socketMap.h[id2];
		let _g = this.socketMap.h[id1].target;
		switch(_g._hx_index) {
		case 0:
			let _g1 = _g.n;
			switch(_g1._hx_index) {
			case 0:
				let _g2 = _g1.n;
				let _g3 = s2.target;
				switch(_g3._hx_index) {
				case 0:
					let _g4 = _g3.n;
					switch(_g4._hx_index) {
					case 0:
						app_AudioNodeTools.disconnectSafe(_g2,_g4.n);
						break;
					case 1:
						_g4.n.disconnectInput(_g2);
						break;
					case 2:
						break;
					}
					break;
				case 1:
					let _g5 = _g3.p;
					app_AudioNodeTools.disconnectSafe(_g2,null,_g5);
					_g5.value = _g5.defaultValue;
					break;
				}
				break;
			case 1:
				throw haxe_Exception.thrown("starting socket target must not be a MultiNode");
			case 2:
				throw haxe_Exception.thrown("starting socket target must not be an OscillatorNode");
			}
			break;
		case 1:
			throw haxe_Exception.thrown("starting socket target must not be a param");
		}
	}
	onNodeUpdated(id) {
		let _g = this.nodeMap.h[id].setting.role;
		switch(_g._hx_index) {
		case 1:
			(js_Boot.__cast(this.getNodeOf(id) , app__$WebAudioCompiler_CustomOscillatorNode)).setType(_g.type);
			break;
		case 4:
			let bq = js_Boot.__cast(this.getNodeOf(id) , BiquadFilterNode);
			let tmp;
			switch(_g.type) {
			case "bp":
				tmp = "bandpass";
				break;
			case "bs":
				tmp = "notch";
				break;
			case "hp":
				tmp = "highpass";
				break;
			case "hs":
				tmp = "highshelf";
				break;
			case "lp":
				tmp = "lowpass";
				break;
			case "ls":
				tmp = "lowshelf";
				break;
			case "p":
				tmp = "peaking";
				break;
			}
			bq.type = tmp;
			break;
		case 7:
			(js_Boot.__cast(this.getNodeOf(id) , GainNode)).gain.value = _g.num.get_value();
			break;
		case 8:
			let multi = js_Boot.__cast(this.getNodeOf(id) , app__$WebAudioCompiler_MultiNode);
			let tmp1;
			switch(_g.type) {
			case 0:
				tmp1 = false;
				break;
			case 1:
				tmp1 = true;
				break;
			}
			multi.mul = tmp1;
			multi.updateInputs();
			break;
		default:
		}
	}
	onWaveDataRequest(outArray) {
		if(this.suspended) {
			return;
		}
		let _g = 0;
		while(_g < 256) outArray.push(this.waveDataBuffer[_g++]);
	}
}
$hxClasses["app.WebAudioCompiler"] = app_WebAudioCompiler;
app_WebAudioCompiler.__name__ = "app.WebAudioCompiler";
app_WebAudioCompiler.__interfaces__ = [graph_GraphListener];
Object.assign(app_WebAudioCompiler.prototype, {
	__class__: app_WebAudioCompiler
});
class app_event_Dispatcher {
	constructor() {
		if(app_event_Dispatcher._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this.listeners = [];
	}
	addListener(listener) {
		if(this.listeners.indexOf(listener) != -1) {
			return false;
		}
		this.listeners.push(listener);
		return true;
	}
	removeListener(listener) {
		return HxOverrides.remove(this.listeners,listener);
	}
	dispatch(f) {
		let _g = 0;
		let _g1 = this.listeners;
		while(_g < _g1.length) f(_g1[_g++]);
	}
}
$hxClasses["app.event.Dispatcher"] = app_event_Dispatcher;
app_event_Dispatcher.__name__ = "app.event.Dispatcher";
Object.assign(app_event_Dispatcher.prototype, {
	__class__: app_event_Dispatcher
});
var app_graphics_DrawMode = $hxEnums["app.graphics.DrawMode"] = { __ename__ : "app.graphics.DrawMode", __constructs__ : ["Stroke","Fill","Both"]
	,Stroke: {_hx_index:0,__enum__:"app.graphics.DrawMode",toString:$estr}
	,Fill: {_hx_index:1,__enum__:"app.graphics.DrawMode",toString:$estr}
	,Both: {_hx_index:2,__enum__:"app.graphics.DrawMode",toString:$estr}
};
class app_graphics_Graphics {
	constructor(canvas) {
		this.canvas = canvas;
		this.c2d = canvas.getContext("2d",null);
	}
	font(name,size,bold) {
		this.c2d.font = (bold ? "bold " : "") + ("" + size + "px \"" + name + "\"");
	}
}
$hxClasses["app.graphics.Graphics"] = app_graphics_Graphics;
app_graphics_Graphics.__name__ = "app.graphics.Graphics";
Object.assign(app_graphics_Graphics.prototype, {
	__class__: app_graphics_Graphics
});
class app_ui_AnchorPeek {
}
$hxClasses["app.ui.AnchorPeek"] = app_ui_AnchorPeek;
app_ui_AnchorPeek.__name__ = "app.ui.AnchorPeek";
app_ui_AnchorPeek.__isInterface__ = true;
Object.assign(app_ui_AnchorPeek.prototype, {
	__class__: app_ui_AnchorPeek
});
class app_ui_Pointer {
	constructor(id,isPrimary) {
		this.id = id;
		this.isPrimary = isPrimary;
		this.x = 0;
		this.y = 0;
		this.downBits = 0;
	}
	isDown(index) {
		return (this.downBits >> index & 1) == 1;
	}
	down(index) {
		this.downBits |= 1 << index;
	}
	up(index) {
		this.downBits &= ~(1 << index);
	}
}
$hxClasses["app.ui.Pointer"] = app_ui_Pointer;
app_ui_Pointer.__name__ = "app.ui.Pointer";
Object.assign(app_ui_Pointer.prototype, {
	__class__: app_ui_Pointer
});
class app_ui_PointerListener {
}
$hxClasses["app.ui.PointerListener"] = app_ui_PointerListener;
app_ui_PointerListener.__name__ = "app.ui.PointerListener";
app_ui_PointerListener.__isInterface__ = true;
Object.assign(app_ui_PointerListener.prototype, {
	__class__: app_ui_PointerListener
});
class app_ui_PointerManager extends app_event_Dispatcher {
	constructor(originX,originY) {
		app_event_Dispatcher._hx_skip_constructor = true;
		super();
		app_event_Dispatcher._hx_skip_constructor = false;
		this._hx_constructor(originX,originY);
	}
	_hx_constructor(originX,originY) {
		this.pointers = [];
		super._hx_constructor();
		this.originX = originX;
		this.originY = originY;
	}
	onEnter(id,downBits) {
		let p = new app_ui_Pointer(id,this.pointers.length == 0);
		p.downBits = downBits;
		this.pointers.push(p);
		this.dispatch(function(l) {
			l.onPointerEnter(p);
		});
	}
	onExit(id) {
		let res = null;
		let _g = 0;
		let _g1 = this.pointers;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			if(p.id == id) {
				res = p;
				break;
			}
		}
		let p = res;
		this.dispatch(function(l) {
			l.onPointerExit(p);
		});
		HxOverrides.remove(this.pointers,p);
	}
	onDown(id,index) {
		let res = null;
		let _g = 0;
		let _g1 = this.pointers;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			if(p.id == id) {
				res = p;
				break;
			}
		}
		let p = res;
		p.downBits |= 1 << index;
		this.dispatch(function(l) {
			l.onPointerDown(p,index);
		});
	}
	onUp(id,index) {
		let res = null;
		let _g = 0;
		let _g1 = this.pointers;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			if(p.id == id) {
				res = p;
				break;
			}
		}
		let p = res;
		p.downBits &= ~(1 << index);
		this.dispatch(function(l) {
			l.onPointerUp(p,index);
		});
	}
	onMove(id,x,y) {
		let res = null;
		let _g = 0;
		let _g1 = this.pointers;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			if(p.id == id) {
				res = p;
				break;
			}
		}
		let p = res;
		let tmp = this.originX();
		p.x = x - tmp;
		let tmp1 = this.originY();
		p.y = y - tmp1;
		this.dispatch(function(l) {
			l.onPointerMove(p);
		});
	}
	onWheel(id,amount) {
		let res = null;
		let _g = 0;
		let _g1 = this.pointers;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			if(p.id == id) {
				res = p;
				break;
			}
		}
		let p = res;
		this.dispatch(function(l) {
			l.onWheel(p,amount);
		});
	}
	get(id) {
		let res = null;
		let _g = 0;
		let _g1 = this.pointers;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			if(p.id == id) {
				res = p;
				break;
			}
		}
		return res;
	}
}
$hxClasses["app.ui.PointerManager"] = app_ui_PointerManager;
app_ui_PointerManager.__name__ = "app.ui.PointerManager";
app_ui_PointerManager.__super__ = app_event_Dispatcher;
Object.assign(app_ui_PointerManager.prototype, {
	__class__: app_ui_PointerManager
});
var app_ui_PointerPolicy = $hxEnums["app.ui.PointerPolicy"] = { __ename__ : "app.ui.PointerPolicy", __constructs__ : ["Free","Lock","Exclusive"]
	,Free: {_hx_index:0,__enum__:"app.ui.PointerPolicy",toString:$estr}
	,Lock: {_hx_index:1,__enum__:"app.ui.PointerPolicy",toString:$estr}
	,Exclusive: {_hx_index:2,__enum__:"app.ui.PointerPolicy",toString:$estr}
};
class app_ui_SizePeek {
}
$hxClasses["app.ui.SizePeek"] = app_ui_SizePeek;
app_ui_SizePeek.__name__ = "app.ui.SizePeek";
app_ui_SizePeek.__isInterface__ = true;
Object.assign(app_ui_SizePeek.prototype, {
	__class__: app_ui_SizePeek
});
class app_ui_Sprite {
	constructor(element) {
		if(app_ui_Sprite._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(element);
	}
	_hx_constructor(element) {
		this.dead = false;
		this.cursor = "auto";
		this.stage = null;
		this.pointerPolicy = app_ui_PointerPolicy.Lock;
		this.stopEvent = false;
		this.children = [];
		this.parent = null;
		let _gthis = this;
		this.element = element != null ? element : new app_ui_core_Element();
		this.pointerManager = new app_ui_PointerManager(function() {
			return _gthis.element.boundary.x;
		},function() {
			return _gthis.element.boundary.y;
		});
		this.pointerManager.addListener(this);
	}
	addChild(s) {
		if(s.parent != null) {
			throw haxe_Exception.thrown("cannot add");
		}
		this.children.push(s);
		s.parent = this;
		this.element.addChild(s.element);
		if(this.stage != null) {
			this.setStage(s,this.stage);
		}
	}
	removeChild(s) {
		if(s.parent != this) {
			throw haxe_Exception.thrown("cannot remove");
		}
		HxOverrides.remove(this.children,s);
		s.parent = null;
		this.element.removeChild(s.element);
		if(this.stage != null) {
			this.setStage(s,null);
		}
	}
	setStage(s,stage) {
		s.stage = stage;
		let _g = 0;
		let _g1 = s.children;
		while(_g < _g1.length) this.setStage(_g1[_g++],stage);
	}
	onPointerEnter(p) {
	}
	onPointerExit(p) {
	}
	onPointerDown(p,index) {
	}
	onPointerUp(p,index) {
	}
	onPointerMove(p) {
	}
	onWheel(p,amount) {
	}
	update() {
	}
	draw(g) {
	}
}
$hxClasses["app.ui.Sprite"] = app_ui_Sprite;
app_ui_Sprite.__name__ = "app.ui.Sprite";
app_ui_Sprite.__interfaces__ = [app_ui_PointerListener];
Object.assign(app_ui_Sprite.prototype, {
	__class__: app_ui_Sprite
});
class app_ui_Stage {
	constructor(input,g) {
		this.drawBoundary = false;
		this.cursor = "default";
		this.pointerIdCount = 0;
		this.captureMap = new haxe_ds_IntMap();
		this.pointerIdMap = new haxe_ds_IntMap();
		this.elementMap = new haxe_ds_IntMap();
		this.scale = 1;
		this.input = input;
		this.g = g;
		this.ui = new app_ui_core_UI();
		this.root = new app_ui_Sprite(this.ui.root);
		this.root.stage = this;
	}
	resize(w,h) {
		this.ui.width = w;
		this.ui.height = h;
	}
	update() {
		this.ui.layout();
		this.updateMap();
		this.updateInput(this.input);
		this.updateSprite(this.root);
		this.ui.layout();
	}
	updateSprite(s) {
		s.update();
		let i = 0;
		while(i < s.children.length) {
			let c = s.children[i];
			this.updateSprite(c);
			if(c.dead) {
				s.removeChild(c);
				continue;
			}
			++i;
		}
	}
	updateMap() {
		this.elementMap.h = { };
		this.registerMap(this.root);
	}
	registerMap(s) {
		this.elementMap.h[s.element.id] = s;
		let _g = 0;
		let _g1 = s.children;
		while(_g < _g1.length) this.registerMap(_g1[_g++]);
	}
	updateInput(input) {
		if(input.mouse.enabled) {
			if(this.captureMap.h[0] == null) {
				this.captureMap.h[0] = [];
			}
			this.updatePointer(0,input.mouse.x,input.mouse.y,(input.mouse.left ? 1 : 0) | (input.mouse.right ? 2 : 0),(input.mouse.dleft == 1 ? 1 : 0) | (input.mouse.dright == 1 ? 2 : 0),(input.mouse.dleft == -1 ? 1 : 0) | (input.mouse.dright == -1 ? 2 : 0),input.mouse.wheel);
		}
		let _g = 0;
		let _g1 = input.touches;
		while(_g < _g1.touches.length) {
			let t = _g1.touches[_g];
			++_g;
			if(t.dtouching == 1) {
				this.pointerIdMap.h[t.id] = ++this.pointerIdCount;
				this.captureMap.h[this.pointerIdMap.h[t.id]] = [];
			}
		}
		let _g2 = 0;
		let _g3 = input.touches;
		while(_g2 < _g3.touches.length) {
			let t = _g3.touches[_g2];
			++_g2;
			if(this.pointerIdMap.h.hasOwnProperty(t.id)) {
				this.updatePointer(this.pointerIdMap.h[t.id],t.x,t.y,t.touching ? 1 : 0,t.dtouching == 1 ? 1 : 0,t.dtouching == -1 ? 1 : 0,0);
			}
		}
		let _g4 = 0;
		let _g5 = input.touches;
		while(_g4 < _g5.touches.length) {
			let t = _g5.touches[_g4];
			++_g4;
			if(t.dtouching == -1) {
				this.updateCapture(this.pointerIdMap.h[t.id],[],true,0);
				this.captureMap.remove(this.pointerIdMap.h[t.id]);
				this.pointerIdMap.remove(t.id);
			}
		}
		let this1 = input.keyboard;
		let code = "Space";
		if(!this1.keys.exists(code)) {
			this1.keys.set(code,new pot_input_Key());
		}
		if(this1.keys.get(code).ddown == 1) {
			this.drawBoundary = !this.drawBoundary;
		}
	}
	updatePointer(id,x,y,downBits,pressedBits,releasedBits,wheelAmount) {
		x /= this.scale;
		y /= this.scale;
		if(releasedBits != 0) {
			if((releasedBits & 1) == 1) {
				let _g = 0;
				let _g1 = this.captureMap.h[id];
				while(_g < _g1.length) _g1[_g++].pointerManager.onUp(id,0);
			}
			if((releasedBits >> 1 & 1) == 1) {
				let _g = 0;
				let _g1 = this.captureMap.h[id];
				while(_g < _g1.length) _g1[_g++].pointerManager.onUp(id,1);
			}
			if((releasedBits >> 2 & 1) == 1) {
				let _g = 0;
				let _g1 = this.captureMap.h[id];
				while(_g < _g1.length) _g1[_g++].pointerManager.onUp(id,2);
			}
			if((releasedBits >> 3 & 1) == 1) {
				let _g = 0;
				let _g1 = this.captureMap.h[id];
				while(_g < _g1.length) _g1[_g++].pointerManager.onUp(id,3);
			}
			if((releasedBits >> 4 & 1) == 1) {
				let _g = 0;
				let _g1 = this.captureMap.h[id];
				while(_g < _g1.length) _g1[_g++].pointerManager.onUp(id,4);
			}
			if((releasedBits >> 5 & 1) == 1) {
				let _g = 0;
				let _g1 = this.captureMap.h[id];
				while(_g < _g1.length) _g1[_g++].pointerManager.onUp(id,5);
			}
			if((releasedBits >> 6 & 1) == 1) {
				let _g = 0;
				let _g1 = this.captureMap.h[id];
				while(_g < _g1.length) _g1[_g++].pointerManager.onUp(id,6);
			}
			if((releasedBits >> 7 & 1) == 1) {
				let _g = 0;
				let _g1 = this.captureMap.h[id];
				while(_g < _g1.length) _g1[_g++].pointerManager.onUp(id,7);
			}
		}
		let pointerFree = (downBits & ~pressedBits) == 0;
		let cap = [];
		let hits = this.ui.hitTest(x,y);
		let _g = 0;
		while(_g < hits.length) {
			let s = this.elementMap.h[hits[_g++].id];
			cap.push(s);
			if(s.stopEvent) {
				break;
			}
		}
		this.updateCapture(id,cap,pointerFree,downBits & ~pressedBits);
		if(id == 0) {
			this.cursor = "auto";
			let _g = 0;
			let _g1 = this.captureMap.h[id];
			while(_g < _g1.length) {
				let s = _g1[_g];
				++_g;
				if(s.cursor != "auto") {
					this.cursor = s.cursor;
					break;
				}
			}
		}
		let _g1 = 0;
		let _g2 = this.captureMap.h[id];
		while(_g1 < _g2.length) _g2[_g1++].pointerManager.onMove(id,x,y);
		if(wheelAmount != 0) {
			let _g = 0;
			let _g1 = this.captureMap.h[id];
			while(_g < _g1.length) _g1[_g++].pointerManager.onWheel(id,wheelAmount);
		}
		if(pressedBits != 0) {
			if((pressedBits & 1) == 1) {
				let _g = 0;
				let _g1 = this.captureMap.h[id];
				while(_g < _g1.length) _g1[_g++].pointerManager.onDown(id,0);
			}
			if((pressedBits >> 1 & 1) == 1) {
				let _g = 0;
				let _g1 = this.captureMap.h[id];
				while(_g < _g1.length) _g1[_g++].pointerManager.onDown(id,1);
			}
			if((pressedBits >> 2 & 1) == 1) {
				let _g = 0;
				let _g1 = this.captureMap.h[id];
				while(_g < _g1.length) _g1[_g++].pointerManager.onDown(id,2);
			}
			if((pressedBits >> 3 & 1) == 1) {
				let _g = 0;
				let _g1 = this.captureMap.h[id];
				while(_g < _g1.length) _g1[_g++].pointerManager.onDown(id,3);
			}
			if((pressedBits >> 4 & 1) == 1) {
				let _g = 0;
				let _g1 = this.captureMap.h[id];
				while(_g < _g1.length) _g1[_g++].pointerManager.onDown(id,4);
			}
			if((pressedBits >> 5 & 1) == 1) {
				let _g = 0;
				let _g1 = this.captureMap.h[id];
				while(_g < _g1.length) _g1[_g++].pointerManager.onDown(id,5);
			}
			if((pressedBits >> 6 & 1) == 1) {
				let _g = 0;
				let _g1 = this.captureMap.h[id];
				while(_g < _g1.length) _g1[_g++].pointerManager.onDown(id,6);
			}
			if((pressedBits >> 7 & 1) == 1) {
				let _g = 0;
				let _g1 = this.captureMap.h[id];
				while(_g < _g1.length) _g1[_g++].pointerManager.onDown(id,7);
			}
		}
	}
	updateCapture(id,cap,pointerFree,downBits) {
		let oldCap = this.captureMap.h[id];
		let newCap = [];
		let mustLock = false;
		if(!pointerFree) {
			let _g = 0;
			while(_g < oldCap.length) if(oldCap[_g++].pointerPolicy == app_ui_PointerPolicy.Exclusive) {
				mustLock = true;
				break;
			}
		}
		let _g = 0;
		while(_g < oldCap.length) {
			let s = oldCap[_g];
			++_g;
			if(!pointerFree && (mustLock || s.pointerPolicy != app_ui_PointerPolicy.Free)) {
				newCap.push(s);
			}
		}
		let _g1 = 0;
		while(_g1 < cap.length) {
			let s = cap[_g1];
			++_g1;
			if(pointerFree || !(mustLock || s.pointerPolicy != app_ui_PointerPolicy.Free)) {
				if(newCap.indexOf(s) == -1) {
					newCap.push(s);
				}
			}
		}
		let _g2 = 0;
		while(_g2 < oldCap.length) {
			let s = oldCap[_g2];
			++_g2;
			if(newCap.indexOf(s) == -1) {
				s.pointerManager.onExit(id);
			}
		}
		let _g3 = 0;
		while(_g3 < newCap.length) {
			let s = newCap[_g3];
			++_g3;
			if(oldCap.indexOf(s) == -1) {
				s.pointerManager.onEnter(id,downBits);
			}
		}
		newCap.sort(function(a,b) {
			let pa = a.element.get_path();
			let pb = b.element.get_path();
			return -(pa < pb ? -1 : pa > pb ? 1 : 0);
		});
		this.captureMap.h[id] = newCap;
	}
	draw() {
		let _gthis = this;
		let _this = this.g;
		_this.c2d.save();
		_gthis.g.font("Courier New",10,true);
		_gthis.g.c2d.scale(_gthis.scale,_gthis.scale);
		_gthis.drawSprite(_gthis.root);
		_this.c2d.restore();
	}
	drawSprite(s) {
		let _gthis = this;
		let _this = this.g;
		_this.c2d.save();
		let dx = s.element.boundary.x;
		let dy = s.element.boundary.y;
		if(s.parent != null) {
			dx -= s.parent.element.boundary.x;
			dy -= s.parent.element.boundary.y;
		}
		_gthis.g.c2d.translate(dx,dy);
		s.draw(_gthis.g);
		let _g = 0;
		let _g1 = s.children;
		while(_g < _g1.length) _gthis.drawSprite(_g1[_g++]);
		if(_gthis.drawBoundary) {
			let _this = _gthis.g;
			_this.c2d.save();
			_gthis.g.c2d.lineWidth = 0.5;
			_gthis.g.c2d.strokeStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (255.0 | 0) + "," + 1.0 + ")";
			let _this1 = _gthis.g;
			let x = s.element.contentStart(false) - s.element.boundary.x;
			let y = s.element.contentStart(true) - s.element.boundary.y;
			let w = s.element.contentSize(false);
			let h = s.element.contentSize(true);
			_this1.c2d.strokeRect(x,y,w,h);
			_gthis.g.c2d.strokeStyle = "rgba(" + (255.0 | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
			_gthis.g.c2d.strokeRect(0,0,s.element.boundary.w,s.element.boundary.h);
			_this.c2d.restore();
		}
		_this.c2d.restore();
	}
}
$hxClasses["app.ui.Stage"] = app_ui_Stage;
app_ui_Stage.__name__ = "app.ui.Stage";
Object.assign(app_ui_Stage.prototype, {
	__class__: app_ui_Stage
});
class app_ui_core_Border {
	constructor(left,top,right,bottom) {
		this.left = left;
		this.top = top;
		this.right = right;
		this.bottom = bottom;
	}
	set(left,top,right,bottom) {
		this.left = left;
		this.top = top;
		this.right = right;
		this.bottom = bottom;
	}
	setAlong(axis,start,end) {
		if(axis) {
			this.top = start;
			this.bottom = end;
		} else {
			this.left = start;
			this.right = end;
		}
	}
	all(S) {
		this.left = S;
		this.top = S;
		this.right = S;
		this.bottom = S;
	}
	start(axis) {
		if(axis) {
			return this.top;
		} else {
			return this.left;
		}
	}
	end(axis) {
		if(axis) {
			return this.bottom;
		} else {
			return this.right;
		}
	}
}
$hxClasses["app.ui.core.Border"] = app_ui_core_Border;
app_ui_core_Border.__name__ = "app.ui.core.Border";
Object.assign(app_ui_core_Border.prototype, {
	__class__: app_ui_core_Border
});
var app_ui_core_BoxSizing = $hxEnums["app.ui.core.BoxSizing"] = { __ename__ : "app.ui.core.BoxSizing", __constructs__ : ["Content","Boundary"]
	,Content: {_hx_index:0,__enum__:"app.ui.core.BoxSizing",toString:$estr}
	,Boundary: {_hx_index:1,__enum__:"app.ui.core.BoxSizing",toString:$estr}
};
class app_ui_core_Dimension {
	constructor(w,h) {
		this.w = w;
		this.h = h;
	}
	set(w,h) {
		this.w = w;
		this.h = h;
	}
	along(axis) {
		if(axis) {
			return this.h;
		} else {
			return this.w;
		}
	}
}
$hxClasses["app.ui.core.Dimension"] = app_ui_core_Dimension;
app_ui_core_Dimension.__name__ = "app.ui.core.Dimension";
Object.assign(app_ui_core_Dimension.prototype, {
	__class__: app_ui_core_Dimension
});
class app_ui_core_Element {
	constructor() {
		this.id = ++app_ui_core_Element.idCount;
		this.style = new app_ui_core_Style();
		this.boundary = new app_ui_core_Rect(0,0,0,0);
		this.children = [];
		this.parent = null;
		this.set_layout(new app_ui_core_layout_FlexLayout(false));
	}
	set_layout(layout) {
		this.layout = layout;
		layout.setTarget(this);
		return layout;
	}
	get_path() {
		let dirs = [];
		let s = this;
		while(s.parent != null) {
			dirs.push(s.childIndex);
			s = s.parent;
		}
		dirs.reverse();
		return dirs.join("");
	}
	addChild(child) {
		if(child.parent != null) {
			throw haxe_Exception.thrown("added twice");
		}
		this.children.push(child);
		child.parent = this;
		let code = 32 + this.children.length - 1;
		child.childIndex = String.fromCodePoint(code);
	}
	removeChild(child) {
		if(child.parent != this) {
			throw haxe_Exception.thrown("cannot remove");
		}
		HxOverrides.remove(this.children,child);
		child.parent = null;
		child.childIndex = null;
		let _g = 0;
		let _g1 = this.children.length;
		while(_g < _g1) {
			let i = _g++;
			this.children[i].childIndex = String.fromCodePoint((32 + i));
		}
	}
	getBoundarySize(axis,parentSize,includeMargin) {
		let _this = this.style.size;
		let len = axis ? _this.h : _this.w;
		let size;
		if(len == app_ui_core_LengthOrAuto.Auto) {
			let size1 = this.layout.getContentSize(axis);
			let _this = this.style.padding;
			size = size1 + (axis ? app_ui_core_LengthTools.calc(_this.top,parentSize) + app_ui_core_LengthTools.calc(_this.bottom,parentSize) : app_ui_core_LengthTools.calc(_this.left,parentSize) + app_ui_core_LengthTools.calc(_this.right,parentSize));
		} else {
			let res = app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(len,app_ui_core_Length.Zero),parentSize);
			switch(this.style.boxSizing._hx_index) {
			case 0:
				let _this = this.style.padding;
				size = res + (axis ? app_ui_core_LengthTools.calc(_this.top,parentSize) + app_ui_core_LengthTools.calc(_this.bottom,parentSize) : app_ui_core_LengthTools.calc(_this.left,parentSize) + app_ui_core_LengthTools.calc(_this.right,parentSize));
				break;
			case 1:
				size = res;
				break;
			}
		}
		if(includeMargin) {
			let _this = this.style.margin;
			size += axis ? app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(_this.top,app_ui_core_Length.Zero),parentSize) + app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(_this.bottom,app_ui_core_Length.Zero),parentSize) : app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(_this.left,app_ui_core_Length.Zero),parentSize) + app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(_this.right,app_ui_core_Length.Zero),parentSize);
		}
		return size;
	}
	getMinBoundarySize(axis,parentSize,includeMargin) {
		let _this = this.style.minSize;
		let len = axis ? _this.h : _this.w;
		let size;
		if(len == app_ui_core_LengthOrAuto.Auto) {
			let size1 = this.layout.getMinContentSize(axis);
			let _this = this.style.padding;
			size = size1 + (axis ? app_ui_core_LengthTools.calc(_this.top,parentSize) + app_ui_core_LengthTools.calc(_this.bottom,parentSize) : app_ui_core_LengthTools.calc(_this.left,parentSize) + app_ui_core_LengthTools.calc(_this.right,parentSize));
		} else {
			let res = app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(len,app_ui_core_Length.Zero),parentSize);
			switch(this.style.boxSizing._hx_index) {
			case 0:
				let _this = this.style.padding;
				size = res + (axis ? app_ui_core_LengthTools.calc(_this.top,parentSize) + app_ui_core_LengthTools.calc(_this.bottom,parentSize) : app_ui_core_LengthTools.calc(_this.left,parentSize) + app_ui_core_LengthTools.calc(_this.right,parentSize));
				break;
			case 1:
				size = res;
				break;
			}
		}
		if(includeMargin) {
			let _this = this.style.margin;
			size += axis ? app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(_this.top,app_ui_core_Length.Zero),parentSize) + app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(_this.bottom,app_ui_core_Length.Zero),parentSize) : app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(_this.left,app_ui_core_Length.Zero),parentSize) + app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(_this.right,app_ui_core_Length.Zero),parentSize);
		}
		return size;
	}
	getMaxBoundarySize(axis,parentSize,includeMargin) {
		let _this = this.style.maxSize;
		let len = axis ? _this.h : _this.w;
		let size;
		if(len == app_ui_core_LengthOrAuto.Auto) {
			let size1 = this.layout.getMaxContentSize(axis);
			let _this = this.style.padding;
			size = size1 + (axis ? app_ui_core_LengthTools.calc(_this.top,parentSize) + app_ui_core_LengthTools.calc(_this.bottom,parentSize) : app_ui_core_LengthTools.calc(_this.left,parentSize) + app_ui_core_LengthTools.calc(_this.right,parentSize));
		} else {
			let res = app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(len,app_ui_core_Length.Zero),parentSize);
			switch(this.style.boxSizing._hx_index) {
			case 0:
				let _this = this.style.padding;
				size = res + (axis ? app_ui_core_LengthTools.calc(_this.top,parentSize) + app_ui_core_LengthTools.calc(_this.bottom,parentSize) : app_ui_core_LengthTools.calc(_this.left,parentSize) + app_ui_core_LengthTools.calc(_this.right,parentSize));
				break;
			case 1:
				size = res;
				break;
			}
		}
		if(includeMargin) {
			let _this = this.style.margin;
			size += axis ? app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(_this.top,app_ui_core_Length.Zero),parentSize) + app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(_this.bottom,app_ui_core_Length.Zero),parentSize) : app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(_this.left,app_ui_core_Length.Zero),parentSize) + app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(_this.right,app_ui_core_Length.Zero),parentSize);
		}
		return size;
	}
	contentStart(axis) {
		let _this = this.boundary;
		let _this1 = this.style.padding;
		let _this2 = this.boundary;
		return (axis ? _this.y : _this.x) + app_ui_core_LengthTools.calc(axis ? _this1.top : _this1.left,axis ? _this2.h : _this2.w);
	}
	contentEnd(axis) {
		let _this = this.boundary;
		let _this1 = this.style.padding;
		let _this2 = this.boundary;
		return (axis ? _this.y + _this.h : _this.x + _this.w) - app_ui_core_LengthTools.calc(axis ? _this1.bottom : _this1.right,axis ? _this2.h : _this2.w);
	}
	contentSize(axis) {
		let _this = this.boundary;
		let _this1 = this.style.padding;
		let _this2 = this.boundary;
		let parentSize = axis ? _this2.h : _this2.w;
		return (axis ? _this.h : _this.w) - (axis ? app_ui_core_LengthTools.calc(_this1.top,parentSize) + app_ui_core_LengthTools.calc(_this1.bottom,parentSize) : app_ui_core_LengthTools.calc(_this1.left,parentSize) + app_ui_core_LengthTools.calc(_this1.right,parentSize));
	}
}
$hxClasses["app.ui.core.Element"] = app_ui_core_Element;
app_ui_core_Element.__name__ = "app.ui.core.Element";
Object.assign(app_ui_core_Element.prototype, {
	__class__: app_ui_core_Element
});
var app_ui_core_HitArea = $hxEnums["app.ui.core.HitArea"] = { __ename__ : "app.ui.core.HitArea", __constructs__ : ["Transparent","Box","Custom"]
	,Transparent: {_hx_index:0,__enum__:"app.ui.core.HitArea",toString:$estr}
	,Box: {_hx_index:1,__enum__:"app.ui.core.HitArea",toString:$estr}
	,Custom: ($_=function(hitTest) { return {_hx_index:2,hitTest:hitTest,__enum__:"app.ui.core.HitArea",toString:$estr}; },$_.__params__ = ["hitTest"],$_)
};
class app_ui_core_HitAreaTools {
	static test(area,w,h,x,y) {
		switch(area._hx_index) {
		case 0:
			return false;
		case 1:
			if(x >= 0 && y >= 0 && x < w) {
				return y < h;
			} else {
				return false;
			}
			break;
		case 2:
			return area.hitTest(w,h,x,y);
		}
	}
}
$hxClasses["app.ui.core.HitAreaTools"] = app_ui_core_HitAreaTools;
app_ui_core_HitAreaTools.__name__ = "app.ui.core.HitAreaTools";
var app_ui_core_Length = $hxEnums["app.ui.core.Length"] = { __ename__ : "app.ui.core.Length", __constructs__ : ["Px","Percent","Add","Sub","Zero"]
	,Px: ($_=function(p) { return {_hx_index:0,p:p,__enum__:"app.ui.core.Length",toString:$estr}; },$_.__params__ = ["p"],$_)
	,Percent: ($_=function(p) { return {_hx_index:1,p:p,__enum__:"app.ui.core.Length",toString:$estr}; },$_.__params__ = ["p"],$_)
	,Add: ($_=function(a,b) { return {_hx_index:2,a:a,b:b,__enum__:"app.ui.core.Length",toString:$estr}; },$_.__params__ = ["a","b"],$_)
	,Sub: ($_=function(a,b) { return {_hx_index:3,a:a,b:b,__enum__:"app.ui.core.Length",toString:$estr}; },$_.__params__ = ["a","b"],$_)
	,Zero: {_hx_index:4,__enum__:"app.ui.core.Length",toString:$estr}
};
class app_ui_core_LengthTools {
	static calc(l,base) {
		switch(l._hx_index) {
		case 0:
			return l.p;
		case 1:
			if(base != null) {
				return l.p / 100 * base;
			} else {
				return 0;
			}
			break;
		case 2:
			return app_ui_core_LengthTools.calc(l.a,base) + app_ui_core_LengthTools.calc(l.b,base);
		case 3:
			return app_ui_core_LengthTools.calc(l.a,base) - app_ui_core_LengthTools.calc(l.b,base);
		case 4:
			return 0;
		}
	}
}
$hxClasses["app.ui.core.LengthTools"] = app_ui_core_LengthTools;
app_ui_core_LengthTools.__name__ = "app.ui.core.LengthTools";
var app_ui_core_LengthOrAuto = $hxEnums["app.ui.core.LengthOrAuto"] = { __ename__ : "app.ui.core.LengthOrAuto", __constructs__ : ["Px","Percent","Add","Sub","Zero","Auto"]
	,Px: ($_=function(p) { return {_hx_index:0,p:p,__enum__:"app.ui.core.LengthOrAuto",toString:$estr}; },$_.__params__ = ["p"],$_)
	,Percent: ($_=function(p) { return {_hx_index:1,p:p,__enum__:"app.ui.core.LengthOrAuto",toString:$estr}; },$_.__params__ = ["p"],$_)
	,Add: ($_=function(a,b) { return {_hx_index:2,a:a,b:b,__enum__:"app.ui.core.LengthOrAuto",toString:$estr}; },$_.__params__ = ["a","b"],$_)
	,Sub: ($_=function(a,b) { return {_hx_index:3,a:a,b:b,__enum__:"app.ui.core.LengthOrAuto",toString:$estr}; },$_.__params__ = ["a","b"],$_)
	,Zero: {_hx_index:4,__enum__:"app.ui.core.LengthOrAuto",toString:$estr}
	,Auto: {_hx_index:5,__enum__:"app.ui.core.LengthOrAuto",toString:$estr}
};
class app_ui_core_LengthOrAutoTools {
	static toLength(l,whenAuto) {
		switch(l._hx_index) {
		case 0:
			return app_ui_core_Length.Px(l.p);
		case 1:
			return app_ui_core_Length.Percent(l.p);
		case 2:
			return app_ui_core_Length.Add(l.a,l.b);
		case 3:
			return app_ui_core_Length.Sub(l.a,l.b);
		case 4:
			return app_ui_core_Length.Zero;
		case 5:
			return whenAuto;
		}
	}
}
$hxClasses["app.ui.core.LengthOrAutoTools"] = app_ui_core_LengthOrAutoTools;
app_ui_core_LengthOrAutoTools.__name__ = "app.ui.core.LengthOrAutoTools";
class app_ui_core_Margin extends app_ui_core_Border {
	constructor(left,top,right,bottom) {
		super(left,top,right,bottom);
	}
	calcAssigningZeroToAutoAlong(axis,parentSize) {
		if(axis) {
			return app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(this.top,app_ui_core_Length.Zero),parentSize) + app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(this.bottom,app_ui_core_Length.Zero),parentSize);
		} else {
			return app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(this.left,app_ui_core_Length.Zero),parentSize) + app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(this.right,app_ui_core_Length.Zero),parentSize);
		}
	}
}
$hxClasses["app.ui.core.Margin"] = app_ui_core_Margin;
app_ui_core_Margin.__name__ = "app.ui.core.Margin";
app_ui_core_Margin.__super__ = app_ui_core_Border;
Object.assign(app_ui_core_Margin.prototype, {
	__class__: app_ui_core_Margin
});
class app_ui_core_Padding extends app_ui_core_Border {
	constructor(left,top,right,bottom) {
		super(left,top,right,bottom);
	}
	calcAlong(axis,parentSize) {
		if(axis) {
			return app_ui_core_LengthTools.calc(this.top,parentSize) + app_ui_core_LengthTools.calc(this.bottom,parentSize);
		} else {
			return app_ui_core_LengthTools.calc(this.left,parentSize) + app_ui_core_LengthTools.calc(this.right,parentSize);
		}
	}
}
$hxClasses["app.ui.core.Padding"] = app_ui_core_Padding;
app_ui_core_Padding.__name__ = "app.ui.core.Padding";
app_ui_core_Padding.__super__ = app_ui_core_Border;
Object.assign(app_ui_core_Padding.prototype, {
	__class__: app_ui_core_Padding
});
class app_ui_core_Rect {
	constructor(x,y,w,h) {
		this.x = x;
		this.y = y;
		this.w = w;
		this.h = h;
	}
	set(x,y,w,h) {
		this.x = x;
		this.y = y;
		this.w = w;
		this.h = h;
	}
	start(axis) {
		if(axis) {
			return this.y;
		} else {
			return this.x;
		}
	}
	end(axis) {
		if(axis) {
			return this.y + this.h;
		} else {
			return this.x + this.w;
		}
	}
	size(axis) {
		if(axis) {
			return this.h;
		} else {
			return this.w;
		}
	}
	setAlong(axis,start,size) {
		if(axis) {
			this.y = start;
			this.h = size;
		} else {
			this.x = start;
			this.w = size;
		}
	}
	getX() {
		return this.x;
	}
	getY() {
		return this.y;
	}
	getW() {
		return this.w;
	}
	getH() {
		return this.h;
	}
	hitTest(x,y) {
		if(x >= this.x && y >= this.y && x < this.x + this.w) {
			return y < this.y + this.h;
		} else {
			return false;
		}
	}
}
$hxClasses["app.ui.core.Rect"] = app_ui_core_Rect;
app_ui_core_Rect.__name__ = "app.ui.core.Rect";
app_ui_core_Rect.__interfaces__ = [app_ui_SizePeek,app_ui_AnchorPeek];
Object.assign(app_ui_core_Rect.prototype, {
	__class__: app_ui_core_Rect
});
class app_ui_core_Style {
	constructor() {
		this.alignInline = null;
		this.shrink = 1;
		this.grow = 0;
		this.boxSizing = app_ui_core_BoxSizing.Content;
		this.padding = new app_ui_core_Padding(app_ui_core_Length.Zero,app_ui_core_Length.Zero,app_ui_core_Length.Zero,app_ui_core_Length.Zero);
		this.margin = new app_ui_core_Margin(app_ui_core_LengthOrAuto.Zero,app_ui_core_LengthOrAuto.Zero,app_ui_core_LengthOrAuto.Zero,app_ui_core_LengthOrAuto.Zero);
		this.maxSize = new app_ui_core_Dimension(app_ui_core_LengthOrAuto.Auto,app_ui_core_LengthOrAuto.Auto);
		this.minSize = new app_ui_core_Dimension(app_ui_core_LengthOrAuto.Auto,app_ui_core_LengthOrAuto.Auto);
		this.size = new app_ui_core_Dimension(app_ui_core_LengthOrAuto.Auto,app_ui_core_LengthOrAuto.Auto);
		this.noHit = false;
		this.hitArea = app_ui_core_HitArea.Box;
	}
}
$hxClasses["app.ui.core.Style"] = app_ui_core_Style;
app_ui_core_Style.__name__ = "app.ui.core.Style";
Object.assign(app_ui_core_Style.prototype, {
	__class__: app_ui_core_Style
});
class app_ui_core_UI {
	constructor() {
		this.root = new app_ui_core_Element();
		this.width = 100;
		this.height = 100;
	}
	layout() {
		let margin = this.root.style.margin;
		let ml = app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(margin.left,app_ui_core_Length.Zero),this.width);
		let mr = app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(margin.right,app_ui_core_Length.Zero),this.width);
		let mt = app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(margin.top,app_ui_core_Length.Zero),this.height);
		let mb = app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(margin.bottom,app_ui_core_Length.Zero),this.height);
		let _this = this.root.boundary;
		_this.x = ml;
		_this.y = mt;
		_this.w = this.width - (ml + mr);
		_this.h = this.height - (mt - mb);
		this.root.layout.layout();
	}
	hitTest(x,y) {
		let res = [];
		this.hitTestRecursive(this.root,x,y,res);
		return res;
	}
	hitTestRecursive(e,x,y,res) {
		if(e.style.noHit) {
			return;
		}
		let n = e.children.length;
		let _g = 0;
		while(_g < n) this.hitTestRecursive(e.children[n - 1 - _g++],x,y,res);
		let boundary = e.boundary;
		let area = e.style.hitArea;
		let w = boundary.w;
		let h = boundary.h;
		let x1 = x - boundary.x;
		let y1 = y - boundary.y;
		let tmp;
		switch(area._hx_index) {
		case 0:
			tmp = false;
			break;
		case 1:
			tmp = x1 >= 0 && y1 >= 0 && x1 < w && y1 < h;
			break;
		case 2:
			tmp = area.hitTest(w,h,x1,y1);
			break;
		}
		if(tmp) {
			res.push(e);
		}
	}
}
$hxClasses["app.ui.core.UI"] = app_ui_core_UI;
app_ui_core_UI.__name__ = "app.ui.core.UI";
Object.assign(app_ui_core_UI.prototype, {
	__class__: app_ui_core_UI
});
class app_ui_core_layout_Axis {
	static _new(value) {
		return value;
	}
	static cross(this1) {
		return !this1;
	}
}
class app_ui_core_layout_Layout {
	constructor() {
		if(app_ui_core_layout_Layout._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this.target = null;
		this.children = null;
		this.boundary = null;
	}
	setTarget(target) {
		if(this.target != null) {
			throw haxe_Exception.thrown("target set twice");
		}
		this.target = target;
		this.children = target.children;
		this.boundary = target.boundary;
	}
	getContentSize(axis) {
		throw haxe_Exception.thrown("implement this");
	}
	getMinContentSize(axis) {
		throw haxe_Exception.thrown("implement this");
	}
	getMaxContentSize(axis) {
		throw haxe_Exception.thrown("implement this");
	}
	run() {
		throw haxe_Exception.thrown("implement this");
	}
	layout() {
		this.run();
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) _g1[_g++].layout.layout();
	}
}
$hxClasses["app.ui.core.layout.Layout"] = app_ui_core_layout_Layout;
app_ui_core_layout_Layout.__name__ = "app.ui.core.layout.Layout";
Object.assign(app_ui_core_layout_Layout.prototype, {
	__class__: app_ui_core_layout_Layout
});
class app_ui_core_layout_FlexLayout extends app_ui_core_layout_Layout {
	constructor(axis) {
		app_ui_core_layout_Layout._hx_skip_constructor = true;
		super();
		app_ui_core_layout_Layout._hx_skip_constructor = false;
		this._hx_constructor(axis);
	}
	_hx_constructor(axis) {
		this.lineWrap = 0;
		this.alignInline = 0;
		this.alignCross = 0;
		this.alignMain = 0;
		super._hx_constructor();
		this.axis = axis;
	}
	getContentSize(axis) {
		if(axis == this.axis) {
			let array = this.children;
			let f = function(c) {
				return c.getBoundarySize(axis,0,true);
			};
			let res = null;
			let _g = 0;
			while(_g < array.length) {
				let e = array[_g];
				++_g;
				if(res == null) {
					res = f(e);
				} else {
					res += f(e);
				}
			}
			return res;
		} else {
			let array = this.children;
			let f = function(c) {
				return c.getBoundarySize(axis,0,true);
			};
			let res = null;
			let _g = 0;
			while(_g < array.length) {
				let e = array[_g];
				++_g;
				if(res == null) {
					res = f(e);
				} else {
					let b = f(e);
					if(!(res > b)) {
						res = b;
					}
				}
			}
			return res;
		}
	}
	getMinContentSize(axis) {
		if(axis == this.axis) {
			if(this.lineWrap == 0) {
				let array = this.children;
				let f = function(c) {
					return c.getMinBoundarySize(axis,0,true);
				};
				let res = null;
				let _g = 0;
				while(_g < array.length) {
					let e = array[_g];
					++_g;
					if(res == null) {
						res = f(e);
					} else {
						res += f(e);
					}
				}
				return res;
			} else {
				let array = this.children;
				let f = function(c) {
					return c.getMinBoundarySize(axis,0,true);
				};
				let res = null;
				let _g = 0;
				while(_g < array.length) {
					let e = array[_g];
					++_g;
					if(res == null) {
						res = f(e);
					} else {
						let b = f(e);
						if(!(res > b)) {
							res = b;
						}
					}
				}
				return res;
			}
		} else {
			return 0;
		}
	}
	getMaxContentSize(axis) {
		return Infinity;
	}
	determineLines() {
		let _gthis = this;
		if(this.lineWrap == 0) {
			return [this.children.slice()];
		}
		let parentContentSize = this.target.contentSize(this.axis);
		let _this = this.children;
		let result = new Array(_this.length);
		let _g = 0;
		let _g1 = _this.length;
		while(_g < _g1) {
			let i = _g++;
			result[i] = _this[i].getBoundarySize(_gthis.axis,parentContentSize,true);
		}
		let lines = [];
		let n = this.children.length;
		let index = 0;
		while(index < n) {
			let line = [];
			let leftSize = parentContentSize;
			while(true) {
				if(line.length == 0 || result[index] <= leftSize) {
					line.push(this.children[index]);
					leftSize -= result[index];
					++index;
				} else {
					break;
				}
				if(!(index < n)) {
					break;
				}
			}
			lines.push(line);
		}
		if(this.lineWrap == 2) {
			lines.reverse();
		}
		return lines;
	}
	run() {
		if(this.children.length == 0) {
			return;
		}
		let lines = this.determineLines();
		let cross = !this.axis;
		let innerStartMain = this.target.contentStart(this.axis);
		let innerSizeMain = this.target.contentSize(this.axis);
		let innerStartCross = this.target.contentStart(cross);
		let innerSizeCross = this.target.contentSize(cross);
		let _g = 0;
		while(_g < lines.length) app_ui_core_layout_FlexLayout.processMainAxis(this.axis,lines[_g++],innerStartMain,innerSizeMain,this.alignMain);
		app_ui_core_layout_FlexLayout.processCrossAxis(cross,lines,innerStartCross,innerSizeCross,this.alignCross,this.alignInline);
	}
	static justify(n,contentSizes,minSizes,maxSizes,grows,shrinks,autoMarginFlags,align,parentStart,parentSize,outStarts,outSizes) {
		let _g = [];
		let _g1 = 0;
		while(_g1 < n) {
			let i = _g1++;
			let a = contentSizes[i];
			let min = minSizes[i];
			let max = maxSizes[i];
			_g.push(a < min ? min : a > max ? max : a);
		}
		let _g2 = [];
		let _g3 = 0;
		while(_g3 < n) {
			let i = _g3++;
			_g2.push(grows[i] == 0 && shrinks[i] == 0);
		}
		let numAutoMargins = 0;
		let _g4 = 0;
		while(_g4 < autoMarginFlags.length) {
			let a = autoMarginFlags[_g4];
			++_g4;
			if(a[0]) {
				++numAutoMargins;
			}
			if(a[1]) {
				++numAutoMargins;
			}
		}
		if(numAutoMargins > 0) {
			let result = new Array(grows.length);
			let _g = 0;
			let _g1 = grows.length;
			while(_g < _g1) result[_g++] = 0.0;
			grows = result;
		}
		let freeSpace;
		while(true) {
			let res = parentSize;
			let _g1 = 0;
			while(_g1 < _g.length) res -= _g[_g1++];
			freeSpace = res;
			let value = freeSpace;
			let tmp;
			if(value == 0) {
				tmp = true;
			} else {
				let denoms = value > 0 ? grows : shrinks;
				let denom = 0.0;
				let _g1 = 0;
				while(_g1 < n) {
					let i = _g1++;
					if(!_g2[i] && denoms[i] > 0) {
						denom += denoms[i];
					}
				}
				if(denom == 0) {
					tmp = true;
				} else {
					value /= denom;
					let finished = true;
					let _g1 = 0;
					while(_g1 < n) {
						let i = _g1++;
						if(!_g2[i] && denoms[i] > 0) {
							let size = _g[i] += value * denoms[i];
							let min = minSizes[i];
							let max = maxSizes[i];
							if(size < min || size > max) {
								finished = false;
								_g[i] = size < min ? min : max;
								_g2[i] = true;
							}
						}
					}
					tmp = finished;
				}
			}
			if(tmp) {
				break;
			}
		}
		let res = parentSize;
		let _g5 = 0;
		while(_g5 < _g.length) res -= _g[_g5++];
		freeSpace = res;
		if(freeSpace < 0) {
			freeSpace = 0;
		}
		let spaces;
		if(numAutoMargins > 0) {
			let _g = [];
			let _g1 = 0;
			let _g2 = n + 1;
			while(_g1 < _g2) {
				let i = _g1++;
				let count = 0;
				if(i > 0 && autoMarginFlags[i - 1][1]) {
					count = 1;
				}
				if(i < n && autoMarginFlags[i][0]) {
					++count;
				}
				_g.push(freeSpace * count / numAutoMargins);
			}
			spaces = _g;
		} else {
			switch(align) {
			case 0:
				let _g6 = [];
				let _g7 = 0;
				let _g8 = n + 1;
				while(_g7 < _g8) _g6.push(_g7++ == n ? freeSpace : 0);
				spaces = _g6;
				break;
			case 1:
				let _g9 = [];
				let _g10 = 0;
				let _g11 = n + 1;
				while(_g10 < _g11) {
					let i = _g10++;
					_g9.push(i == 0 || i == n ? freeSpace / 2 : 0);
				}
				spaces = _g9;
				break;
			case 2:
				let _g12 = [];
				let _g13 = 0;
				let _g14 = n + 1;
				while(_g13 < _g14) _g12.push(_g13++ == 0 ? freeSpace : 0);
				spaces = _g12;
				break;
			case 3:
				let _g15 = [];
				let _g16 = 0;
				let _g17 = n + 1;
				while(_g16 < _g17) {
					let i = _g16++;
					_g15.push(i == 0 || i == n ? 0 : freeSpace / (n - 1));
				}
				spaces = _g15;
				break;
			case 4:
				let _g18 = [];
				let _g19 = 0;
				let _g20 = n + 1;
				while(_g19 < _g20) {
					let i = _g19++;
					_g18.push((i == 0 || i == n ? 0.5 : 1) * freeSpace / n);
				}
				spaces = _g18;
				break;
			case 5:
				let _g21 = [];
				let _g22 = 0;
				let _g23 = n + 1;
				while(_g22 < _g23) {
					++_g22;
					_g21.push(freeSpace / (n + 1));
				}
				spaces = _g21;
				break;
			}
		}
		let pos = parentStart + spaces[0];
		outStarts.length = 0;
		outSizes.length = 0;
		let _g24 = 0;
		while(_g24 < n) {
			let i = _g24++;
			outStarts.push(pos);
			outSizes.push(_g[i]);
			pos += _g[i] + spaces[i + 1];
		}
	}
	static processMainAxis(axis,line,parentStart,parentSize,align) {
		let n = line.length;
		let result = new Array(line.length);
		let _g = 0;
		let _g1 = line.length;
		while(_g < _g1) {
			let i = _g++;
			result[i] = line[i].style;
		}
		let result1 = new Array(line.length);
		let _g2 = 0;
		let _g3 = line.length;
		while(_g2 < _g3) {
			let i = _g2++;
			result1[i] = line[i].getBoundarySize(axis,parentSize,true);
		}
		let result2 = new Array(line.length);
		let _g4 = 0;
		let _g5 = line.length;
		while(_g4 < _g5) {
			let i = _g4++;
			result2[i] = line[i].getMinBoundarySize(axis,parentSize,true);
		}
		let result3 = new Array(line.length);
		let _g6 = 0;
		let _g7 = line.length;
		while(_g6 < _g7) {
			let i = _g6++;
			result3[i] = line[i].getMaxBoundarySize(axis,parentSize,true);
		}
		let result4 = new Array(result.length);
		let _g8 = 0;
		let _g9 = result.length;
		while(_g8 < _g9) {
			let i = _g8++;
			result4[i] = result[i].grow;
		}
		let result5 = new Array(result.length);
		let _g10 = 0;
		let _g11 = result.length;
		while(_g10 < _g11) {
			let i = _g10++;
			result5[i] = result[i].shrink;
		}
		let result6 = new Array(result.length);
		let _g12 = 0;
		let _g13 = result.length;
		while(_g12 < _g13) {
			let i = _g12++;
			let s = result[i];
			let _this = s.margin;
			let _this1 = s.margin;
			result6[i] = [(axis ? _this.top : _this.left) == app_ui_core_LengthOrAuto.Auto,(axis ? _this1.bottom : _this1.right) == app_ui_core_LengthOrAuto.Auto];
		}
		let starts = [];
		let sizes = [];
		app_ui_core_layout_FlexLayout.justify(n,result1,result2,result3,result4,result5,result6,align,parentStart,parentSize,starts,sizes);
		let _g14 = 0;
		while(_g14 < n) {
			let i = _g14++;
			let c = line[i];
			let margin = result[i].margin;
			let marginStart = app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(axis ? margin.top : margin.left,app_ui_core_Length.Zero),parentSize);
			let marginEnd = app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(axis ? margin.bottom : margin.right,app_ui_core_Length.Zero),parentSize);
			let start = starts[i] + marginStart;
			let size = sizes[i] - (marginStart + marginEnd);
			let _this = c.boundary;
			if(axis) {
				_this.y = start;
				_this.h = size;
			} else {
				_this.x = start;
				_this.w = size;
			}
		}
	}
	static processCrossAxis(axis,lines,parentStart,parentSize,alignCross,alignInline) {
		let n = lines.length;
		let result = new Array(lines.length);
		let _g = 0;
		let _g1 = lines.length;
		while(_g < _g1) {
			let i = _g++;
			let array = lines[i];
			let f = function(c) {
				return c.getBoundarySize(axis,parentSize,true);
			};
			let res = null;
			let _g1 = 0;
			while(_g1 < array.length) {
				let e = array[_g1];
				++_g1;
				if(res == null) {
					res = f(e);
				} else {
					let b = f(e);
					if(!(res > b)) {
						res = b;
					}
				}
			}
			let this1 = res;
			result[i] = this1 != null ? this1 : 0;
		}
		let result1 = new Array(lines.length);
		let _g2 = 0;
		let _g3 = lines.length;
		while(_g2 < _g3) {
			let i = _g2++;
			let array = lines[i];
			let f = function(c) {
				return c.getMinBoundarySize(axis,parentSize,true);
			};
			let res = null;
			let _g = 0;
			while(_g < array.length) {
				let e = array[_g];
				++_g;
				if(res == null) {
					res = f(e);
				} else {
					let b = f(e);
					if(!(res > b)) {
						res = b;
					}
				}
			}
			let this1 = res;
			result1[i] = this1 != null ? this1 : 0;
		}
		let result2 = new Array(lines.length);
		let _g4 = 0;
		let _g5 = lines.length;
		while(_g4 < _g5) {
			let i = _g4++;
			let array = lines[i];
			let f = function(c) {
				return c.getMaxBoundarySize(axis,parentSize,true);
			};
			let res = null;
			let _g = 0;
			while(_g < array.length) {
				let e = array[_g];
				++_g;
				if(res == null) {
					res = f(e);
				} else {
					let b = f(e);
					if(!(res > b)) {
						res = b;
					}
				}
			}
			let this1 = res;
			result2[i] = this1 != null ? this1 : 0;
		}
		let align;
		switch(alignCross) {
		case 0:case 1:
			align = 0;
			break;
		case 2:
			align = 1;
			break;
		case 3:
			align = 2;
			break;
		case 4:
			align = 3;
			break;
		case 5:
			align = 4;
			break;
		case 6:
			align = 5;
			break;
		}
		let _g6 = [];
		let _g7 = 0;
		while(_g7 < n) {
			++_g7;
			_g6.push(alignCross == 0 ? 1.0 : 0.0);
		}
		let _g8 = [];
		let _g9 = 0;
		while(_g9 < n) {
			++_g9;
			_g8.push(1.0);
		}
		let _g10 = [];
		let _g11 = 0;
		while(_g11 < n) {
			++_g11;
			_g10.push([false,false]);
		}
		let starts = [];
		let sizes = [];
		app_ui_core_layout_FlexLayout.justify(n,result,result1,result2,_g6,_g8,_g10,align,parentStart,parentSize,starts,sizes);
		let _g12 = 0;
		while(_g12 < n) {
			let i = _g12++;
			app_ui_core_layout_FlexLayout.processInLine(axis,lines[i],starts[i],sizes[i],parentSize,alignInline);
		}
	}
	static processInLine(axis,line,lineStart,lineSize,parentSize,defaultAlign) {
		let n = line.length;
		let _g = 0;
		while(_g < n) {
			let c = line[_g++];
			let margin = c.style.margin;
			let margins = [axis ? margin.top : margin.left,axis ? margin.bottom : margin.right];
			let autoMarginType = (margins[0] == app_ui_core_LengthOrAuto.Auto ? 1 : 0) | (margins[1] == app_ui_core_LengthOrAuto.Auto ? 2 : 0);
			let result = new Array(margins.length);
			let _g1 = 0;
			let _g2 = margins.length;
			while(_g1 < _g2) {
				let i = _g1++;
				result[i] = app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(margins[i],app_ui_core_Length.Zero),parentSize);
			}
			let marginSum = result[0] + result[1];
			let _this = c.style.size;
			let sizeSpecified = (axis ? _this.h : _this.w) != app_ui_core_LengthOrAuto.Auto;
			let this1 = c.style.alignInline;
			let align = this1 != null ? this1 : defaultAlign;
			switch(autoMarginType) {
			case 1:
				align = 3;
				break;
			case 2:
				align = 1;
				break;
			case 3:
				align = 2;
				break;
			}
			let contentSize = c.getBoundarySize(axis,parentSize,false);
			let minSize = c.getMinBoundarySize(axis,parentSize,false);
			let maxSize = c.getMaxBoundarySize(axis,parentSize,false);
			let size;
			if(sizeSpecified) {
				size = contentSize;
			} else if(align == 0 && autoMarginType == 0) {
				size = lineSize - marginSum;
			} else {
				let a = lineSize - marginSum;
				size = a < contentSize ? a : contentSize;
			}
			if(size < minSize) {
				size = minSize;
			} else if(size > maxSize) {
				size = maxSize;
			}
			let freeSpace = lineSize - (size + marginSum);
			let startSpace;
			switch(align) {
			case 0:case 1:
				startSpace = 0;
				break;
			case 2:
				startSpace = freeSpace / 2;
				break;
			case 3:
				startSpace = freeSpace;
				break;
			}
			let _this1 = c.boundary;
			let start = lineStart + result[0] + startSpace;
			if(axis) {
				_this1.y = start;
				_this1.h = size;
			} else {
				_this1.x = start;
				_this1.w = size;
			}
		}
	}
}
$hxClasses["app.ui.core.layout.FlexLayout"] = app_ui_core_layout_FlexLayout;
app_ui_core_layout_FlexLayout.__name__ = "app.ui.core.layout.FlexLayout";
app_ui_core_layout_FlexLayout.__super__ = app_ui_core_layout_Layout;
Object.assign(app_ui_core_layout_FlexLayout.prototype, {
	__class__: app_ui_core_layout_FlexLayout
});
class app_ui_core_layout_OverlayLayout extends app_ui_core_layout_Layout {
	constructor() {
		super();
	}
	getContentSize(axis) {
		let array = this.children;
		let f = function(c) {
			return c.getBoundarySize(axis,0,true);
		};
		let res = null;
		let _g = 0;
		while(_g < array.length) {
			let e = array[_g];
			++_g;
			if(res == null) {
				res = f(e);
			} else {
				let b = f(e);
				if(!(res > b)) {
					res = b;
				}
			}
		}
		let this1 = res;
		if(this1 != null) {
			return this1;
		} else {
			return 0;
		}
	}
	getMinContentSize(axis) {
		let array = this.children;
		let f = function(c) {
			return c.getMinBoundarySize(axis,0,true);
		};
		let res = null;
		let _g = 0;
		while(_g < array.length) {
			let e = array[_g];
			++_g;
			if(res == null) {
				res = f(e);
			} else {
				let b = f(e);
				if(!(res > b)) {
					res = b;
				}
			}
		}
		let this1 = res;
		if(this1 != null) {
			return this1;
		} else {
			return 0;
		}
	}
	getMaxContentSize(axis) {
		return Infinity;
	}
	run() {
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			app_ui_core_layout_OverlayLayout.process(false,this.target,c);
			app_ui_core_layout_OverlayLayout.process(true,this.target,c);
		}
	}
	static process(axis,parent,e) {
		let parentStart = parent.contentStart(axis);
		let parentSize = parent.contentSize(axis);
		let margin = e.style.margin;
		let margins = [axis ? margin.top : margin.left,axis ? margin.bottom : margin.right];
		let autoMarginType = (margins[0] == app_ui_core_LengthOrAuto.Auto ? 1 : 0) | (margins[1] == app_ui_core_LengthOrAuto.Auto ? 2 : 0);
		let result = new Array(margins.length);
		let _g = 0;
		let _g1 = margins.length;
		while(_g < _g1) {
			let i = _g++;
			result[i] = app_ui_core_LengthTools.calc(app_ui_core_LengthOrAutoTools.toLength(margins[i],app_ui_core_Length.Zero),parentSize);
		}
		let marginSum = result[0] + result[1];
		let _this = e.style.size;
		let sizeSpecified = (axis ? _this.h : _this.w) != app_ui_core_LengthOrAuto.Auto;
		let align;
		switch(autoMarginType) {
		case 1:
			align = 3;
			break;
		case 0:case 2:
			align = 1;
			break;
		default:
			align = 2;
		}
		let contentSize = e.getBoundarySize(axis,parentSize,false);
		let minSize = e.getMinBoundarySize(axis,parentSize,false);
		let maxSize = e.getMaxBoundarySize(axis,parentSize,false);
		let size;
		if(sizeSpecified) {
			size = contentSize;
		} else {
			let a = parentSize - marginSum;
			size = a < contentSize ? a : contentSize;
		}
		if(size < minSize) {
			size = minSize;
		} else if(size > maxSize) {
			size = maxSize;
		}
		let freeSpace = parentSize - (size + marginSum);
		let startSpace;
		switch(align) {
		case 0:case 1:
			startSpace = 0;
			break;
		case 2:
			startSpace = freeSpace / 2;
			break;
		case 3:
			startSpace = freeSpace;
			break;
		}
		let _this1 = e.boundary;
		let start = parentStart + result[0] + startSpace;
		if(axis) {
			_this1.y = start;
			_this1.h = size;
		} else {
			_this1.x = start;
			_this1.w = size;
		}
	}
}
$hxClasses["app.ui.core.layout.OverlayLayout"] = app_ui_core_layout_OverlayLayout;
app_ui_core_layout_OverlayLayout.__name__ = "app.ui.core.layout.OverlayLayout";
app_ui_core_layout_OverlayLayout.__super__ = app_ui_core_layout_Layout;
Object.assign(app_ui_core_layout_OverlayLayout.prototype, {
	__class__: app_ui_core_layout_OverlayLayout
});
class app_ui_view_Button extends app_ui_Sprite {
	constructor(w,h,text,onClick,textScale) {
		if(app_ui_Sprite._hx_skip_constructor) {
			super();
			return;
		}
		app_ui_Sprite._hx_skip_constructor = true;
		super();
		app_ui_Sprite._hx_skip_constructor = false;
		this._hx_constructor(w,h,text,onClick,textScale);
	}
	_hx_constructor(w,h,text,onClick,textScale) {
		if(textScale == null) {
			textScale = 1.0;
		}
		this.state = app_ui_view_ButtonState.Default;
		super._hx_constructor();
		this.text = text;
		this.onClick = onClick != null ? onClick : function() {
		};
		this.textScale = textScale;
		let _this = this.element.style.size;
		_this.w = w;
		_this.h = h;
		this.stopEvent = true;
		this.pointerPolicy = app_ui_PointerPolicy.Exclusive;
		this.cursor = "pointer";
		this.round = 2;
	}
	hitTest(x,y) {
		let area = this.element.style.hitArea;
		let w = this.element.boundary.w;
		let h = this.element.boundary.h;
		switch(area._hx_index) {
		case 0:
			return false;
		case 1:
			if(x >= 0 && y >= 0 && x < w) {
				return y < h;
			} else {
				return false;
			}
			break;
		case 2:
			return area.hitTest(w,h,x,y);
		}
	}
	onPointerEnter(p) {
		super.onPointerEnter(p);
		if((p.downBits & 1) == 1) {
			this.onPointerDown(p,0);
		}
	}
	onPointerDown(p,index) {
		if(!p.isPrimary || index != 0) {
			return;
		}
		switch(this.state._hx_index) {
		case 0:case 1:
			let x = p.x;
			let y = p.y;
			let area = this.element.style.hitArea;
			let w = this.element.boundary.w;
			let h = this.element.boundary.h;
			let tmp;
			switch(area._hx_index) {
			case 0:
				tmp = false;
				break;
			case 1:
				tmp = x >= 0 && y >= 0 && x < w && y < h;
				break;
			case 2:
				tmp = area.hitTest(w,h,x,y);
				break;
			}
			if(tmp) {
				this.state = app_ui_view_ButtonState.Pressed;
			}
			break;
		case 2:case 3:
			break;
		}
	}
	onPointerUp(p,index) {
		if(!p.isPrimary || index != 0) {
			return;
		}
		let x = p.x;
		let y = p.y;
		let area = this.element.style.hitArea;
		let w = this.element.boundary.w;
		let h = this.element.boundary.h;
		let tmp;
		switch(area._hx_index) {
		case 0:
			tmp = false;
			break;
		case 1:
			tmp = x >= 0 && y >= 0 && x < w && y < h;
			break;
		case 2:
			tmp = area.hitTest(w,h,x,y);
			break;
		}
		if(tmp) {
			this.state = app_ui_view_ButtonState.Hover;
			this.onClick();
		} else {
			this.state = app_ui_view_ButtonState.Default;
		}
	}
	update() {
		let res = null;
		let _g = 0;
		let _g1 = this.pointerManager.pointers;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			if(p.isPrimary) {
				res = p;
				break;
			}
		}
		let p = res;
		let hit;
		if(p != null) {
			let x = p.x;
			let y = p.y;
			let area = this.element.style.hitArea;
			let w = this.element.boundary.w;
			let h = this.element.boundary.h;
			switch(area._hx_index) {
			case 0:
				hit = false;
				break;
			case 1:
				hit = x >= 0 && y >= 0 && x < w && y < h;
				break;
			case 2:
				hit = area.hitTest(w,h,x,y);
				break;
			}
		} else {
			hit = false;
		}
		switch(this.state._hx_index) {
		case 0:
			if(hit) {
				this.state = app_ui_view_ButtonState.Hover;
			}
			break;
		case 1:
			if(!hit) {
				this.state = app_ui_view_ButtonState.Default;
			}
			break;
		case 2:
			if(!hit) {
				this.state = app_ui_view_ButtonState.PressedOut;
			}
			break;
		case 3:
			if(hit) {
				this.state = app_ui_view_ButtonState.Pressed;
			}
			break;
		}
		if(this.pointerPolicy == app_ui_PointerPolicy.Free) {
			this.state = hit ? (p.downBits & 1) == 1 ? app_ui_view_ButtonState.Pressed : app_ui_view_ButtonState.Hover : app_ui_view_ButtonState.Default;
		}
	}
	draw(g) {
		switch(this.state._hx_index) {
		case 0:
			g.c2d.fillStyle = "rgba(" + (255.0 | 0) + "," + (255.0 | 0) + "," + (255.0 | 0) + "," + 1.0 + ")";
			break;
		case 1:
			g.c2d.fillStyle = "rgba(" + (255.0 | 0) + "," + (153. | 0) + "," + (153. | 0) + "," + 1.0 + ")";
			break;
		case 2:
			g.c2d.fillStyle = "rgba(" + (153. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
			break;
		case 3:
			g.c2d.fillStyle = "rgba(" + (153. | 0) + "," + (153. | 0) + "," + (153. | 0) + "," + 1.0 + ")";
			break;
		}
		g.c2d.strokeStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
		let w = this.element.boundary.w;
		let h = this.element.boundary.h;
		let radius = this.round;
		g.c2d.beginPath();
		g.c2d.moveTo(w * 0.5,0);
		g.c2d.arcTo(w,0,w,h * 0.5,radius);
		g.c2d.arcTo(w,h,w * 0.5,h,radius);
		g.c2d.arcTo(0,h,0,h * 0.5,radius);
		g.c2d.arcTo(0,0,w * 0.5,0,radius);
		g.c2d.closePath();
		g.c2d.fill("evenodd");
		g.c2d.stroke();
		g.c2d.textBaseline = "middle";
		g.c2d.textAlign = "center";
		switch(this.state._hx_index) {
		case 0:case 1:
			g.c2d.fillStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
			break;
		case 2:case 3:
			g.c2d.fillStyle = "rgba(" + (255.0 | 0) + "," + (255.0 | 0) + "," + (255.0 | 0) + "," + 1.0 + ")";
			break;
		}
		let s = this.text();
		let x = this.element.boundary.w * 0.5;
		let y = this.element.boundary.h * 0.5;
		let scale = this.textScale;
		if(scale == null) {
			scale = 1.0;
		}
		if(scale != 1.0) {
			g.c2d.save();
			g.c2d.translate(x,y);
			g.c2d.scale(scale,scale);
			g.c2d.fillText(s,0,0);
			g.c2d.restore();
		} else {
			g.c2d.fillText(s,x,y);
		}
	}
}
$hxClasses["app.ui.view.Button"] = app_ui_view_Button;
app_ui_view_Button.__name__ = "app.ui.view.Button";
app_ui_view_Button.__super__ = app_ui_Sprite;
Object.assign(app_ui_view_Button.prototype, {
	__class__: app_ui_view_Button
});
var app_ui_view_ButtonState = $hxEnums["app.ui.view.ButtonState"] = { __ename__ : "app.ui.view.ButtonState", __constructs__ : ["Default","Hover","Pressed","PressedOut"]
	,Default: {_hx_index:0,__enum__:"app.ui.view.ButtonState",toString:$estr}
	,Hover: {_hx_index:1,__enum__:"app.ui.view.ButtonState",toString:$estr}
	,Pressed: {_hx_index:2,__enum__:"app.ui.view.ButtonState",toString:$estr}
	,PressedOut: {_hx_index:3,__enum__:"app.ui.view.ButtonState",toString:$estr}
};
class app_ui_view_Font {
	static measure(text) {
		return 3 + 6 * text.length;
	}
}
$hxClasses["app.ui.view.Font"] = app_ui_view_Font;
app_ui_view_Font.__name__ = "app.ui.view.Font";
class app_ui_view_Label extends app_ui_Sprite {
	constructor(text,align,w,h,scale) {
		app_ui_Sprite._hx_skip_constructor = true;
		super();
		app_ui_Sprite._hx_skip_constructor = false;
		this._hx_constructor(text,align,w,h,scale);
	}
	_hx_constructor(text,align,w,h,scale) {
		this.strokeColor = new app_ui_view_color_StaticColor(0,0,0);
		this.strokeWidth = 0.8;
		this.stroke = false;
		this.fillColor = new app_ui_view_color_StaticColor(0,0,0);
		this.fill = true;
		super._hx_constructor();
		this.text = text;
		this.scale = scale;
		this.align = align;
		let _this = this.element.style.size;
		_this.w = w;
		_this.h = h;
	}
	draw(g) {
		let drawMode = this.fill ? this.stroke ? app_graphics_DrawMode.Both : app_graphics_DrawMode.Fill : app_graphics_DrawMode.Stroke;
		let r = this.fillColor.getRGBA()[0];
		let g1 = this.fillColor.getRGBA()[1];
		let b = this.fillColor.getRGBA()[2];
		let a = this.fillColor.getRGBA()[3];
		if(a == null) {
			a = 1.0;
		}
		g.c2d.fillStyle = "rgba(" + (r * 255.0 | 0) + "," + (g1 * 255.0 | 0) + "," + (b * 255.0 | 0) + "," + a + ")";
		let r1 = this.strokeColor.getRGBA()[0];
		let g2 = this.strokeColor.getRGBA()[1];
		let b1 = this.strokeColor.getRGBA()[2];
		let a1 = this.strokeColor.getRGBA()[3];
		if(a1 == null) {
			a1 = 1.0;
		}
		g.c2d.strokeStyle = "rgba(" + (r1 * 255.0 | 0) + "," + (g2 * 255.0 | 0) + "," + (b1 * 255.0 | 0) + "," + a1 + ")";
		g.c2d.textAlign = this.align;
		g.c2d.textBaseline = "middle";
		let scale = this.scale();
		g.c2d.lineWidth = this.strokeWidth / scale;
		switch(this.align) {
		case "center":
			let s = this.text();
			let x = this.element.boundary.w * 0.5;
			let y = this.element.boundary.h * 0.5;
			let scale1 = scale;
			if(scale == null) {
				scale1 = 1.0;
			}
			if(scale1 != 1.0) {
				g.c2d.save();
				g.c2d.translate(x,y);
				g.c2d.scale(scale1,scale1);
				switch(drawMode._hx_index) {
				case 0:
					g.c2d.strokeText(s,0,0);
					break;
				case 1:
					g.c2d.fillText(s,0,0);
					break;
				case 2:
					g.c2d.fillText(s,0,0);
					g.c2d.strokeText(s,0,0);
					break;
				}
				g.c2d.restore();
			} else {
				switch(drawMode._hx_index) {
				case 0:
					g.c2d.strokeText(s,x,y);
					break;
				case 1:
					g.c2d.fillText(s,x,y);
					break;
				case 2:
					g.c2d.fillText(s,x,y);
					g.c2d.strokeText(s,x,y);
					break;
				}
			}
			break;
		case "left":
			let s1 = this.text();
			let y1 = this.element.boundary.h * 0.5;
			let scale2 = scale;
			if(scale == null) {
				scale2 = 1.0;
			}
			if(scale2 != 1.0) {
				g.c2d.save();
				g.c2d.translate(0,y1);
				g.c2d.scale(scale2,scale2);
				switch(drawMode._hx_index) {
				case 0:
					g.c2d.strokeText(s1,0,0);
					break;
				case 1:
					g.c2d.fillText(s1,0,0);
					break;
				case 2:
					g.c2d.fillText(s1,0,0);
					g.c2d.strokeText(s1,0,0);
					break;
				}
				g.c2d.restore();
			} else {
				switch(drawMode._hx_index) {
				case 0:
					g.c2d.strokeText(s1,0,y1);
					break;
				case 1:
					g.c2d.fillText(s1,0,y1);
					break;
				case 2:
					g.c2d.fillText(s1,0,y1);
					g.c2d.strokeText(s1,0,y1);
					break;
				}
			}
			break;
		case "right":
			let s2 = this.text();
			let x1 = this.element.boundary.w;
			let y2 = this.element.boundary.h * 0.5;
			let scale3 = scale;
			if(scale == null) {
				scale3 = 1.0;
			}
			if(scale3 != 1.0) {
				g.c2d.save();
				g.c2d.translate(x1,y2);
				g.c2d.scale(scale3,scale3);
				switch(drawMode._hx_index) {
				case 0:
					g.c2d.strokeText(s2,0,0);
					break;
				case 1:
					g.c2d.fillText(s2,0,0);
					break;
				case 2:
					g.c2d.fillText(s2,0,0);
					g.c2d.strokeText(s2,0,0);
					break;
				}
				g.c2d.restore();
			} else {
				switch(drawMode._hx_index) {
				case 0:
					g.c2d.strokeText(s2,x1,y2);
					break;
				case 1:
					g.c2d.fillText(s2,x1,y2);
					break;
				case 2:
					g.c2d.fillText(s2,x1,y2);
					g.c2d.strokeText(s2,x1,y2);
					break;
				}
			}
			break;
		}
	}
}
$hxClasses["app.ui.view.Label"] = app_ui_view_Label;
app_ui_view_Label.__name__ = "app.ui.view.Label";
app_ui_view_Label.__super__ = app_ui_Sprite;
Object.assign(app_ui_view_Label.prototype, {
	__class__: app_ui_view_Label
});
var app_ui_view_SliderType = $hxEnums["app.ui.view.SliderType"] = { __ename__ : "app.ui.view.SliderType", __constructs__ : ["Linear","Logarithmic","BiLogarithmic"]
	,Linear: {_hx_index:0,__enum__:"app.ui.view.SliderType",toString:$estr}
	,Logarithmic: ($_=function(power) { return {_hx_index:1,power:power,__enum__:"app.ui.view.SliderType",toString:$estr}; },$_.__params__ = ["power"],$_)
	,BiLogarithmic: ($_=function(power) { return {_hx_index:2,power:power,__enum__:"app.ui.view.SliderType",toString:$estr}; },$_.__params__ = ["power"],$_)
};
class app_ui_view_Slider extends app_ui_Sprite {
	constructor(axis,min,max,initial,type,onUpdate) {
		app_ui_Sprite._hx_skip_constructor = true;
		super();
		app_ui_Sprite._hx_skip_constructor = false;
		this._hx_constructor(axis,min,max,initial,type,onUpdate);
	}
	_hx_constructor(axis,min,max,initial,type,onUpdate) {
		this.grabbed = null;
		this.over = false;
		super._hx_constructor();
		this.axis = axis;
		this.type = type;
		this.min = min;
		this.max = max;
		this.onUpdate = onUpdate;
		this.stopEvent = true;
		this.pointerPolicy = app_ui_PointerPolicy.Exclusive;
		this.setValue(initial);
		this.margin = 8;
	}
	setValue(v) {
		if(this.value == v) {
			return;
		}
		this.value = v;
		this.ratio = (this.value - this.min) / (this.max - this.min);
		let a = this.invMapRatio(this.ratio);
		this.rawRatio = a < 0 ? 0 : a > 1 ? 1 : a;
		let f = this.rawRatio;
		if(!isFinite(f)) {
			this.rawRatio = 0;
		}
		this.onUpdate(this.value);
	}
	onPointerEnter(p) {
		if(p.isPrimary) {
			this.over = true;
		}
	}
	onPointerExit(p) {
		if(p.isPrimary) {
			this.over = false;
		}
	}
	onPointerDown(p,index) {
		if(p.isPrimary && index == 0) {
			this.grabbed = p;
		}
	}
	onPointerUp(p,index) {
		if(this.grabbed == p && index == 0) {
			this.grabbed = null;
		}
	}
	update() {
		if(this.grabbed != null) {
			let start = this.margin;
			let _this = this.element.boundary;
			let a = ((this.axis == false ? this.grabbed.x : this.grabbed.y) - start) / ((this.axis ? _this.h : _this.w) - this.margin - start);
			this.rawRatio = a < 0 ? 0 : a > 1 ? 1 : a;
			let f = this.rawRatio;
			if(!isFinite(f)) {
				this.rawRatio = 0;
			}
			this.ratio = this.mapRatio(this.rawRatio);
			this.setValue(this.min + (this.max - this.min) * this.ratio);
		}
	}
	mapRatio(r) {
		let _g = this.type;
		switch(_g._hx_index) {
		case 0:
			return r;
		case 1:
			return this.mapExp(r,_g.power);
		case 2:
			let _g1 = _g.power;
			let t = r * 2 - 1;
			return (t < 0 ? -this.mapExp(-t,_g1) : this.mapExp(t,_g1)) * 0.5 + 0.5;
		}
	}
	invMapRatio(r) {
		let _g = this.type;
		switch(_g._hx_index) {
		case 0:
			return r;
		case 1:
			return this.mapLog(r,_g.power);
		case 2:
			let _g1 = _g.power;
			let t = r * 2 - 1;
			return (t < 0 ? -this.mapLog(-t,_g1) : this.mapLog(t,_g1)) * 0.5 + 0.5;
		}
	}
	mapExp(r,power) {
		return (Math.pow(2,r * power) - 1) / (Math.pow(2,power) - 1);
	}
	mapLog(r,power) {
		return Math.log(r * (Math.pow(2,power) - 1) + 1) / Math.log(2) / power;
	}
	draw(g) {
		let start = this.margin;
		let _this = this.element.boundary;
		let end = (this.axis ? _this.h : _this.w) - this.margin;
		let pos = start + this.rawRatio * (end - start);
		let baseline = this.axis == false ? this.element.boundary.h * 0.5 : this.element.boundary.w * 0.5;
		this.invMapRatio((0 - this.min) / (this.max - this.min));
		if(this.over) {
			g.c2d.fillStyle = "rgba(" + (153. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
		} else {
			g.c2d.fillStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
		}
		let r = this.grabbed != null ? 8 : 6;
		g.c2d.strokeStyle = "rgba(" + (191.25 | 0) + "," + (191.25 | 0) + "," + (191.25 | 0) + "," + 1.0 + ")";
		g.c2d.lineWidth = 3;
		g.c2d.lineCap = "round";
		if(this.axis) {
			g.c2d.beginPath();
			g.c2d.moveTo(baseline,start);
			g.c2d.lineTo(baseline,end);
			g.c2d.stroke();
			g.c2d.lineWidth = 4;
			g.c2d.strokeStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
			g.c2d.beginPath();
			g.c2d.moveTo(baseline,start);
			g.c2d.lineTo(baseline,pos);
			g.c2d.stroke();
			g.c2d.beginPath();
			g.c2d.arc(baseline,pos,r,0,6.2831853071795862);
			g.c2d.fill();
		} else {
			g.c2d.beginPath();
			g.c2d.moveTo(start,baseline);
			g.c2d.lineTo(end,baseline);
			g.c2d.stroke();
			g.c2d.lineWidth = 4;
			g.c2d.strokeStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
			g.c2d.beginPath();
			g.c2d.moveTo(start,baseline);
			g.c2d.lineTo(pos,baseline);
			g.c2d.stroke();
			g.c2d.beginPath();
			g.c2d.arc(pos,baseline,r,0,6.2831853071795862);
			g.c2d.fill();
		}
	}
}
$hxClasses["app.ui.view.Slider"] = app_ui_view_Slider;
app_ui_view_Slider.__name__ = "app.ui.view.Slider";
app_ui_view_Slider.__super__ = app_ui_Sprite;
Object.assign(app_ui_view_Slider.prototype, {
	__class__: app_ui_view_Slider
});
class app_ui_view_color_Color {
	static get_r(this1) {
		return this1.getRGBA()[0];
	}
	static get_g(this1) {
		return this1.getRGBA()[1];
	}
	static get_b(this1) {
		return this1.getRGBA()[2];
	}
	static get_a(this1) {
		return this1.getRGBA()[3];
	}
	static getData(this1) {
		return this1;
	}
	static fromArray(rgba) {
		return new app_ui_view_color_StaticColor(rgba[0],rgba[1],rgba[2],rgba.length <= 3 ? 1.0 : rgba[3]);
	}
}
class app_ui_view_color_ColorData {
}
$hxClasses["app.ui.view.color.ColorData"] = app_ui_view_color_ColorData;
app_ui_view_color_ColorData.__name__ = "app.ui.view.color.ColorData";
app_ui_view_color_ColorData.__isInterface__ = true;
Object.assign(app_ui_view_color_ColorData.prototype, {
	__class__: app_ui_view_color_ColorData
});
class app_ui_view_color_DynamicColor {
	constructor(rgba) {
		this.rgba = rgba;
	}
	getRGBA() {
		return this.rgba();
	}
	static sine(c1,c2,period) {
		let t1 = HxOverrides.now() / 1000;
		return new app_ui_view_color_DynamicColor(function() {
			let t = Math.cos((HxOverrides.now() / 1000 - t1) / period * 2 * Math.PI) * 0.5 + 0.5;
			let rgba1 = app_ui_view_color_Color.getData(c1).getRGBA();
			let rgba2 = app_ui_view_color_Color.getData(c2).getRGBA();
			let r1 = rgba1[0];
			let g1 = rgba1[1];
			let b1 = rgba1[2];
			let a1 = rgba1[3];
			return [r1 + t * (rgba2[0] - r1),g1 + t * (rgba2[1] - g1),b1 + t * (rgba2[2] - b1),a1 + t * (rgba2[3] - a1)];
		});
	}
	static fade(c,from,duration) {
		let t1 = HxOverrides.now() / 1000;
		return new app_ui_view_color_DynamicColor(function() {
			let t = (HxOverrides.now() / 1000 - t1 - from) / duration;
			let rgba = app_ui_view_color_Color.getData(c).getRGBA();
			return [rgba[0],rgba[1],rgba[2],rgba[3] * (t < 0 ? 1 : t > 1 ? 0 : 1 - t)];
		});
	}
}
$hxClasses["app.ui.view.color.DynamicColor"] = app_ui_view_color_DynamicColor;
app_ui_view_color_DynamicColor.__name__ = "app.ui.view.color.DynamicColor";
app_ui_view_color_DynamicColor.__interfaces__ = [app_ui_view_color_ColorData];
Object.assign(app_ui_view_color_DynamicColor.prototype, {
	__class__: app_ui_view_color_DynamicColor
});
class app_ui_view_color_StaticColor {
	constructor(r,g,b,a) {
		if(a == null) {
			a = 1;
		}
		this.rgba = [r,g,b,a];
	}
	tweakR(newR) {
		return new app_ui_view_color_StaticColor(newR,this.rgba[1],this.rgba[2],this.rgba[3]);
	}
	tweakG(newG) {
		return new app_ui_view_color_StaticColor(this.rgba[0],newG,this.rgba[2],this.rgba[3]);
	}
	tweakB(newB) {
		return new app_ui_view_color_StaticColor(this.rgba[0],this.rgba[1],newB,this.rgba[3]);
	}
	tweakA(newA) {
		return new app_ui_view_color_StaticColor(this.rgba[0],this.rgba[1],this.rgba[2],newA);
	}
	getRGBA() {
		return this.rgba;
	}
	static red() {
		return new app_ui_view_color_StaticColor(1,0,0);
	}
	static green() {
		return new app_ui_view_color_StaticColor(0,1,0);
	}
	static blue() {
		return new app_ui_view_color_StaticColor(0,0,1);
	}
	static cyan() {
		return new app_ui_view_color_StaticColor(0,1,1);
	}
	static magenta() {
		return new app_ui_view_color_StaticColor(1,0,1);
	}
	static yellow() {
		return new app_ui_view_color_StaticColor(1,1,0);
	}
	static white() {
		return new app_ui_view_color_StaticColor(1,1,1);
	}
	static black() {
		return new app_ui_view_color_StaticColor(0,0,0);
	}
}
$hxClasses["app.ui.view.color.StaticColor"] = app_ui_view_color_StaticColor;
app_ui_view_color_StaticColor.__name__ = "app.ui.view.color.StaticColor";
app_ui_view_color_StaticColor.__interfaces__ = [app_ui_view_color_ColorData];
Object.assign(app_ui_view_color_StaticColor.prototype, {
	__class__: app_ui_view_color_StaticColor
});
class app_ui_view_main_GraphRenderer {
	constructor(waveData) {
		this.selectionRenderCount = 0;
		this.trailRenderCount = 0;
		this.waveData = waveData;
	}
	draw(g,graph) {
		this.g = g;
		this.graph = graph;
		this.selectionRenderCount++;
		g.c2d.textBaseline = "middle";
		this.drawCables();
		let _g = 0;
		let _g1 = graph.raw.nodes;
		while(_g < _g1.length) {
			let n = _g1[_g];
			++_g;
			this.drawNode(n,graph.selection.nodes.map.h.__keys__[n.__id__] != null ? app_ui_view_main_NodeRenderMode.Selected : app_ui_view_main_NodeRenderMode.Normal);
		}
		let _g2 = 0;
		let _g3 = graph.raw.nodes;
		while(_g2 < _g3.length) {
			let n = _g3[_g2];
			++_g2;
			let _g = 0;
			let _g1 = n.sockets;
			while(_g < _g1.length) this.drawSocket(n,_g1[_g++]);
		}
		let _g4 = 0;
		let _g5 = graph.nodeShadows;
		while(_g4 < _g5.length) {
			let ns = _g5[_g4];
			++_g4;
			if(ns.hidden) {
				continue;
			}
			this.drawNode(ns,app_ui_view_main_NodeRenderMode.Shadow);
		}
		let _g6 = 0;
		let _g7 = graph.connectionShadows;
		while(_g6 < _g7.length) {
			let cs = _g7[_g6];
			++_g6;
			this.drawShadowConnection(cs.v1,cs.v2,cs.ok);
		}
		this.drawTrail();
	}
	drawShadowConnection(src,dst,ok) {
		if(!ok) {
			return;
		}
		let x1 = src.point.x;
		let y1 = src.point.y;
		let r1;
		let _g = src.type;
		switch(_g._hx_index) {
		case 0:
			r1 = _g.n.phys.radius;
			break;
		case 1:
			r1 = 0;
			break;
		case 2:
			r1 = 0;
			break;
		}
		let x2 = dst.point.x;
		let y2 = dst.point.y;
		let r2;
		let _g1 = dst.type;
		switch(_g1._hx_index) {
		case 0:
			r2 = _g1.n.phys.radius;
			break;
		case 1:
			r2 = 0;
			break;
		case 2:
			r2 = 0;
			break;
		}
		let dx = x2 - x1;
		let dy = y2 - y1;
		let l = Math.sqrt(dx * dx + dy * dy);
		let invL = l == 0 ? 0 : 1 / l;
		let nx = dx * invL;
		let ny = dy * invL;
		x1 += nx * r1;
		y1 += ny * r1;
		x2 -= nx * r2;
		y2 -= ny * r2;
		this.g.c2d.lineWidth = 1;
		this.g.c2d.strokeStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 0.5 + ")";
		let _this = this.g;
		_this.c2d.beginPath();
		_this.c2d.moveTo(x1,y1);
		_this.c2d.lineTo(x2,y2);
		_this.c2d.stroke();
	}
	drawTrail() {
		let trail = this.graph.trail;
		let _gthis = this;
		if(trail.poss.length < 2) {
			return;
		}
		this.trailRenderCount++;
		let alpha = 0.5 + 0.2 * Math.sin(this.trailRenderCount * 0.1);
		let a = alpha;
		if(alpha == null) {
			a = 1.0;
		}
		this.g.c2d.strokeStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + a + ")";
		let a1 = alpha;
		if(alpha == null) {
			a1 = 1.0;
		}
		this.g.c2d.fillStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + a1 + ")";
		this.g.c2d.lineJoin = "bevel";
		this.g.c2d.lineWidth = 1 / this.graph.view.data.scale;
		this.g.c2d.beginPath();
		let first = trail.firstPos();
		let last = trail.lastPos();
		this.g.c2d.moveTo(app_ui_view_main_graph_TrailPos.get_x(first),app_ui_view_main_graph_TrailPos.get_y(first));
		trail.assertNonEmpty();
		let _g = 1;
		let _g1 = trail.poss.length - 1;
		while(_g < _g1) {
			let pos = trail.poss[_g++];
			_gthis.g.c2d.lineTo(app_ui_view_main_graph_TrailPos.get_x(pos),app_ui_view_main_graph_TrailPos.get_y(pos));
		}
		this.g.c2d.lineTo(app_ui_view_main_graph_TrailPos.get_x(last),app_ui_view_main_graph_TrailPos.get_y(last));
		if(trail.isLasso) {
			this.g.c2d.fill("evenodd");
		} else {
			this.g.c2d.stroke();
		}
	}
	drawSelection(x,y,r) {
		let t = this.selectionRenderCount % 40 / 40;
		let strokeR = (1 - (1 - t) * (1 - t)) * 0.5 * 4;
		let strokeA = 1 - t;
		this.g.c2d.lineWidth = strokeR * 2;
		let a = strokeA;
		if(strokeA == null) {
			a = 1.0;
		}
		this.g.c2d.strokeStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + a + ")";
		let _this = this.g;
		_this.c2d.beginPath();
		_this.c2d.arc(x,y,r + strokeR,0,6.2831853071795862);
		_this.c2d.stroke();
		this.g.c2d.lineWidth = 1;
	}
	drawOutputWave(x,y,radius) {
		let _gthis = this;
		if(this.waveData.length == 0) {
			this.g.c2d.strokeStyle = "rgba(" + (178.5 | 0) + "," + (178.5 | 0) + "," + (178.5 | 0) + "," + 1.0 + ")";
		} else {
			this.g.c2d.strokeStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
		}
		this.g.c2d.beginPath();
		this.g.c2d.lineJoin = "round";
		this.g.c2d.moveTo(x - radius,y);
		if(this.waveData.length > 0) {
			let _g = 0;
			while(_g < 129) {
				let t = _g++ / 128 * 2 - 1;
				let maxAmp = Math.min(0.6,Math.sqrt(1 - t * t));
				let len = _gthis.waveData.length;
				let indexF = (t + 1) * 0.5 * len;
				let index = Math.floor(indexF);
				let index2 = index + 1;
				let fract = indexF - index;
				let max = len - 1;
				if(index < 0) {
					index = 0;
				} else if(index > max) {
					index = max;
				}
				let max1 = len - 1;
				if(index2 < 0) {
					index2 = 0;
				} else if(index2 > max1) {
					index2 = max1;
				}
				let v1 = _gthis.waveData[index];
				let amp = (v1 + (_gthis.waveData[index2] - v1) * fract) * 0.6;
				let min = -maxAmp;
				if(amp < min) {
					amp = min;
				} else if(amp > maxAmp) {
					amp = maxAmp;
				}
				this.g.c2d.lineTo(x + t * radius,y - amp * radius);
			}
		}
		this.g.c2d.lineTo(x + radius,y);
		this.g.c2d.stroke();
	}
	createLabelForSocket(s,name) {
		let _g = [];
		let c = window.document.createElement("canvas");
		c.width = 120;
		c.height = 50;
		let g = c.getContext("2d",null);
		g.textAlign = "left";
		g.font = "bold " + (30. + "px ") + ("\"" + "Courier New" + "\"");
		g.fillStyle = "rgb(0,0,0)";
		g.strokeStyle = "rgb(255,255,255)";
		g.lineWidth = 8;
		let x = g.lineWidth;
		g.strokeText(name,x,c.height * 0.5);
		g.fillText(name,x,c.height * 0.5);
		_g.push(c);
		let c1 = window.document.createElement("canvas");
		c1.width = 120;
		c1.height = 50;
		let g1 = c1.getContext("2d",null);
		g1.textAlign = "right";
		g1.font = "bold " + (30. + "px ") + ("\"" + "Courier New" + "\"");
		g1.fillStyle = "rgb(0,0,0)";
		g1.strokeStyle = "rgb(255,255,255)";
		g1.lineWidth = 8;
		let x1 = c1.width - g1.lineWidth;
		g1.strokeText(name,x1,c1.height * 0.5);
		g1.fillText(name,x1,c1.height * 0.5);
		_g.push(c1);
		let c2 = window.document.createElement("canvas");
		c2.width = 120;
		c2.height = 50;
		let g2 = c2.getContext("2d",null);
		g2.textAlign = "left";
		g2.font = "bold " + (30. + "px ") + ("\"" + "Courier New" + "\"");
		g2.fillStyle = "rgb(128,128,128)";
		g2.strokeStyle = "rgb(255,255,255)";
		g2.lineWidth = 8;
		let x2 = g2.lineWidth;
		g2.strokeText(name,x2,c2.height * 0.5);
		g2.fillText(name,x2,c2.height * 0.5);
		_g.push(c2);
		let c3 = window.document.createElement("canvas");
		c3.width = 120;
		c3.height = 50;
		let g3 = c3.getContext("2d",null);
		g3.textAlign = "right";
		g3.font = "bold " + (30. + "px ") + ("\"" + "Courier New" + "\"");
		g3.fillStyle = "rgb(128,128,128)";
		g3.strokeStyle = "rgb(255,255,255)";
		g3.lineWidth = 8;
		let x3 = c3.width - g3.lineWidth;
		g3.strokeText(name,x3,c3.height * 0.5);
		g3.fillText(name,x3,c3.height * 0.5);
		_g.push(c3);
		s.phys.labels = _g;
		s.phys.labelText = name;
	}
	drawSocket(node,socket) {
		let sp = socket.phys;
		sp.computeDrawingPos();
		let r = sp.radius;
		let x = sp.xForDrawing;
		let y = sp.yForDrawing;
		this.g.c2d.strokeStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
		let _this = this.g;
		let mode = graph_SocketTypeTool.io(socket.type) ? app_graphics_DrawMode.Stroke : app_graphics_DrawMode.Both;
		_this.c2d.beginPath();
		_this.c2d.arc(x,y,r,0,6.2831853071795862);
		switch(mode._hx_index) {
		case 0:
			_this.c2d.stroke();
			break;
		case 1:
			_this.c2d.fill();
			break;
		case 2:
			_this.c2d.fill();
			_this.c2d.stroke();
			break;
		}
		let selected = this.graph.socketSelection.map.h.__keys__[socket.__id__] != null;
		if(selected) {
			this.drawSelection(x,y,r);
		}
		let name;
		let _g = socket.type;
		switch(_g._hx_index) {
		case 0:
			name = "";
			break;
		case 1:
			name = _g.name;
			break;
		case 2:
			name = _g.boundary.setting.name;
			break;
		}
		if(name != "") {
			if(sp.labels == null || sp.labelText != name) {
				this.createLabelForSocket(socket,name);
			}
			let scale = selected ? 0.35 : 0.25;
			let _this = socket.grayedOut ? [2,3] : [0,1];
			let result = new Array(_this.length);
			let _g = 0;
			let _g1 = _this.length;
			while(_g < _g1) {
				let i = _g++;
				result[i] = sp.labels[_this[i]];
			}
			let np = node.phys;
			this.drawLabel(np.vertex.point.x,np.vertex.point.y,np.radius,sp.radius,Math.atan2(sp.normalY,sp.normalX),scale,result);
		}
	}
	drawLabel(x,y,nodeRadius,socketRadius,angle,scale,images) {
		let _gthis = this;
		let l1 = images[0];
		let l2 = images[1];
		let _this = this.g;
		_this.c2d.save();
		_gthis.g.c2d.strokeStyle = "rgba(" + (255.0 | 0) + "," + (255.0 | 0) + "," + (255.0 | 0) + "," + 1.0 + ")";
		_gthis.g.c2d.translate(x,y);
		_gthis.g.c2d.rotate(angle);
		_gthis.g.c2d.translate(nodeRadius + socketRadius * 2 - 1,0);
		_gthis.g.c2d.scale(scale,scale);
		if(Math.abs(angle) > Math.PI / 2) {
			let _this = _gthis.g;
			let ang = Math.PI;
			let draw = function() {
				_gthis.g.c2d.drawImage(l2,-l1.width,-l1.height * 0.4);
			};
			_this.c2d.save();
			_this.c2d.rotate(ang);
			draw();
			_this.c2d.restore();
		} else {
			_gthis.g.c2d.drawImage(l1,0,-l1.height * 0.4);
		}
		_this.c2d.restore();
	}
	drawNode(node,mode) {
		let x = node.getX();
		let y = node.getY();
		let isDestination = node.getRole() == synth_NodeRole.Destination;
		this.g.c2d.lineWidth = 1;
		let r = node.getRadius();
		let alpha = mode == app_ui_view_main_NodeRenderMode.Shadow ? 0.5 : 1.0;
		if(isDestination && mode != app_ui_view_main_NodeRenderMode.Shadow) {
			this.drawOutputWave(x,y,r);
		}
		let a = alpha;
		if(a == null) {
			a = 1.0;
		}
		this.g.c2d.strokeStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + a + ")";
		let a1 = alpha;
		if(a1 == null) {
			a1 = 1.0;
		}
		this.g.c2d.fillStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + a1 + ")";
		let _this = this.g;
		_this.c2d.beginPath();
		_this.c2d.arc(x,y,r,0,6.2831853071795862);
		_this.c2d.stroke();
		if(mode == app_ui_view_main_NodeRenderMode.Selected) {
			this.drawSelection(x,y,r);
		}
		let a2 = alpha;
		if(a2 == null) {
			a2 = 1.0;
		}
		this.g.c2d.strokeStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + a2 + ")";
		let _g = node.getType();
		if(_g._hx_index == 3) {
			let innerCircleSize = r - 3.5999999999999996;
			if(_g.io) {
				let _this = this.g;
				_this.c2d.beginPath();
				_this.c2d.arc(x,y,innerCircleSize,0,6.2831853071795862);
				_this.c2d.stroke();
			} else {
				let radDiff = r - innerCircleSize;
				this.g.c2d.lineWidth = radDiff;
				let _this = this.g;
				_this.c2d.beginPath();
				_this.c2d.arc(x,y,r - radDiff * 0.5,0,6.2831853071795862);
				_this.c2d.stroke();
				this.g.c2d.lineWidth = 1;
			}
		}
		this.g.c2d.textAlign = "center";
		let _this1 = this.g;
		let s = node.getText();
		_this1.c2d.fillText(s,x,isDestination ? y - r * 0.75 : y);
	}
	drawCables() {
		let _g = 0;
		let _g1 = this.graph.raw.vertices;
		while(_g < _g1.length) _g1[_g++].tmpValForRendering = 0;
		this.g.c2d.lineCap = "round";
		this.g.c2d.lineWidth = 1;
		this.g.c2d.strokeStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
		this.g.c2d.beginPath();
		let visited = [];
		let _g2 = 0;
		let _g3 = this.graph.raw.nodes;
		while(_g2 < _g3.length) {
			let _g = 0;
			let _g1 = _g3[_g2++].sockets;
			while(_g < _g1.length) {
				let s = _g1[_g];
				++_g;
				if(graph_SocketTypeTool.io(s.type) != true) {
					continue;
				}
				let _g2 = 0;
				let _g3 = s.connections;
				while(_g2 < _g3.length) {
					let c = _g3[_g2];
					++_g2;
					let s2 = c.to;
					let fromV = s.phys.vertex;
					let toV = s2.phys.vertex;
					visited.length = 0;
					let x1 = fromV.point.x;
					let y1 = fromV.point.y;
					let dx = toV.point.x - x1;
					let dy = toV.point.y - y1;
					let len = Math.sqrt(dx * dx + dy * dy);
					let invLen = len == 0 ? 0 : 1 / len;
					let tx = -dy * invLen;
					let ty = dx * invLen;
					let pv = fromV;
					let _this = c.firstEdge;
					let v = fromV != _this.v1 ? _this.v1 : _this.v2;
					let ng = false;
					while(v != toV) {
						if(v.edges.length != 2) {
							throw haxe_Exception.thrown("invalid topology: " + v.edges.length);
						}
						visited.push(v);
						let deviation = (v.point.x - x1) * tx + (v.point.y - y1) * ty;
						if(deviation * deviation > 0.010000000000000002) {
							ng = true;
							break;
						}
						let _this = v.edges[0];
						let v1 = v != _this.v1 ? _this.v1 : _this.v2;
						let _this1 = v.edges[1];
						let nv = v1 != pv ? v1 : v != _this1.v1 ? _this1.v1 : _this1.v2;
						pv = v;
						v = nv;
					}
					if(!ng) {
						let _g = 0;
						while(_g < visited.length) visited[_g++].tmpValForRendering = 1;
						let sp = s.phys;
						let s2p = s2.phys;
						this.g.c2d.moveTo(sp.vertex.point.x,sp.vertex.point.y);
						this.g.c2d.lineTo(s2p.vertex.point.x,s2p.vertex.point.y);
					}
				}
			}
		}
		this.g.c2d.stroke();
		this.g.c2d.strokeStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
		this.g.c2d.beginPath();
		let _g4 = 0;
		let _g5 = this.graph.raw.edges;
		while(_g4 < _g5.length) {
			let e = _g5[_g4];
			++_g4;
			if(e.v1.tmpValForRendering == 1 || e.v2.tmpValForRendering == 1) {
				continue;
			}
			if(e.v1.type._hx_index != 0 && e.v2.type._hx_index != 0) {
				this.g.c2d.moveTo(e.v1.point.x,e.v1.point.y);
				this.g.c2d.lineTo(e.v2.point.x,e.v2.point.y);
			}
		}
		this.g.c2d.stroke();
	}
}
$hxClasses["app.ui.view.main.GraphRenderer"] = app_ui_view_main_GraphRenderer;
app_ui_view_main_GraphRenderer.__name__ = "app.ui.view.main.GraphRenderer";
Object.assign(app_ui_view_main_GraphRenderer.prototype, {
	__class__: app_ui_view_main_GraphRenderer
});
class app_ui_view_main_KeyboardSprite extends app_ui_Sprite {
	constructor(baseOctave,op) {
		app_ui_Sprite._hx_skip_constructor = true;
		super();
		app_ui_Sprite._hx_skip_constructor = false;
		this._hx_constructor(baseOctave,op);
	}
	_hx_constructor(baseOctave,op) {
		this.prevFreqIndex = -1;
		this.prevPressed = false;
		this.keysPressed = [];
		this.blackKeysIndex = [];
		this.blackKeysBound = [];
		this.blackKeys = [];
		this.whiteKeysIndex = [];
		this.whiteKeysBound = [];
		this.whiteKeys = [];
		super._hx_constructor();
		this.baseOctave = baseOctave;
		this.op = op;
		let _this = this.element.style.size;
		_this.w = app_ui_core_LengthOrAuto.Percent(100);
		_this.h = app_ui_core_LengthOrAuto.Percent(20);
	}
	update() {
		this.updateLayout();
		this.hitTest();
		let index = this.keysPressed.indexOf(true);
		let pressed = index != -1;
		if(pressed && !this.prevPressed) {
			this.op.attack();
		}
		if(pressed) {
			let freqIndex = (this.baseOctave() - 4) * 12 + (index - 9);
			if(freqIndex != this.prevFreqIndex) {
				let time = 0.001;
				if(!this.prevPressed) {
					time = 0;
				}
				this.op.setFrequency(440 * Math.pow(2,freqIndex / 12),time);
			}
			this.prevFreqIndex = freqIndex;
		}
		if(!pressed && this.prevPressed) {
			this.op.release();
		}
		this.prevPressed = pressed;
	}
	hitTest() {
		let _gthis = this;
		this.keysPressed.length = this.numTotalKeys;
		let res = null;
		let _g = 0;
		let _g1 = this.pointerManager.pointers;
		while(_g < _g1.length) {
			let p = _g1[_g];
			++_g;
			if(p.isPrimary) {
				res = p;
				break;
			}
		}
		let p = res;
		let blackHit = false;
		let keys = this.blackKeysBound;
		let numKeys = keys.length >> 2;
		let _g2 = 0;
		while(_g2 < numKeys) {
			let i = _g2++;
			let x = keys[i << 2 | 0];
			let y = keys[i << 2 | 1];
			let hit = p != null && (p.downBits & 1) == 1 && p.x >= x && p.x < x + keys[i << 2 | 2] && p.y >= y && p.y < y + keys[i << 2 | 3];
			_gthis.keysPressed[_gthis.blackKeysIndex[i]] = hit;
			blackHit = blackHit || hit;
		}
		let keys1 = this.whiteKeysBound;
		let numKeys1 = keys1.length >> 2;
		let _g3 = 0;
		while(_g3 < numKeys1) {
			let i = _g3++;
			let x = keys1[i << 2 | 0];
			let y = keys1[i << 2 | 1];
			_gthis.keysPressed[_gthis.whiteKeysIndex[i]] = !blackHit && p != null && (p.downBits & 1) == 1 && p.x >= x && p.x < x + keys1[i << 2 | 2] && p.y >= y && p.y < y + keys1[i << 2 | 3];
		}
	}
	updateLayout() {
		this.stroke = 1.5;
		let keyWidth = 24;
		let _gthis = this;
		let numKeys = Math.ceil((this.element.boundary.w - this.stroke) / keyWidth);
		if(numKeys > 100) {
			numKeys = 100;
		}
		keyWidth = (this.element.boundary.w - this.stroke) / numKeys;
		this.whiteKeys.length = 0;
		this.blackKeys.length = 0;
		this.whiteKeysBound.length = 0;
		this.blackKeysBound.length = 0;
		this.whiteKeysIndex.length = 0;
		this.blackKeysIndex.length = 0;
		let blackKeyExists = [true,true,false,true,true,true,false];
		let index = 0;
		let _g = 0;
		let _g1 = numKeys;
		while(_g < _g1) {
			let i = _g++;
			let x = keyWidth * i;
			let h = this.element.boundary.h;
			_gthis.whiteKeys.push(x);
			_gthis.whiteKeys.push(0);
			_gthis.whiteKeys.push(keyWidth + _gthis.stroke);
			_gthis.whiteKeys.push(h);
			_gthis.whiteKeysBound.push(x + _gthis.stroke * 0.5);
			_gthis.whiteKeysBound.push(_gthis.stroke);
			_gthis.whiteKeysBound.push(keyWidth);
			_gthis.whiteKeysBound.push(h - _gthis.stroke * 2);
			_gthis.whiteKeysIndex.push(index);
			++index;
			if(i < numKeys - 1 && blackKeyExists[i % blackKeyExists.length]) {
				let blackCenter = keyWidth * (i + 1) + 0.5 * this.stroke;
				let blackWidth = keyWidth * 0.6;
				let h = this.element.boundary.h * 0.5;
				_gthis.blackKeys.push(blackCenter - blackWidth * 0.5);
				_gthis.blackKeys.push(0);
				_gthis.blackKeys.push(blackWidth);
				_gthis.blackKeys.push(h);
				_gthis.blackKeysBound.push(blackCenter - 1.5 * blackWidth * 0.5);
				_gthis.blackKeysBound.push(_gthis.stroke);
				_gthis.blackKeysBound.push(blackWidth * 1.5);
				_gthis.blackKeysBound.push(h - _gthis.stroke * 2);
				_gthis.blackKeysIndex.push(index);
				++index;
			}
		}
		this.numTotalKeys = index;
	}
	draw(g) {
		let _gthis = this;
		g.c2d.fillStyle = "rgba(" + (127.5 | 0) + "," + (127.5 | 0) + "," + (127.5 | 0) + "," + 1.0 + ")";
		g.c2d.fillRect(0,0,this.element.boundary.w,this.element.boundary.h);
		let st = this.stroke;
		let keys = this.whiteKeys;
		let numKeys = keys.length >> 2;
		let _g = 0;
		while(_g < numKeys) {
			let i = _g++;
			let x = keys[i << 2 | 0];
			let y = keys[i << 2 | 1];
			let w = keys[i << 2 | 2];
			let h = keys[i << 2 | 3];
			g.c2d.fillStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
			g.c2d.fillRect(x,y,w,h);
			let pressed = _gthis.keysPressed[_gthis.whiteKeysIndex[i]];
			if(pressed) {
				g.c2d.fillStyle = "rgba(" + (255.0 | 0) + "," + (153. | 0) + "," + (153. | 0) + "," + 1.0 + ")";
			} else {
				g.c2d.fillStyle = "rgba(" + (255.0 | 0) + "," + (255.0 | 0) + "," + (255.0 | 0) + "," + 1.0 + ")";
			}
			g.c2d.fillRect(x + st,y + st,w - st * 2,h - st * 2);
			if(!pressed) {
				let shadowH = w * 0.6;
				g.c2d.fillStyle = "rgba(" + (204. | 0) + "," + (204. | 0) + "," + (204. | 0) + "," + 1.0 + ")";
				g.c2d.fillRect(x + st,y + h - shadowH + st,w - st * 2,shadowH - st * 2);
			}
			if(i % 7 == 0) {
				g.c2d.fillStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
				g.c2d.textAlign = "center";
				let s = "C" + (_gthis.baseOctave() + i / 7 | 0);
				g.c2d.fillText(s,x + w * 0.5,y + h * (pressed ? 0.75 : 0.7));
			}
		}
		let keys1 = this.blackKeys;
		let numKeys1 = keys1.length >> 2;
		let _g1 = 0;
		while(_g1 < numKeys1) {
			let i = _g1++;
			let x = keys1[i << 2 | 0];
			let y = keys1[i << 2 | 1];
			let w = keys1[i << 2 | 2];
			let h = keys1[i << 2 | 3];
			g.c2d.fillStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
			g.c2d.fillRect(x,y,w,h);
			let pressed = _gthis.keysPressed[_gthis.blackKeysIndex[i]];
			if(pressed) {
				g.c2d.fillStyle = "rgba(" + (153. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
			} else {
				g.c2d.fillStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
			}
			g.c2d.fillRect(x + st,y + st,w - st * 2,h - st * 2);
			if(!pressed) {
				let shadowH = w * 0.8;
				g.c2d.fillStyle = "rgba(" + (102. | 0) + "," + (102. | 0) + "," + (102. | 0) + "," + 1.0 + ")";
				g.c2d.fillRect(x + st,y + h - shadowH + st,w - st * 2,shadowH - st * 2);
			}
		}
	}
}
$hxClasses["app.ui.view.main.KeyboardSprite"] = app_ui_view_main_KeyboardSprite;
app_ui_view_main_KeyboardSprite.__name__ = "app.ui.view.main.KeyboardSprite";
app_ui_view_main_KeyboardSprite.__super__ = app_ui_Sprite;
Object.assign(app_ui_view_main_KeyboardSprite.prototype, {
	__class__: app_ui_view_main_KeyboardSprite
});
class app_ui_view_main_MainSprite extends app_ui_Sprite {
	constructor(graph,op) {
		app_ui_Sprite._hx_skip_constructor = true;
		super();
		app_ui_Sprite._hx_skip_constructor = false;
		this._hx_constructor(graph,op);
	}
	_hx_constructor(graph,op) {
		this.infoText = "";
		this.waveData = [];
		super._hx_constructor();
		let _gthis = this;
		this.graph = new app_ui_view_main_graph_GraphWrapper(graph,new render_View(this.element.boundary),op);
		this.renderer = new app_ui_view_main_GraphRenderer(this.waveData);
		this.element.style.maxSize.w = app_ui_core_LengthOrAuto.Percent(100);
		this.element.style.grow = 1;
		this.element.set_layout(new app_ui_core_layout_OverlayLayout());
		this.breadcrumb = new app_ui_view_main_breadcrumb_Breadcrumb(this.graph);
		this.addChild(this.breadcrumb);
		this.toolbar = new app_ui_view_main_Toolbar(this.graph);
		this.addChild(this.toolbar);
		this.clipboard = new app_Clipboard();
		this.inputController = new app_ui_view_main_input_InputController();
		this.pointerManager.addListener(this.inputController);
		this.viewController = new app_ui_view_main_ViewController(this.graph.view);
		this.inputController.addListener(this.viewController);
		this.clickController = new app_ui_view_main_graph_ClickController(this.graph);
		this.inputController.addListener(this.clickController);
		this.infoText = "";
		this.infoLabel = new app_ui_view_Label(function() {
			return _gthis.infoText;
		},"right",app_ui_core_LengthOrAuto.Percent(80),app_ui_core_LengthOrAuto.Px(16),function() {
			return 1.1;
		});
		this.infoLabel.element.style.boxSizing = app_ui_core_BoxSizing.Boundary;
		let _this = this.infoLabel.element.style.margin;
		_this.left = app_ui_core_LengthOrAuto.Auto;
		_this.top = app_ui_core_LengthOrAuto.Auto;
		_this.right = app_ui_core_LengthOrAuto.Px(8);
		_this.bottom = app_ui_core_LengthOrAuto.Px(8);
		this.addChild(this.infoLabel);
		this.initialGraph = app_ui_view_main_MainSprite.createInitialGraphData();
		this.resetGraph();
		this.graph.doneOperation(app_ui_view_main_graph_history_GraphOperation.Reset);
	}
	resetGraph() {
		this.loadAsRoot(this.initialGraph,true);
	}
	selectNodeCreation(n) {
		this.clickController.click.gotoNodeCreationMode(n);
	}
	closeToolbar() {
		this.toolbar.closeAll();
	}
	showInfo(text,type) {
		this.infoText = text;
		let tmp;
		switch(type._hx_index) {
		case 0:
			tmp = app_ui_view_color_DynamicColor.sine(new app_ui_view_color_StaticColor(0,0,0,1),new app_ui_view_color_StaticColor(0,0,0,0.3),1);
			break;
		case 1:
			tmp = app_ui_view_color_DynamicColor.fade(new app_ui_view_color_StaticColor(0,0,0,1),3,1);
			break;
		case 2:
			tmp = app_ui_view_color_DynamicColor.fade(new app_ui_view_color_StaticColor(0.8,0,0,1),3,1);
			break;
		}
		this.infoLabel.fillColor = tmp;
	}
	hideInfo() {
		this.infoText = "";
	}
	gotoGraph(graph) {
		this.graph.gotoGraph(graph);
		this.breadcrumb.updatePath();
	}
	loadAsRoot(data,vibration) {
		let root = this.graph.raw.getRoot();
		root.destroyEverything();
		this.gotoGraph(graph_Graph.deserialize(data,root.listener,vibration));
	}
	copy(data) {
		this.clipboard.copy(data);
	}
	undo() {
		let _this = this.graph;
		_this.loadSnapshot(_this.history.undo());
	}
	redo() {
		let _this = this.graph;
		_this.loadSnapshot(_this.history.redo());
	}
	canUndo() {
		return this.graph.history.canUndo();
	}
	canRedo() {
		return this.graph.history.canRedo();
	}
	paste(data,infoVerb) {
		if(infoVerb == null) {
			infoVerb = "paste";
		}
		if(data == null) {
			data = this.clipboard.data;
		}
		if(data == null) {
			return false;
		}
		this.clickController.click.gotoPasteMode(data,infoVerb);
		return true;
	}
	update() {
		this.waveData.length = 0;
		this.graph.raw.listener.onWaveDataRequest(this.waveData);
		this.processKeyInputs();
		this.graph.raw.stepPhysics();
	}
	processKeyInputs() {
		if(this.graph.op.getTopMenu() != null) {
			return;
		}
		let keyboard = this.graph.op.getKeyboard();
		let ctrl = pot_input_Keyboard.isControlDown(keyboard);
		let alt = pot_input_Keyboard.isAltDown(keyboard);
		let shift = pot_input_Keyboard.isShiftDown(keyboard);
		if(ctrl && !shift && !alt && pot_input_Keyboard.isKeyDown(keyboard,"z")) {
			this.toolbar.undo();
		}
		if(ctrl && !shift && !alt && pot_input_Keyboard.isKeyDown(keyboard,"y")) {
			this.toolbar.redo();
		}
		if(ctrl && !shift && !alt && pot_input_Keyboard.isKeyDown(keyboard,"x")) {
			this.toolbar.cut(false);
		}
		if(ctrl && !shift && !alt && pot_input_Keyboard.isKeyDown(keyboard,"c")) {
			this.toolbar.copy(false);
		}
		if(ctrl && !shift && !alt && pot_input_Keyboard.isKeyDown(keyboard,"v")) {
			this.toolbar.paste(false);
		}
		if(!ctrl && !shift && !alt && pot_input_Keyboard.isKeyDown(keyboard,"Enter")) {
			if(this.graph.selection.count() == 1) {
				this.graph.interact(this.graph.selection.toArray()[0]);
			}
		}
		if(ctrl && !shift && !alt && pot_input_Keyboard.isKeyDown(keyboard,"a")) {
			this.toolbar.selectAll(false);
		}
		if(!ctrl && !shift && !alt && (pot_input_Keyboard.isKeyDown(keyboard,"Backspace") || pot_input_Keyboard.isKeyDown(keyboard,"Delete"))) {
			this.toolbar.remove(false);
		}
		if(!ctrl && !shift && !alt && pot_input_Keyboard.isKeyDown(keyboard,"Escape")) {
			let _this = this.graph.selection.nodes;
			_this.map.h = { __keys__ : { }};
			_this.numEntries = 0;
		}
	}
	draw(g) {
		let _gthis = this;
		g.c2d.fillStyle = "rgba(" + (255.0 | 0) + "," + (255.0 | 0) + "," + (255.0 | 0) + "," + 1.0 + ")";
		g.c2d.fillRect(0,0,this.element.boundary.w,this.element.boundary.h);
		g.c2d.save();
		_gthis.graph.view.applyTransform(g);
		_gthis.renderer.draw(g,_gthis.graph);
		g.c2d.restore();
	}
	static createInitialGraphData() {
		let g = new graph_Graph();
		let output = app_NodeList.OUTPUT.create(g,80,0,false);
		let oscillator = app_NodeList.OSCILLATOR.create(g,-20.0,0.0,false);
		let _g = 0;
		let _g1 = oscillator.sockets;
		while(_g < _g1.length) {
			let s = _g1[_g];
			++_g;
			let ang = s.phys.getAngle();
			let _g2 = s.type;
			if(_g2._hx_index == 1) {
				let info;
				switch(_g2.name) {
				case "detune":
					info = new app_NodeInfo("Number","",graph_NodeType.Normal(false,true),synth_NodeRole.Number(new synth_NumberData(0)),[],[]);
					break;
				case "freq":
					info = app_NodeList.FREQUENCY;
					break;
				case "gain":
					info = app_NodeList.ENVELOPE;
					break;
				default:
					info = null;
				}
				if(info != null) {
					g.connectVertices(info.create(g,-20.0 + 80.0 * Math.cos(ang),80.0 * Math.sin(ang),false).phys.vertex,s.phys.vertex);
				}
			}
		}
		g.connectVertices(oscillator.phys.vertex,output.phys.vertex);
		return g.serialize(graph_serial_NodeFilter.ALL,false);
	}
}
$hxClasses["app.ui.view.main.MainSprite"] = app_ui_view_main_MainSprite;
app_ui_view_main_MainSprite.__name__ = "app.ui.view.main.MainSprite";
app_ui_view_main_MainSprite.__super__ = app_ui_Sprite;
Object.assign(app_ui_view_main_MainSprite.prototype, {
	__class__: app_ui_view_main_MainSprite
});
var app_ui_view_main_NodeRenderMode = $hxEnums["app.ui.view.main.NodeRenderMode"] = { __ename__ : "app.ui.view.main.NodeRenderMode", __constructs__ : ["Normal","Selected","Shadow"]
	,Normal: {_hx_index:0,__enum__:"app.ui.view.main.NodeRenderMode",toString:$estr}
	,Selected: {_hx_index:1,__enum__:"app.ui.view.main.NodeRenderMode",toString:$estr}
	,Shadow: {_hx_index:2,__enum__:"app.ui.view.main.NodeRenderMode",toString:$estr}
};
class app_ui_view_main_PointerDetector extends app_ui_Sprite {
	constructor() {
		app_ui_Sprite._hx_skip_constructor = true;
		super();
		app_ui_Sprite._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.markers = [];
		super._hx_constructor();
		let _this = this.element.style.size;
		_this.w = app_ui_core_LengthOrAuto.Percent(100);
		_this.h = app_ui_core_LengthOrAuto.Percent(100);
		this.element.set_layout(new app_ui_core_layout_OverlayLayout());
	}
	onPointerEnter(p) {
		let marker = new app_ui_view_main_PointerMarker(p);
		this.markers.push(marker);
		this.addChild(marker);
	}
	onPointerExit(p) {
		this.getMarker(p).die();
	}
	onPointerDown(p,index) {
		if(index == 0) {
			this.getMarker(p).down();
		}
	}
	onPointerUp(p,index) {
		if(index == 0) {
			this.getMarker(p).up();
		}
	}
	getMarker(p) {
		let _g = 0;
		let _g1 = this.markers;
		while(_g < _g1.length) {
			let marker = _g1[_g];
			++_g;
			if(marker.p == p) {
				return marker;
			}
		}
		return null;
	}
}
$hxClasses["app.ui.view.main.PointerDetector"] = app_ui_view_main_PointerDetector;
app_ui_view_main_PointerDetector.__name__ = "app.ui.view.main.PointerDetector";
app_ui_view_main_PointerDetector.__super__ = app_ui_Sprite;
Object.assign(app_ui_view_main_PointerDetector.prototype, {
	__class__: app_ui_view_main_PointerDetector
});
class app_ui_view_main_PointerMarker extends app_ui_Sprite {
	constructor(p) {
		app_ui_Sprite._hx_skip_constructor = true;
		super();
		app_ui_Sprite._hx_skip_constructor = false;
		this._hx_constructor(p);
	}
	_hx_constructor(p) {
		this.leftLife = 0;
		this.pressed = false;
		this.count = 0;
		this.freq = 12;
		super._hx_constructor();
		this.p = p;
		let _this = this.element.style.size;
		_this.w = app_ui_core_LengthOrAuto.Zero;
		_this.h = app_ui_core_LengthOrAuto.Zero;
	}
	down() {
		this.pressed = true;
	}
	up() {
		this.pressed = false;
	}
	die() {
		this.leftLife = 15;
	}
	update() {
		if(this.pressed) {
			this.count++;
		} else {
			if(this.count > 0) {
				this.count++;
			}
			if(this.count % this.freq == 0) {
				this.count = 0;
			}
		}
		if(this.leftLife > 0 && --this.leftLife == 0) {
			this.parent.removeChild(this);
		}
	}
	draw(g) {
		let t = this.count % this.freq / this.freq;
		let strokeA = 1 - t;
		if(this.pressed) {
			g.c2d.fillStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
			let x = this.p.x;
			let y = this.p.y;
			g.c2d.beginPath();
			g.c2d.arc(x,y,3,0,6.2831853071795862);
			g.c2d.fill();
		}
		if(this.count > 0) {
			g.c2d.lineWidth = 3;
			let a = strokeA;
			if(strokeA == null) {
				a = 1.0;
			}
			g.c2d.strokeStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + a + ")";
			let x = this.p.x;
			let y = this.p.y;
			g.c2d.beginPath();
			g.c2d.arc(x,y,(1 - (1 - t) * (1 - t)) * 10,0,6.2831853071795862);
			g.c2d.stroke();
		}
	}
}
$hxClasses["app.ui.view.main.PointerMarker"] = app_ui_view_main_PointerMarker;
app_ui_view_main_PointerMarker.__name__ = "app.ui.view.main.PointerMarker";
app_ui_view_main_PointerMarker.__super__ = app_ui_Sprite;
Object.assign(app_ui_view_main_PointerMarker.prototype, {
	__class__: app_ui_view_main_PointerMarker
});
class app_ui_view_main_Toolbar extends app_ui_Sprite {
	constructor(graph) {
		super();
		let _gthis = this;
		this.graph = graph;
		let op = graph.op;
		this.element.style.boxSizing = app_ui_core_BoxSizing.Boundary;
		let _this = this.element.style.size;
		_this.w = app_ui_core_LengthOrAuto.Percent(100);
		_this.h = app_ui_core_LengthOrAuto.Percent(100);
		let _this1 = this.element.style.padding;
		let S = app_ui_core_Length.Px(2);
		_this1.left = S;
		_this1.top = S;
		_this1.right = S;
		_this1.bottom = S;
		this.element.set_layout(new app_ui_core_layout_FlexLayout(true));
		let bottom = new app_ui_Sprite();
		bottom.element.set_layout(new app_ui_core_layout_FlexLayout(false));
		bottom.element.style.margin.top = app_ui_core_LengthOrAuto.Auto;
		let _g = $bind(op,op.changeOctave);
		let diff = -1;
		bottom.addChild(new app_ui_view_Button(app_ui_core_LengthOrAuto.Px(20),app_ui_core_LengthOrAuto.Px(20),function() {
			return "-";
		},function() {
			_g(diff);
		}));
		let _g1 = $bind(op,op.changeOctave);
		let diff1 = 1;
		bottom.addChild(new app_ui_view_Button(app_ui_core_LengthOrAuto.Px(20),app_ui_core_LengthOrAuto.Px(20),function() {
			return "+";
		},function() {
			_g1(diff1);
		}));
		let _g2 = 0;
		let _g3 = bottom.children;
		while(_g2 < _g3.length) {
			let _this = _g3[_g2++].element.style.margin;
			let S = app_ui_core_LengthOrAuto.Px(2);
			_this.left = S;
			_this.top = S;
			_this.right = S;
			_this.bottom = S;
		}
		let top = new app_ui_Sprite();
		top.element.set_layout(new app_ui_core_layout_FlexLayout(false));
		let nodeNames = ["Oscillator","Delay","Filter","Compressor","Frequency","Envelope","Number"];
		let nodeInfos = [app_NodeList.OSCILLATOR,app_NodeList.DELAY,app_NodeList.FILTER,app_NodeList.COMPRESSOR,app_NodeList.FREQUENCY,app_NodeList.ENVELOPE,app_NodeList.NUMBER];
		this.pulldownMenues = [];
		top.addChild(this.pulldownMenu("Data",["New Graph","Examples","Load","Save"],[$bind(this,this.clearGraph),$bind(this,this.openExample),$bind(this,this.importGraph),$bind(this,this.exportGraph)],this.pulldownMenues));
		let _g4 = [];
		let _g5 = 0;
		let _g6 = nodeNames.length;
		while(_g5 < _g6) {
			let i = _g5++;
			_g4.push(function() {
				op.selectNodeCreation(nodeInfos[i]);
				_gthis.closeAll();
			});
		}
		top.addChild(this.pulldownMenu("New",nodeNames,_g4,this.pulldownMenues));
		let _g7 = $bind(this,this.cut);
		let closeWhenDone = true;
		let _g8 = $bind(this,this.copy);
		let closeWhenDone1 = true;
		let _g9 = $bind(this,this.paste);
		let closeWhenDone2 = true;
		let _g10 = $bind(this,this.remove);
		let closeWhenDone3 = true;
		top.addChild(this.pulldownMenu("Edit",["Undo","Redo","Cut","Copy","Paste","Remove"],[$bind(this,this.undo),$bind(this,this.redo),function() {
			_g7(closeWhenDone);
		},function() {
			_g8(closeWhenDone1);
		},function() {
			_g9(closeWhenDone2);
		},function() {
			_g10(closeWhenDone3);
		}],this.pulldownMenues));
		let _g11 = $bind(this,this.createModule);
		let closeWhenDone4 = true;
		let _g12 = $bind(this,this.decomposeModule);
		let closeWhenDone5 = true;
		top.addChild(this.pulldownMenu("Module",["Create","Decompose","Import","Export"],[function() {
			_g11(closeWhenDone4);
		},function() {
			_g12(closeWhenDone5);
		},$bind(this,this.importModule),$bind(this,this.exportModule)],this.pulldownMenues));
		let _g13 = 0;
		let _g14 = top.children;
		while(_g13 < _g14.length) {
			let _this = _g14[_g13++].element.style.margin;
			let S = app_ui_core_LengthOrAuto.Px(2);
			_this.left = S;
			_this.top = S;
			_this.right = S;
			_this.bottom = S;
		}
		this.addChild(top);
		this.addChild(bottom);
	}
	clearGraph() {
		if(this.graph.lastOperation == app_ui_view_main_graph_history_GraphOperation.Reset && !this.graph.history.canRedo()) {
			return;
		}
		this.graph.op.reset();
		this.graph.doneOperation(app_ui_view_main_graph_history_GraphOperation.Reset);
	}
	openExample() {
		this.graph.op.openMenu(new app_ui_view_menu_example_OpenExamplesMenu(this.graph));
		this.closeAll();
	}
	importGraph() {
		switch(this.graph.op.importGraph()._hx_index) {
		case 0:
			this.graph.op.showInfo("Loaded!",app_InfoType.Info);
			this.graph.doneOperation(app_ui_view_main_graph_history_GraphOperation.Import);
			this.closeAll();
			break;
		case 1:
			this.closeAll();
			break;
		case 2:
			break;
		}
	}
	exportGraph() {
		this.exportData(this.graph.raw.serialize(graph_serial_NodeFilter.ALL,false));
		this.closeAll();
	}
	importModule() {
		switch(this.graph.op.importModule()._hx_index) {
		case 0:
			this.closeAll();
			break;
		case 1:
			this.closeAll();
			break;
		case 2:
			break;
		}
	}
	exportModule() {
		let data = this.graph.selection.createSubgraphData(true);
		if(data.nodes.length > 0) {
			this.exportData(data);
			this.closeAll();
		} else {
			this.graph.op.showInfo("Select nodes to export.",app_InfoType.Warning);
		}
	}
	exportData(data) {
		let g = graph_Graph.deserialize(data);
		g.moveCenterToZero();
		this.graph.op.exportData(g.serialize(graph_serial_NodeFilter.ALL,false));
	}
	createModule(closeWhenDone) {
		if(!this.graph.createModuleWithCurrentSelection()) {
			return;
		}
		this.graph.doneOperation(app_ui_view_main_graph_history_GraphOperation.CreateModule);
		if(closeWhenDone) {
			this.closeAll();
		}
	}
	decomposeModule(closeWhenDone) {
		let _this = this.graph.selection.toArray();
		let _g = [];
		let _g1 = 0;
		while(_g1 < _this.length) {
			let v = _this[_g1];
			++_g1;
			if(v.type._hx_index == 1) {
				_g.push(v);
			}
		}
		if(_g.length > 0) {
			this.graph.decomposeModules(_g);
			this.graph.doneOperation(app_ui_view_main_graph_history_GraphOperation.DecomposeModule);
			if(closeWhenDone) {
				this.closeAll();
			}
		} else {
			this.graph.op.showInfo("Select modules to decompose.",app_InfoType.Warning);
		}
	}
	undo() {
		if(!this.graph.history.canUndo()) {
			return;
		}
		let _this = this.graph;
		_this.loadSnapshot(_this.history.undo());
	}
	redo() {
		if(!this.graph.history.canRedo()) {
			return;
		}
		let _this = this.graph;
		_this.loadSnapshot(_this.history.redo());
	}
	cut(closeWhenDone) {
		if(!this.copySelectedSubGraph()) {
			return;
		}
		if(!this.removeSelectedSubGraph()) {
			return;
		}
		this.graph.doneOperation(app_ui_view_main_graph_history_GraphOperation.Cut);
		if(closeWhenDone) {
			this.closeAll();
		}
	}
	copy(closeWhenDone) {
		if(!this.copySelectedSubGraph()) {
			return;
		}
		if(closeWhenDone) {
			this.closeAll();
		}
	}
	remove(closeWhenDone) {
		if(!this.removeSelectedSubGraph()) {
			return;
		}
		this.graph.doneOperation(app_ui_view_main_graph_history_GraphOperation.Remove);
		if(closeWhenDone) {
			this.closeAll();
		}
	}
	paste(closeWhenDone) {
		if(this.graph.op.paste()) {
			if(closeWhenDone) {
				this.closeAll();
			}
		}
	}
	selectAll(closeWhenDone) {
		let _this = this.graph.selection.nodes;
		_this.map.h = { __keys__ : { }};
		_this.numEntries = 0;
		let _g = 0;
		let _g1 = this.graph.raw.nodes;
		while(_g < _g1.length) this.graph.selection.add(_g1[_g++]);
		if(closeWhenDone) {
			this.closeAll();
		}
	}
	removeSelectedSubGraph() {
		let res = this.graph;
		let _this = this.graph.selection.toArray();
		let f = ($_=this.graph,$bind($_,$_.canDestroyNode));
		let _g = [];
		let _g1 = 0;
		while(_g1 < _this.length) {
			let v = _this[_g1];
			++_g1;
			if(f(v)) {
				_g.push(v);
			}
		}
		let res1 = res.destroyNodes(_g);
		let _this1 = this.graph.selection.nodes;
		_this1.map.h = { __keys__ : { }};
		_this1.numEntries = 0;
		return res1;
	}
	copySelectedSubGraph() {
		if(this.graph.selection.count() < 1) {
			return false;
		}
		let data = this.graph.selection.createSubgraphData(true);
		if(data.nodes.length < 1) {
			return false;
		}
		this.graph.op.copy(data);
		return true;
	}
	pulldownMenu(name,children,onChildrenClicks,menuList) {
		let wrapper = new app_ui_Sprite();
		wrapper.element.set_layout(new app_ui_core_layout_FlexLayout(true));
		let menu = new app_ui_view_menu_pulldown_PulldownMenu();
		menuList.push(menu);
		menu.element.set_layout(new app_ui_core_layout_FlexLayout(true));
		let t = name;
		let button = new app_ui_view_Button(app_ui_core_LengthOrAuto.Px(60),app_ui_core_LengthOrAuto.Px(24),function() {
			return t;
		},function() {
			if(menu.isShown()) {
				menu.hide();
			} else {
				menu.show();
				let _g = 0;
				while(_g < menuList.length) {
					let m = menuList[_g];
					++_g;
					if(m != menu) {
						m.hide();
					}
				}
			}
		},1.0);
		button.element.style.margin.bottom = app_ui_core_LengthOrAuto.Px(2);
		let _g = 0;
		let _g1 = children.length;
		while(_g < _g1) {
			let i = _g++;
			let t = children[i];
			let item = new app_ui_view_Button(app_ui_core_LengthOrAuto.Px(90),app_ui_core_LengthOrAuto.Px(24),function() {
				return t;
			},onChildrenClicks[i],1.0);
			item.element.style.margin.right = app_ui_core_LengthOrAuto.Px(-30);
			item.element.style.margin.bottom = app_ui_core_LengthOrAuto.Px(2);
			menu.addChild(item);
		}
		wrapper.addChild(button);
		wrapper.addChild(menu);
		return wrapper;
	}
	closeAll() {
		let _g = 0;
		let _g1 = this.pulldownMenues;
		while(_g < _g1.length) _g1[_g++].hide();
	}
}
$hxClasses["app.ui.view.main.Toolbar"] = app_ui_view_main_Toolbar;
app_ui_view_main_Toolbar.__name__ = "app.ui.view.main.Toolbar";
app_ui_view_main_Toolbar.__super__ = app_ui_Sprite;
Object.assign(app_ui_view_main_Toolbar.prototype, {
	__class__: app_ui_view_main_Toolbar
});
class app_ui_view_main_input_InputControllerListener {
}
$hxClasses["app.ui.view.main.input.InputControllerListener"] = app_ui_view_main_input_InputControllerListener;
app_ui_view_main_input_InputControllerListener.__name__ = "app.ui.view.main.input.InputControllerListener";
app_ui_view_main_input_InputControllerListener.__isInterface__ = true;
Object.assign(app_ui_view_main_input_InputControllerListener.prototype, {
	__class__: app_ui_view_main_input_InputControllerListener
});
class app_ui_view_main_ViewController {
	constructor(view) {
		this.view = view;
	}
	onClickBegin(x,y) {
	}
	onClickMove(x,y) {
	}
	onClickCancel() {
	}
	onClickEnd() {
	}
	onPinchBegin(x1,y1,x2,y2) {
		let _this = this.view;
		this.pinchWorldCenterX = ((x1 + x2) * 0.5 - _this.sizePeek.getW() * 0.5) / _this.data.scale + _this.data.centerX;
		let _this1 = this.view;
		this.pinchWorldCenterY = ((y1 + y2) * 0.5 - _this1.sizePeek.getH() * 0.5) / _this1.data.scale + _this1.data.centerY;
		let dist = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
		if(dist < 1e-6) {
			dist = 1e-6;
		}
		this.pinchBaseScale = this.view.data.scale / dist;
	}
	onPinchMove(x1,y1,x2,y2) {
		let _this = this.view;
		let s = this.pinchBaseScale * Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
		let scale = _this.data.scale;
		scale = s < 0.1 ? 0.1 : s > 10 ? 10 : s;
		let f = _this.data.scale;
		if(!isFinite(f)) {
			scale = 2;
		}
		_this.data.scale = scale;
		this.view.centering((x1 + x2) * 0.5,(y1 + y2) * 0.5,this.pinchWorldCenterX,this.pinchWorldCenterY);
	}
	onPinchEnd() {
	}
	onPanBegin(x,y) {
		let _this = this.view;
		this.panWorldX = (x - _this.sizePeek.getW() * 0.5) / _this.data.scale + _this.data.centerX;
		let _this1 = this.view;
		this.panWorldY = (y - _this1.sizePeek.getH() * 0.5) / _this1.data.scale + _this1.data.centerY;
	}
	onPanMove(x,y) {
		this.view.centering(x,y,this.panWorldX,this.panWorldY);
	}
	onPanEnd() {
	}
	onWheel(x,y,amount) {
		let _this = this.view;
		let pivotX = (x - _this.sizePeek.getW() * 0.5) / _this.data.scale + _this.data.centerX;
		let _this1 = this.view;
		let pivotY = (y - _this1.sizePeek.getH() * 0.5) / _this1.data.scale + _this1.data.centerY;
		let _g = this.view;
		let s = _g.data.scale * Math.pow(1.05,-(amount / 24));
		let scale = _g.data.scale;
		scale = s < 0.1 ? 0.1 : s > 10 ? 10 : s;
		let f = _g.data.scale;
		if(!isFinite(f)) {
			scale = 2;
		}
		_g.data.scale = scale;
		this.view.centering(x,y,pivotX,pivotY);
	}
}
$hxClasses["app.ui.view.main.ViewController"] = app_ui_view_main_ViewController;
app_ui_view_main_ViewController.__name__ = "app.ui.view.main.ViewController";
app_ui_view_main_ViewController.__interfaces__ = [app_ui_view_main_input_InputControllerListener];
Object.assign(app_ui_view_main_ViewController.prototype, {
	__class__: app_ui_view_main_ViewController
});
class graph_NodeUpdateListener {
}
$hxClasses["graph.NodeUpdateListener"] = graph_NodeUpdateListener;
graph_NodeUpdateListener.__name__ = "graph.NodeUpdateListener";
graph_NodeUpdateListener.__isInterface__ = true;
Object.assign(graph_NodeUpdateListener.prototype, {
	__class__: graph_NodeUpdateListener
});
class app_ui_view_main_breadcrumb_Breadcrumb extends app_ui_Sprite {
	constructor(graph) {
		app_ui_Sprite._hx_skip_constructor = true;
		super();
		app_ui_Sprite._hx_skip_constructor = false;
		this._hx_constructor(graph);
	}
	_hx_constructor(graph) {
		this.items = [];
		super._hx_constructor();
		this.graph = graph;
		this.element.style.boxSizing = app_ui_core_BoxSizing.Boundary;
		this.element.style.margin.top = app_ui_core_LengthOrAuto.Px(36);
		this.element.style.padding.left = app_ui_core_Length.Px(8);
		this.element.style.padding.right = app_ui_core_Length.Px(8);
		this.element.set_layout(new app_ui_core_layout_FlexLayout(false));
		this.stopEvent = true;
		this.updatePath();
	}
	push(g) {
		let item = new app_ui_view_main_breadcrumb_BreadcrumbItem(this.graph,g);
		this.items.push(item);
		if(item.separator != null) {
			this.addChild(item.separator);
		}
		this.addChild(item.button);
	}
	updatePath() {
		while(this.items.length > 0) {
			let item = this.items.pop();
			if(item.graph == this.graph.raw) {
				this.items.push(item);
				return;
			}
			item.button.dead = true;
			if(item.separator != null) {
				item.separator.dead = true;
			}
		}
		let path = this.graph.raw.getPath();
		let _g = 0;
		while(_g < path.length) this.push(path[_g++]);
	}
	onNodeUpdate(node) {
		let _g = 0;
		let _g1 = this.items;
		while(_g < _g1.length) _g1[_g++].updateName();
	}
}
$hxClasses["app.ui.view.main.breadcrumb.Breadcrumb"] = app_ui_view_main_breadcrumb_Breadcrumb;
app_ui_view_main_breadcrumb_Breadcrumb.__name__ = "app.ui.view.main.breadcrumb.Breadcrumb";
app_ui_view_main_breadcrumb_Breadcrumb.__interfaces__ = [graph_NodeUpdateListener];
app_ui_view_main_breadcrumb_Breadcrumb.__super__ = app_ui_Sprite;
Object.assign(app_ui_view_main_breadcrumb_Breadcrumb.prototype, {
	__class__: app_ui_view_main_breadcrumb_Breadcrumb
});
class app_ui_view_main_breadcrumb_BreadcrumbItem {
	constructor(graphWrapper,graph) {
		let _gthis = this;
		this.graph = graph;
		this.inside = graph.parentModule;
		this.separator = this.inside == null ? null : new app_ui_view_Label(function() {
			return ">";
		},"center",app_ui_core_LengthOrAuto.Px(16),app_ui_core_LengthOrAuto.Px(16),function() {
			return 1.0;
		});
		this.button = new app_ui_view_menu_MenuItem(function() {
			return _gthis.name;
		},function() {
			if(graphWrapper.raw != graph) {
				graphWrapper.op.gotoGraph(graph);
				graphWrapper.doneOperation(app_ui_view_main_graph_history_GraphOperation.Goto);
			}
		},false);
		this.button.textScale = 1.1;
		this.updateName();
	}
	updateName() {
		this.name = this.inside == null ? "root" : this.inside.setting.name;
		let _this = this.button.element.style.size;
		_this.w = app_ui_core_LengthOrAuto.Px(app_ui_view_Font.measure(this.name) * 1.1);
		_this.h = app_ui_core_LengthOrAuto.Px(16);
	}
}
$hxClasses["app.ui.view.main.breadcrumb.BreadcrumbItem"] = app_ui_view_main_breadcrumb_BreadcrumbItem;
app_ui_view_main_breadcrumb_BreadcrumbItem.__name__ = "app.ui.view.main.breadcrumb.BreadcrumbItem";
Object.assign(app_ui_view_main_breadcrumb_BreadcrumbItem.prototype, {
	__class__: app_ui_view_main_breadcrumb_BreadcrumbItem
});
class app_ui_view_main_graph_Click {
	constructor(graph) {
		this.state = app_ui_view_main_graph_ClickState.Idle;
		this.dataToPaste = null;
		this.nodeToCreate = null;
		this.graph = graph;
	}
	reset() {
		this.graph.trail.clear();
		this.state = app_ui_view_main_graph_ClickState.Idle;
	}
	gotoNodeCreationMode(n) {
		this.nodeToCreate = n;
		this.dataToPaste = null;
		this.graph.op.showInfo("Tap to add: " + n.fullName,app_InfoType.Persistent);
	}
	gotoPasteMode(data,verb) {
		this.dataToPaste = data;
		this.nodeToCreate = null;
		this.graph.op.showInfo("Tap to " + verb,app_InfoType.Persistent);
	}
	begin(x,y) {
		this.graph.trail.begin(x,y);
		this.graph.op.closeToolbar();
		if(this.state._hx_index == 0) {
			if(this.nodeToCreate != null) {
				this.state = app_ui_view_main_graph_ClickState.Dragging(new app_ui_view_main_graph_drag_NodeCreationDragHandler(this.graph,this.nodeToCreate,x,y));
			} else if(this.dataToPaste != null) {
				this.state = app_ui_view_main_graph_ClickState.Dragging(new app_ui_view_main_graph_drag_GraphPasteHandler(this.graph,this.dataToPaste,x,y));
			} else {
				this.state = app_ui_view_main_graph_ClickState.ClickOn(this.clickAt(x,y));
			}
		} else {
			throw haxe_Exception.thrown("invalid click");
		}
	}
	clickAt(x,y) {
		let v = this.graph.pickWithCurrentScale(x,y,3 | (4 | 8 | (16 | 32)));
		if(v == null) {
			return app_ui_view_main_graph_ClickTarget.None;
		}
		let _g = v.type;
		switch(_g._hx_index) {
		case 0:
			return app_ui_view_main_graph_ClickTarget.Node(_g.n);
		case 1:
			return app_ui_view_main_graph_ClickTarget.Socket(_g.s);
		case 2:
			return app_ui_view_main_graph_ClickTarget.CableVertex(v);
		}
	}
	move(x,y) {
		let _g = this.state;
		switch(_g._hx_index) {
		case 0:
			throw haxe_Exception.thrown("cannot move before begin");
		case 1:
			let initial = this.graph.trail.firstPos();
			let dx = x - app_ui_view_main_graph_TrailPos.get_x(initial);
			let dy = y - app_ui_view_main_graph_TrailPos.get_y(initial);
			if(Math.sqrt(dx * dx + dy * dy) > app_ui_view_main_graph_ClickSettings.DRAG_BEGIN_THRESHOLD_PX / this.graph.view.data.scale) {
				this.clickToDrag(_g.target,app_ui_view_main_graph_TrailPos.get_x(initial),app_ui_view_main_graph_TrailPos.get_y(initial));
			}
			break;
		case 2:
			_g.handler.move(x,y);
			break;
		case 3:
			this.graph.trail.move(x,y,this.graph.view.data.scale);
			break;
		}
	}
	clickToDrag(target,x,y) {
		switch(target._hx_index) {
		case 0:
			let _g = target.n;
			let nodes = [];
			if(this.graph.selection.nodes.map.h.__keys__[_g.__id__] != null) {
				let a = this.graph.selection.nodes.map.keys();
				while(a.hasNext()) nodes.push(a.next());
			} else {
				if(pot_input_Keyboard.isShiftDown(this.graph.op.getKeyboard())) {
					let a = this.graph.selection.nodes.map.keys();
					while(a.hasNext()) nodes.push(a.next());
				} else {
					let _this = this.graph.selection.nodes;
					_this.map.h = { __keys__ : { }};
					_this.numEntries = 0;
				}
				this.graph.selection.add(_g);
				nodes.push(_g);
			}
			this.state = app_ui_view_main_graph_ClickState.Dragging(new app_ui_view_main_graph_drag_NodeDragHandler(this.graph,nodes,x,y));
			break;
		case 1:
			this.state = app_ui_view_main_graph_ClickState.Dragging(new app_ui_view_main_graph_drag_SocketDragHandler(this.graph,target.s));
			break;
		case 2:
			this.state = app_ui_view_main_graph_ClickState.Dragging(new app_ui_view_main_graph_drag_CableDragHandler(this.graph,target.v));
			break;
		case 3:
			this.state = app_ui_view_main_graph_ClickState.Trailing;
			break;
		}
	}
	end() {
		let _g = this.state;
		switch(_g._hx_index) {
		case 0:
			throw haxe_Exception.thrown("invalid click end event");
		case 1:
			let _g1 = _g.target;
			switch(_g1._hx_index) {
			case 0:
				let _g2 = _g1.n;
				if(pot_input_Keyboard.isShiftDown(this.graph.op.getKeyboard())) {
					if(this.graph.selection.nodes.map.h.__keys__[_g2.__id__] != null) {
						this.graph.selection.remove(_g2);
					} else {
						this.graph.selection.add(_g2);
					}
				} else if(this.graph.selection.count() == 1 && this.graph.selection.nodes.map.h.__keys__[_g2.__id__] != null) {
					this.graph.interact(_g2);
				} else {
					let _this = this.graph.selection.nodes;
					_this.map.h = { __keys__ : { }};
					_this.numEntries = 0;
					this.graph.selection.add(_g2);
				}
				break;
			case 1:
				break;
			case 2:
				break;
			case 3:
				let _this = this.graph.selection.nodes;
				_this.map.h = { __keys__ : { }};
				_this.numEntries = 0;
				break;
			}
			break;
		case 2:
			_g.handler.done();
			this.nodeToCreate = null;
			this.dataToPaste = null;
			this.graph.op.hideInfo();
			break;
		case 3:
			if(this.graph.trail.isLasso) {
				this.graph.trail.selectByLasso(this.graph.selection,this.graph.raw.nodes);
			} else {
				let _this = this.graph.trail.getSlashedVertices(this.graph.raw.nodes,this.graph.raw.vertices);
				let f = ($_=this.graph,$bind($_,$_.canDestroyVertex));
				let _g = [];
				let _g1 = 0;
				while(_g1 < _this.length) {
					let v = _this[_g1];
					++_g1;
					if(f(v)) {
						_g.push(v);
					}
				}
				if(this.graph.destroyVertices(_g,true)) {
					this.graph.doneOperation(app_ui_view_main_graph_history_GraphOperation.Remove);
				}
			}
			break;
		}
		this.reset();
	}
	cancel() {
		let _g = this.state;
		switch(_g._hx_index) {
		case 0:
			break;
		case 1:
			break;
		case 2:
			_g.handler.cancel();
			break;
		case 3:
			break;
		}
		this.reset();
	}
}
$hxClasses["app.ui.view.main.graph.Click"] = app_ui_view_main_graph_Click;
app_ui_view_main_graph_Click.__name__ = "app.ui.view.main.graph.Click";
Object.assign(app_ui_view_main_graph_Click.prototype, {
	__class__: app_ui_view_main_graph_Click
});
class app_ui_view_main_graph_ClickController {
	constructor(graph) {
		this.graph = graph;
		this.click = new app_ui_view_main_graph_Click(graph);
		this.clicking = false;
	}
	onClickBegin(x,y) {
		if(this.clicking) {
			throw haxe_Exception.thrown("double begin call");
		}
		this.clicking = true;
		let tmp = this.click;
		let _this = this.graph.view;
		let tmp1 = (x - _this.sizePeek.getW() * 0.5) / _this.data.scale + _this.data.centerX;
		let _this1 = this.graph.view;
		tmp.begin(tmp1,(y - _this1.sizePeek.getH() * 0.5) / _this1.data.scale + _this1.data.centerY);
	}
	onClickMove(x,y) {
		if(this.clicking) {
			let tmp = this.click;
			let _this = this.graph.view;
			let tmp1 = (x - _this.sizePeek.getW() * 0.5) / _this.data.scale + _this.data.centerX;
			let _this1 = this.graph.view;
			tmp.move(tmp1,(y - _this1.sizePeek.getH() * 0.5) / _this1.data.scale + _this1.data.centerY);
		}
	}
	onClickCancel() {
		if(!this.clicking) {
			throw haxe_Exception.thrown("cannot cancel");
		}
		this.clicking = false;
		this.click.cancel();
	}
	onClickEnd() {
		if(!this.clicking) {
			throw haxe_Exception.thrown("cannot end");
		}
		this.clicking = false;
		this.click.end();
	}
	onPinchBegin(x1,y1,x2,y2) {
	}
	onPinchMove(x1,y1,x2,y2) {
	}
	onPinchEnd() {
	}
	onPanBegin(x,y) {
	}
	onPanMove(x,y) {
	}
	onPanEnd() {
	}
	onWheel(x,y,amount) {
	}
}
$hxClasses["app.ui.view.main.graph.ClickController"] = app_ui_view_main_graph_ClickController;
app_ui_view_main_graph_ClickController.__name__ = "app.ui.view.main.graph.ClickController";
app_ui_view_main_graph_ClickController.__interfaces__ = [app_ui_view_main_input_InputControllerListener];
Object.assign(app_ui_view_main_graph_ClickController.prototype, {
	__class__: app_ui_view_main_graph_ClickController
});
class app_ui_view_main_graph_ClickSettings {
	static setForDesktops() {
		app_ui_view_main_graph_ClickSettings.DRAG_BEGIN_THRESHOLD_PX = 6;
		app_ui_view_main_graph_ClickSettings.TRAIL_INTERVAL_PX = 6;
		app_ui_view_main_graph_ClickSettings.PICK_RADIUS_PX = 6;
	}
	static setForMobiles() {
		app_ui_view_main_graph_ClickSettings.DRAG_BEGIN_THRESHOLD_PX = 10;
		app_ui_view_main_graph_ClickSettings.TRAIL_INTERVAL_PX = 10;
		app_ui_view_main_graph_ClickSettings.PICK_RADIUS_PX = 10;
	}
}
$hxClasses["app.ui.view.main.graph.ClickSettings"] = app_ui_view_main_graph_ClickSettings;
app_ui_view_main_graph_ClickSettings.__name__ = "app.ui.view.main.graph.ClickSettings";
var app_ui_view_main_graph_ClickState = $hxEnums["app.ui.view.main.graph.ClickState"] = { __ename__ : "app.ui.view.main.graph.ClickState", __constructs__ : ["Idle","ClickOn","Dragging","Trailing"]
	,Idle: {_hx_index:0,__enum__:"app.ui.view.main.graph.ClickState",toString:$estr}
	,ClickOn: ($_=function(target) { return {_hx_index:1,target:target,__enum__:"app.ui.view.main.graph.ClickState",toString:$estr}; },$_.__params__ = ["target"],$_)
	,Dragging: ($_=function(handler) { return {_hx_index:2,handler:handler,__enum__:"app.ui.view.main.graph.ClickState",toString:$estr}; },$_.__params__ = ["handler"],$_)
	,Trailing: {_hx_index:3,__enum__:"app.ui.view.main.graph.ClickState",toString:$estr}
};
var app_ui_view_main_graph_ClickTarget = $hxEnums["app.ui.view.main.graph.ClickTarget"] = { __ename__ : "app.ui.view.main.graph.ClickTarget", __constructs__ : ["Node","Socket","CableVertex","None"]
	,Node: ($_=function(n) { return {_hx_index:0,n:n,__enum__:"app.ui.view.main.graph.ClickTarget",toString:$estr}; },$_.__params__ = ["n"],$_)
	,Socket: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"app.ui.view.main.graph.ClickTarget",toString:$estr}; },$_.__params__ = ["s"],$_)
	,CableVertex: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"app.ui.view.main.graph.ClickTarget",toString:$estr}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:3,__enum__:"app.ui.view.main.graph.ClickTarget",toString:$estr}
};
var app_ui_view_main_graph_ConnectableCheckResult = $hxEnums["app.ui.view.main.graph.ConnectableCheckResult"] = { __ename__ : "app.ui.view.main.graph.ConnectableCheckResult", __constructs__ : ["Ignore","TryNode","TrySocket","TryCable"]
	,Ignore: {_hx_index:0,__enum__:"app.ui.view.main.graph.ConnectableCheckResult",toString:$estr}
	,TryNode: ($_=function(n,ok) { return {_hx_index:1,n:n,ok:ok,__enum__:"app.ui.view.main.graph.ConnectableCheckResult",toString:$estr}; },$_.__params__ = ["n","ok"],$_)
	,TrySocket: ($_=function(s,ok) { return {_hx_index:2,s:s,ok:ok,__enum__:"app.ui.view.main.graph.ConnectableCheckResult",toString:$estr}; },$_.__params__ = ["s","ok"],$_)
	,TryCable: ($_=function(v,ok) { return {_hx_index:3,v:v,ok:ok,__enum__:"app.ui.view.main.graph.ConnectableCheckResult",toString:$estr}; },$_.__params__ = ["v","ok"],$_)
};
class app_ui_view_main_graph_ConnectableCheckResultTools {
	static ok(res) {
		switch(res._hx_index) {
		case 0:
			return false;
		case 1:
			return res.ok;
		case 2:
			return res.ok;
		case 3:
			return res.ok;
		}
	}
	static vertex(res) {
		switch(res._hx_index) {
		case 0:
			return null;
		case 1:
			return res.n.phys.vertex;
		case 2:
			return res.s.phys.vertex;
		case 3:
			return res.v;
		}
	}
}
$hxClasses["app.ui.view.main.graph.ConnectableCheckResultTools"] = app_ui_view_main_graph_ConnectableCheckResultTools;
app_ui_view_main_graph_ConnectableCheckResultTools.__name__ = "app.ui.view.main.graph.ConnectableCheckResultTools";
class app_ui_view_main_graph_ConnectableChecker {
	constructor(graph) {
		this.graph = graph;
	}
	check(from,to) {
		if(from == null || to == null) {
			return app_ui_view_main_graph_ConnectableCheckResult.Ignore;
		}
		let rel = this.graph.relation(from,to);
		if(rel == app_ui_view_main_graph_VertexRelation.Same) {
			return app_ui_view_main_graph_ConnectableCheckResult.Ignore;
		}
		let canConnect = rel == app_ui_view_main_graph_VertexRelation.Connectable;
		let _g = to.type;
		switch(_g._hx_index) {
		case 0:
			return app_ui_view_main_graph_ConnectableCheckResult.TryNode(_g.n,canConnect);
		case 1:
			return app_ui_view_main_graph_ConnectableCheckResult.TrySocket(_g.s,canConnect);
		case 2:
			return app_ui_view_main_graph_ConnectableCheckResult.TryCable(to,canConnect);
		}
	}
}
$hxClasses["app.ui.view.main.graph.ConnectableChecker"] = app_ui_view_main_graph_ConnectableChecker;
app_ui_view_main_graph_ConnectableChecker.__name__ = "app.ui.view.main.graph.ConnectableChecker";
Object.assign(app_ui_view_main_graph_ConnectableChecker.prototype, {
	__class__: app_ui_view_main_graph_ConnectableChecker
});
class app_ui_view_main_graph_ConnectionShadow {
	constructor(v1,v2,ok) {
		this.v1 = v1;
		this.v2 = v2;
		this.ok = ok;
	}
}
$hxClasses["app.ui.view.main.graph.ConnectionShadow"] = app_ui_view_main_graph_ConnectionShadow;
app_ui_view_main_graph_ConnectionShadow.__name__ = "app.ui.view.main.graph.ConnectionShadow";
Object.assign(app_ui_view_main_graph_ConnectionShadow.prototype, {
	__class__: app_ui_view_main_graph_ConnectionShadow
});
class app_ui_view_main_graph_GraphWrapper {
	constructor(graph,view,op) {
		this.viewDataMap = new haxe_ds_IntMap();
		this.connectionShadows = [];
		this.nodeShadows = [];
		this.view = view;
		this.op = op;
		this.raw = graph;
		this.selection = new app_ui_view_main_graph_Selection(this);
		this.socketSelection = new common_Set();
		this.trail = new app_ui_view_main_graph_Trail();
		this.connectableChecker = new app_ui_view_main_graph_ConnectableChecker(this);
		this.history = new app_ui_view_main_graph_history_GraphHistory();
	}
	interact(n) {
		if(n.type._hx_index == 3) {
			let _g = $bind(this,this.doneOperation);
			let op = app_ui_view_main_graph_history_GraphOperation.NodeEdit;
			this.op.openMenu(app_ui_view_menu_nodeedit_NodeEditMenu.createNameEditDialogue(this,n,function() {
				_g(op);
			}));
			return;
		}
		let _g = n.setting.role;
		switch(_g._hx_index) {
		case 1:
			this.op.openMenu(new app_ui_view_menu_nodeedit_NodeEditMenu(n,this));
			break;
		case 4:
			this.op.openMenu(new app_ui_view_menu_nodeedit_NodeEditMenu(n,this));
			break;
		case 6:
			this.op.openMenu(new app_ui_view_menu_nodeedit_NodeEditMenu(n,this));
			break;
		case 7:
			this.op.openMenu(new app_ui_view_menu_nodeedit_NodeEditMenu(n,this));
			break;
		case 8:
			switch(_g.type) {
			case 0:
				n.setting.role = synth_NodeRole.BinOp(1);
				n.setting.name = "×";
				break;
			case 1:
				n.setting.role = synth_NodeRole.BinOp(0);
				n.setting.name = "+";
				break;
			}
			n.notifyUpdate();
			break;
		case 2:case 9:
			break;
		case 0:case 3:case 5:case 10:
			this.op.openMenu(new app_ui_view_menu_nodeedit_NodeEditMenu(n,this));
			break;
		}
	}
	gotoGraph(graph) {
		let _this = this.selection.nodes;
		_this.map.h = { __keys__ : { }};
		_this.numEntries = 0;
		this.saveView();
		this.raw = graph;
		this.loadView();
	}
	undo() {
		this.loadSnapshot(this.history.undo());
	}
	redo() {
		this.loadSnapshot(this.history.redo());
	}
	canUndo() {
		return this.history.canUndo();
	}
	canRedo() {
		return this.history.canRedo();
	}
	addUndoPoint() {
		this.history.addSnapshot(this.takeSnapshot());
		console.log("src/app/ui/view/main/graph/GraphWrapper.hx:99:","snapshot added.");
	}
	takeSnapshot() {
		return new app_ui_view_main_graph_history_HistoryPoint(this.raw.getRoot().serialize(graph_serial_NodeFilter.ALL,true),this.raw.id);
	}
	loadSnapshot(snapshot) {
		this.op.loadAsRoot(snapshot.data,false);
		let location = graph_Graph.searchGraphById(this.raw,snapshot.atGraphId);
		if(location == null) {
			throw haxe_Exception.thrown("cannot find graph by id: " + snapshot.atGraphId);
		}
		this.op.gotoGraph(location);
	}
	saveView() {
		let this1 = this.viewDataMap;
		let k = this.raw.id;
		let v = this.view.getData();
		this1.h[k] = v;
	}
	loadView() {
		let data = this.viewDataMap.h[this.raw.id];
		if(data == null) {
			data = new render_ViewData();
		}
		this.view.setData(data);
	}
	addNodeShadow(ns) {
		this.nodeShadows.push(ns);
	}
	clearNodeShadows() {
		this.nodeShadows.length = 0;
	}
	addConnectionShadow(cs) {
		this.connectionShadows.push(cs);
	}
	clearConnectionShadows() {
		this.connectionShadows.length = 0;
	}
	pickWithCurrentScale(x,y,flag) {
		return this.raw.pick(x,y,flag,app_ui_view_main_graph_ClickSettings.PICK_RADIUS_PX / this.view.data.scale);
	}
	relation(v1,v2,flipped) {
		if(flipped == null) {
			flipped = false;
		}
		let lowLevelCheck = (flipped ? this.raw.isConnectable(v2,v1) : this.raw.isConnectable(v1,v2)) ? app_ui_view_main_graph_VertexRelation.Connectable : app_ui_view_main_graph_VertexRelation.Unconnectable;
		let _g = v1.type;
		switch(_g._hx_index) {
		case 0:
			let _g1 = _g.n;
			let _g2 = v2.type;
			switch(_g2._hx_index) {
			case 0:
				let _g3 = _g2.n;
				if(_g1 == _g3) {
					return app_ui_view_main_graph_VertexRelation.Same;
				}
				let _g4 = 0;
				let _g5 = _g1.sockets;
				while(_g4 < _g5.length) {
					let s = _g5[_g4];
					++_g4;
					if(s.type._hx_index == 0) {
						let _g = 0;
						let _g1 = s.connections;
						while(_g < _g1.length) {
							let c = _g1[_g];
							++_g;
							if(c.other(s).type._hx_index == 0) {
								if(_g3.sockets.indexOf(c.other(s)) != -1) {
									return app_ui_view_main_graph_VertexRelation.Unconnectable;
								}
							}
						}
					}
				}
				return lowLevelCheck;
			case 1:
				let _g6 = _g2.s;
				if(_g6.type._hx_index == 0) {
					return app_ui_view_main_graph_VertexRelation.Unconnectable;
				}
				if(_g1.sockets.indexOf(_g6) != -1) {
					return app_ui_view_main_graph_VertexRelation.Same;
				}
				let _g7 = 0;
				let _g8 = _g1.sockets;
				while(_g7 < _g8.length) {
					let s = _g8[_g7];
					++_g7;
					if(s.type._hx_index == 0) {
						let _g = 0;
						let _g1 = s.connections;
						while(_g < _g1.length) if(_g1[_g++].other(s) == _g6) {
							return app_ui_view_main_graph_VertexRelation.Unconnectable;
						}
					}
				}
				return lowLevelCheck;
			case 2:
				let _g9 = 0;
				let _g10 = _g1.sockets;
				while(_g9 < _g10.length) if(this.raw.isOnCableFrom(v2,_g10[_g9++].phys.vertex)) {
					return app_ui_view_main_graph_VertexRelation.Same;
				}
				return lowLevelCheck;
			}
			break;
		case 1:
			let _g11 = _g.s;
			if(_g11.type._hx_index == 0) {
				return app_ui_view_main_graph_VertexRelation.Unconnectable;
			}
			let _g12 = v2.type;
			switch(_g12._hx_index) {
			case 0:
				return this.relation(v2,v1,true);
			case 1:
				if(_g11.type._hx_index == 0) {
					return app_ui_view_main_graph_VertexRelation.Unconnectable;
				}
				if(_g11.parent == _g12.s.parent) {
					return app_ui_view_main_graph_VertexRelation.Same;
				} else {
					return lowLevelCheck;
				}
				break;
			case 2:
				if(this.raw.isOnCableFrom(v2,v1)) {
					return app_ui_view_main_graph_VertexRelation.Same;
				} else {
					return lowLevelCheck;
				}
				break;
			}
			break;
		case 2:
			switch(v2.type._hx_index) {
			case 0:
				return this.relation(v2,v1,true);
			case 1:
				return this.relation(v2,v1,true);
			case 2:
				if(this.raw.isOnCableFrom(v1,v2)) {
					return app_ui_view_main_graph_VertexRelation.Same;
				} else {
					return lowLevelCheck;
				}
				break;
			}
			break;
		}
	}
	createModuleWithCurrentSelection() {
		let nodes = [];
		let ng = false;
		let _gthis = this;
		let a = this.selection.nodes.map.keys();
		while(a.hasNext()) {
			let a1 = a.next();
			if(a1.setting.role == synth_NodeRole.Destination) {
				_gthis.op.showInfo("Cannot include the output node.",app_InfoType.Warning);
				ng = true;
			} else if(a1.type._hx_index == 3) {
				_gthis.op.showInfo("Cannot include boundary nodes.",app_InfoType.Warning);
				ng = true;
			} else {
				nodes.push(a1);
			}
		}
		if(ng) {
			return false;
		}
		if(nodes.length < 2) {
			this.op.showInfo("Select two or more nodes.",app_InfoType.Warning);
			return false;
		}
		this.raw.createModule(nodes);
		return true;
	}
	decomposeModules(modules) {
		let _g = 0;
		while(_g < modules.length) this.raw.decomposeModule(modules[_g++]);
	}
	moveNodes(nodes,dx,dy) {
		let _g = 0;
		while(_g < nodes.length) {
			let node = nodes[_g];
			++_g;
			let p = node.phys.vertex.point;
			p.x += dx;
			p.y += dy;
			let _g1 = 0;
			let _g2 = node.sockets;
			while(_g1 < _g2.length) {
				let s = _g2[_g1];
				++_g1;
				s.phys.vertex.point.x += dx;
				s.phys.vertex.point.y += dy;
				if(graph_SocketTypeTool.io(s.type) != true) {
					continue;
				}
				let _g = 0;
				let _g3 = s.connections;
				while(_g < _g3.length) {
					let conn = _g3[_g];
					++_g;
					if(nodes.includes(conn.to.parent)) {
						let _g = 0;
						let _g1 = conn.getIntermediateVertices();
						while(_g < _g1.length) {
							let v = _g1[_g];
							++_g;
							v.point.vx = 0;
							v.point.vy = 0;
							v.point.x += dx * 0.75;
							v.point.y += dy * 0.75;
						}
					}
				}
			}
		}
	}
	doneOperation(op) {
		console.log("src/app/ui/view/main/graph/GraphWrapper.hx:270:","operation done: " + $hxEnums[op.__enum__].__constructs__[op._hx_index]);
		this.lastOperation = op;
		this.addUndoPoint();
	}
	canDestroyVertex(v) {
		let _g = v.type;
		switch(_g._hx_index) {
		case 0:
			return this.isEditableNode(_g.n);
		case 1:
			return false;
		case 2:
			return true;
		}
	}
	destroyVertices(vs,vibrate) {
		if(vs.length < 1) {
			return false;
		}
		let _g = 0;
		while(_g < vs.length) {
			let v = vs[_g];
			++_g;
			if(!this.canDestroyVertex(v)) {
				throw haxe_Exception.thrown("cannot destroy by vertex");
			}
			if(vibrate) {
				v.vibrate(true);
			}
			let _g1 = v.type;
			switch(_g1._hx_index) {
			case 0:
				let _g2 = _g1.n;
				this.raw.destroyNode(_g2);
				this.selection.remove(_g2);
				break;
			case 1:
				throw haxe_Exception.thrown("cannot destroy socket through this method");
			case 2:
				this.raw.destroyVertex(v);
				break;
			}
		}
		return true;
	}
	isEditableNode(node) {
		if(node.setting.role._hx_index == 2) {
			return false;
		}
		switch(node.type._hx_index) {
		case 0:
			return true;
		case 1:
			return true;
		case 2:
			return true;
		case 3:
			return false;
		}
	}
	canDestroyNode(node) {
		return this.isEditableNode(node);
	}
	destroyNodes(nodes) {
		if(nodes.length < 1) {
			return false;
		}
		let _g = 0;
		while(_g < nodes.length) {
			let n = nodes[_g];
			++_g;
			if(!this.isEditableNode(n)) {
				throw haxe_Exception.thrown("cannot destroy the node through this method");
			}
			this.raw.destroyNode(n);
		}
		return true;
	}
	static connectVerticesMakingSockets(g,src,dst) {
		let srcV;
		let _g = src.type;
		switch(_g._hx_index) {
		case 0:
			let s1 = _g.n.createSocket(graph_SocketType.Normal(true));
			s1.phys.lookAt(dst.point.x,dst.point.y);
			srcV = s1.phys.vertex;
			break;
		case 1:
			srcV = _g.s.phys.vertex;
			break;
		case 2:
			let n1 = app_NodeList.DUPL.create(g,src.point.x,src.point.y,false);
			g.insertNode(src,n1);
			let sp = n1.createSocket(graph_SocketType.Normal(true)).phys;
			sp.lookAt(dst.point.x,dst.point.y);
			srcV = sp.vertex;
			break;
		}
		let dstV;
		let _g1 = dst.type;
		switch(_g1._hx_index) {
		case 0:
			let s2 = _g1.n.createSocket(graph_SocketType.Normal(false));
			s2.phys.lookAt(srcV.point.x,srcV.point.y);
			dstV = s2.phys.vertex;
			break;
		case 1:
			dstV = _g1.s.phys.vertex;
			break;
		case 2:
			let _g2 = src.type;
			let n2;
			if(_g2._hx_index == 0) {
				switch(_g2.n.setting.role._hx_index) {
				case 6:
					n2 = app_NodeList.MULT;
					break;
				case 7:
					n2 = app_NodeList.MULT;
					break;
				default:
					n2 = app_NodeList.ADD;
				}
			} else {
				n2 = app_NodeList.ADD;
			}
			let n21 = n2.create(g,dst.point.x,dst.point.y,false);
			g.insertNode(dst,n21);
			let sp1 = n21.createSocket(graph_SocketType.Normal(false)).phys;
			sp1.lookAt(srcV.point.x,srcV.point.y);
			dstV = sp1.vertex;
			break;
		}
		g.connectVertices(srcV,dstV);
	}
}
$hxClasses["app.ui.view.main.graph.GraphWrapper"] = app_ui_view_main_graph_GraphWrapper;
app_ui_view_main_graph_GraphWrapper.__name__ = "app.ui.view.main.graph.GraphWrapper";
Object.assign(app_ui_view_main_graph_GraphWrapper.prototype, {
	__class__: app_ui_view_main_graph_GraphWrapper
});
var app_ui_view_main_graph_LassoSweepPoint = $hxEnums["app.ui.view.main.graph.LassoSweepPoint"] = { __ename__ : "app.ui.view.main.graph.LassoSweepPoint", __constructs__ : ["LineBegin","LineEnd","NodeCenter"]
	,LineBegin: ($_=function(index,vertex) { return {_hx_index:0,index:index,vertex:vertex,__enum__:"app.ui.view.main.graph.LassoSweepPoint",toString:$estr}; },$_.__params__ = ["index","vertex"],$_)
	,LineEnd: ($_=function(index,vertex) { return {_hx_index:1,index:index,vertex:vertex,__enum__:"app.ui.view.main.graph.LassoSweepPoint",toString:$estr}; },$_.__params__ = ["index","vertex"],$_)
	,NodeCenter: ($_=function(index,x,y) { return {_hx_index:2,index:index,x:x,y:y,__enum__:"app.ui.view.main.graph.LassoSweepPoint",toString:$estr}; },$_.__params__ = ["index","x","y"],$_)
};
class graph_NodeViewData {
}
$hxClasses["graph.NodeViewData"] = graph_NodeViewData;
graph_NodeViewData.__name__ = "graph.NodeViewData";
graph_NodeViewData.__isInterface__ = true;
Object.assign(graph_NodeViewData.prototype, {
	__class__: graph_NodeViewData
});
class app_ui_view_main_graph_NodeShadow {
	constructor(internal) {
		this.internal = internal;
		this.x = internal.getX();
		this.y = internal.getY();
		this.hidden = false;
	}
	getX() {
		return this.x;
	}
	getY() {
		return this.y;
	}
	getRadius() {
		return this.internal.getRadius();
	}
	getText() {
		return this.internal.getText();
	}
	getRole() {
		return this.internal.getRole();
	}
	getType() {
		return this.internal.getType();
	}
}
$hxClasses["app.ui.view.main.graph.NodeShadow"] = app_ui_view_main_graph_NodeShadow;
app_ui_view_main_graph_NodeShadow.__name__ = "app.ui.view.main.graph.NodeShadow";
app_ui_view_main_graph_NodeShadow.__interfaces__ = [graph_NodeViewData];
Object.assign(app_ui_view_main_graph_NodeShadow.prototype, {
	__class__: app_ui_view_main_graph_NodeShadow
});
class app_ui_view_main_graph_Selection {
	constructor(graph) {
		this.graph = graph;
		this.nodes = new common_Set();
	}
	createSubgraphData(editableOnly) {
		let _gthis = this;
		return this.graph.raw.serialize(new graph_serial_NodeFilter(function(n) {
			if(!editableOnly || _gthis.graph.isEditableNode(n)) {
				return _gthis.nodes.map.h.__keys__[n.__id__] != null;
			} else {
				return false;
			}
		}),false);
	}
	toArray() {
		return this.nodes.toArray();
	}
	forEach(f) {
		let a = this.nodes.map.keys();
		while(a.hasNext()) f(a.next());
	}
	add(a) {
		return this.nodes.add(a);
	}
	remove(a) {
		return this.nodes.remove(a);
	}
	count() {
		return this.nodes.count();
	}
	clear() {
		let _this = this.nodes;
		_this.map.h = { __keys__ : { }};
		_this.numEntries = 0;
	}
	contains(a) {
		return this.nodes.map.h.__keys__[a.__id__] != null;
	}
}
$hxClasses["app.ui.view.main.graph.Selection"] = app_ui_view_main_graph_Selection;
app_ui_view_main_graph_Selection.__name__ = "app.ui.view.main.graph.Selection";
Object.assign(app_ui_view_main_graph_Selection.prototype, {
	__class__: app_ui_view_main_graph_Selection
});
class app_ui_view_main_graph_Trail {
	constructor() {
		this.isLasso = false;
		this.poss = [];
	}
	clear() {
		this.poss.length = 0;
		this.isLasso = false;
	}
	begin(x,y) {
		this.clear();
		this.poss.push([x,y]);
	}
	move(x,y,currentViewScale) {
		this.assertNonEmpty();
		if(this.poss.length == 1) {
			this.poss.push([x,y]);
			return;
		}
		this.poss.pop();
		let last = this.lastPos();
		this.poss.push([x,y]);
		if(app_ui_view_main_graph_TrailPos.dist(last,this.lastPos()) * currentViewScale > app_ui_view_main_graph_ClickSettings.TRAIL_INTERVAL_PX) {
			this.poss.push([x,y]);
		}
		this.isLasso = false;
		if(this.poss.length >= app_ui_view_main_graph_ClickSettings.LASSO_LEAST_VERTEX_COUNT) {
			let first = this.firstPos();
			let maxDist = 0.0;
			let _g = 0;
			let _g1 = this.poss;
			while(_g < _g1.length) {
				let dist = app_ui_view_main_graph_TrailPos.dist(_g1[_g++],first);
				if(dist > maxDist) {
					maxDist = dist;
				}
			}
			if(app_ui_view_main_graph_TrailPos.dist(first,this.lastPos()) < maxDist * app_ui_view_main_graph_ClickSettings.LASSO_CLOSE_THRESHOLD_RATIO) {
				this.isLasso = true;
			}
		}
	}
	firstPos() {
		this.assertNonEmpty();
		return this.poss[0];
	}
	lastPos() {
		this.assertNonEmpty();
		return this.poss[this.poss.length - 1];
	}
	forEachInternalPos(f) {
		this.assertNonEmpty();
		let _g = 1;
		let _g1 = this.poss.length - 1;
		while(_g < _g1) f(this.poss[_g++]);
	}
	getSlashedVertices(nodes,vertices) {
		let res = [];
		let _g = 0;
		while(_g < vertices.length) {
			let v = vertices[_g];
			++_g;
			let radius;
			let _g1 = v.type;
			switch(_g1._hx_index) {
			case 0:
				radius = _g1.n.phys.radius * 0.6;
				break;
			case 1:
				radius = -1;
				break;
			case 2:
				radius = 2.4;
				break;
			}
			if(radius < 0) {
				continue;
			}
			let cut = false;
			let px = v.point.x;
			let py = v.point.y;
			let _g2 = 1;
			let _g3 = this.poss.length;
			while(_g2 < _g3) {
				let i = _g2++;
				let v1 = this.poss[i - 1];
				let v2 = this.poss[i];
				let x1 = app_ui_view_main_graph_TrailPos.get_x(v1);
				let y1 = app_ui_view_main_graph_TrailPos.get_y(v1);
				let ax = px - x1;
				let ay = py - y1;
				let dx = app_ui_view_main_graph_TrailPos.get_x(v2) - x1;
				let dy = app_ui_view_main_graph_TrailPos.get_y(v2) - y1;
				let dd = dx * dx + dy * dy;
				if(dd > 1e-6) {
					let t = (ax * dx + ay * dy) / dd;
					if(t < 0) {
						t = 0;
					} else if(t > 1) {
						t = 1;
					}
					ax = px - (x1 + t * dx);
					ay = py - (y1 + t * dy);
				}
				if(Math.sqrt(ax * ax + ay * ay) < radius) {
					cut = true;
					break;
				}
			}
			if(cut) {
				res.push(v);
			}
		}
		return res;
	}
	segmentPointDist(x1,y1,x2,y2,px,py) {
		let ax = px - x1;
		let ay = py - y1;
		let dx = x2 - x1;
		let dy = y2 - y1;
		let dd = dx * dx + dy * dy;
		if(dd > 1e-6) {
			let t = (ax * dx + ay * dy) / dd;
			if(t < 0) {
				t = 0;
			} else if(t > 1) {
				t = 1;
			}
			ax = px - (x1 + t * dx);
			ay = py - (y1 + t * dy);
		}
		return Math.sqrt(ax * ax + ay * ay);
	}
	selectByLasso(selection,nodes) {
		if(!this.isLasso) {
			throw haxe_Exception.thrown("not lasso");
		}
		let vertices = this.poss.slice();
		let numV = vertices.length;
		let edges = [];
		let points = [];
		let _g = 0;
		let _g1 = vertices.length;
		while(_g < _g1) {
			let i = _g++;
			let i1 = i;
			let i2 = (i + 1) % numV;
			if(app_ui_view_main_graph_TrailPos.get_y(vertices[i]) > app_ui_view_main_graph_TrailPos.get_y(vertices[i2])) {
				i1 = i2;
				i2 = i;
			}
			edges.push([i1,i2]);
			points.push(app_ui_view_main_graph_LassoSweepPoint.LineBegin(i,i1));
			points.push(app_ui_view_main_graph_LassoSweepPoint.LineEnd(i,i2));
		}
		let _g2 = 0;
		let _g3 = nodes.length;
		while(_g2 < _g3) {
			let i = _g2++;
			let n = nodes[i];
			points.push(app_ui_view_main_graph_LassoSweepPoint.NodeCenter(i,n.phys.vertex.point.x,n.phys.vertex.point.y));
		}
		haxe_ds_ArraySort.sort(points,function(p1,p2) {
			let y1;
			switch(p1._hx_index) {
			case 0:
				y1 = app_ui_view_main_graph_TrailPos.get_y(vertices[p1.vertex]);
				break;
			case 1:
				y1 = app_ui_view_main_graph_TrailPos.get_y(vertices[p1.vertex]);
				break;
			case 2:
				y1 = p1.y;
				break;
			}
			let y2;
			switch(p2._hx_index) {
			case 0:
				y2 = app_ui_view_main_graph_TrailPos.get_y(vertices[p2.vertex]);
				break;
			case 1:
				y2 = app_ui_view_main_graph_TrailPos.get_y(vertices[p2.vertex]);
				break;
			case 2:
				y2 = p2.y;
				break;
			}
			if(y1 < y2) {
				return -1;
			} else if(y1 > y2) {
				return 1;
			} else {
				return 0;
			}
		});
		let edgeIndices = [];
		let _g4 = [];
		let _g5 = 0;
		while(_g5 < nodes.length) {
			++_g5;
			_g4.push(0);
		}
		let _g6 = 0;
		while(_g6 < points.length) {
			let p = points[_g6];
			++_g6;
			switch(p._hx_index) {
			case 0:
				edgeIndices.push(p.index);
				break;
			case 1:
				HxOverrides.remove(edgeIndices,p.index);
				break;
			case 2:
				let _g = p.y;
				let _g1 = p.x;
				let _g2 = p.index;
				let _g3 = 0;
				while(_g3 < edgeIndices.length) {
					let edge = edgeIndices[_g3];
					++_g3;
					let v1 = vertices[edges[edge][0]];
					let v2 = vertices[edges[edge][1]];
					if(app_ui_view_main_graph_TrailPos.get_y(v1) != app_ui_view_main_graph_TrailPos.get_y(v2)) {
						if(app_ui_view_main_graph_TrailPos.get_x(v1) + (app_ui_view_main_graph_TrailPos.get_x(v2) - app_ui_view_main_graph_TrailPos.get_x(v1)) * (_g - app_ui_view_main_graph_TrailPos.get_y(v1)) / (app_ui_view_main_graph_TrailPos.get_y(v2) - app_ui_view_main_graph_TrailPos.get_y(v1)) > _g1) {
							_g4[_g2]++;
						}
					}
				}
				break;
			}
		}
		let _this = selection.nodes;
		_this.map.h = { __keys__ : { }};
		_this.numEntries = 0;
		let _g7 = 0;
		let _g8 = _g4.length;
		while(_g7 < _g8) {
			let i = _g7++;
			if(_g4[i] % 2 == 1) {
				selection.add(nodes[i]);
			}
		}
	}
	assertNonEmpty() {
		if(this.poss.length == 0) {
			throw haxe_Exception.thrown("trail is empty");
		}
	}
}
$hxClasses["app.ui.view.main.graph.Trail"] = app_ui_view_main_graph_Trail;
app_ui_view_main_graph_Trail.__name__ = "app.ui.view.main.graph.Trail";
Object.assign(app_ui_view_main_graph_Trail.prototype, {
	__class__: app_ui_view_main_graph_Trail
});
class app_ui_view_main_graph_TrailPos {
	static get_x(this1) {
		return this1[0];
	}
	static get_y(this1) {
		return this1[1];
	}
	static dist(this1,pos) {
		let dx = app_ui_view_main_graph_TrailPos.get_x(this1) - app_ui_view_main_graph_TrailPos.get_x(pos);
		let dy = app_ui_view_main_graph_TrailPos.get_y(this1) - app_ui_view_main_graph_TrailPos.get_y(pos);
		return Math.sqrt(dx * dx + dy * dy);
	}
}
var app_ui_view_main_graph_VertexRelation = $hxEnums["app.ui.view.main.graph.VertexRelation"] = { __ename__ : "app.ui.view.main.graph.VertexRelation", __constructs__ : ["Same","Unconnectable","Connectable"]
	,Same: {_hx_index:0,__enum__:"app.ui.view.main.graph.VertexRelation",toString:$estr}
	,Unconnectable: {_hx_index:1,__enum__:"app.ui.view.main.graph.VertexRelation",toString:$estr}
	,Connectable: {_hx_index:2,__enum__:"app.ui.view.main.graph.VertexRelation",toString:$estr}
};
class app_ui_view_main_graph_drag_DragHandler {
}
$hxClasses["app.ui.view.main.graph.drag.DragHandler"] = app_ui_view_main_graph_drag_DragHandler;
app_ui_view_main_graph_drag_DragHandler.__name__ = "app.ui.view.main.graph.drag.DragHandler";
app_ui_view_main_graph_drag_DragHandler.__isInterface__ = true;
Object.assign(app_ui_view_main_graph_drag_DragHandler.prototype, {
	__class__: app_ui_view_main_graph_drag_DragHandler
});
class app_ui_view_main_graph_drag_CableDragHandler {
	constructor(graph,vertex) {
		this.graph = graph;
		this.conn = new app_ui_view_main_graph_drag_VertexConnector(graph,vertex);
	}
	move(x,y) {
		this.conn.move(x,y);
	}
	done() {
		this.conn.done();
		if(this.conn.connected) {
			this.graph.doneOperation(app_ui_view_main_graph_history_GraphOperation.Add);
		}
	}
	cancel() {
		this.conn.cancel();
	}
}
$hxClasses["app.ui.view.main.graph.drag.CableDragHandler"] = app_ui_view_main_graph_drag_CableDragHandler;
app_ui_view_main_graph_drag_CableDragHandler.__name__ = "app.ui.view.main.graph.drag.CableDragHandler";
app_ui_view_main_graph_drag_CableDragHandler.__interfaces__ = [app_ui_view_main_graph_drag_DragHandler];
Object.assign(app_ui_view_main_graph_drag_CableDragHandler.prototype, {
	__class__: app_ui_view_main_graph_drag_CableDragHandler
});
class app_ui_view_main_graph_drag_GraphPasteHandler {
	constructor(graph,data,x,y) {
		this.offsetY = 0;
		this.offsetX = 0;
		this.graph = graph;
		this.data = data;
		this.shadows = [];
		let _g = 0;
		let _g1 = graph_Graph.deserialize(data).nodes;
		while(_g < _g1.length) {
			let shadow = new app_ui_view_main_graph_NodeShadow(_g1[_g++]);
			shadow.x += x;
			shadow.y += y;
			this.shadows.push(shadow);
			graph.addNodeShadow(shadow);
		}
		this.offsetX = x;
		this.offsetY = y;
		this.pastedNodes = null;
	}
	move(x,y) {
		let _g = 0;
		let _g1 = this.shadows;
		while(_g < _g1.length) {
			let shadow = _g1[_g];
			++_g;
			shadow.x = shadow.internal.getX() + x;
			shadow.y = shadow.internal.getY() + y;
		}
		this.offsetX = x;
		this.offsetY = y;
	}
	done() {
		let _this = this.graph.selection.nodes;
		_this.map.h = { __keys__ : { }};
		_this.numEntries = 0;
		let nodes = graph_Graph.deserializeInto(this.graph.raw,this.offsetX,this.offsetY,this.data);
		let _g = 0;
		while(_g < nodes.length) this.graph.selection.add(nodes[_g++]);
		this.pastedNodes = nodes;
		this.graph.doneOperation(app_ui_view_main_graph_history_GraphOperation.Paste);
		this.graph.clearNodeShadows();
		this.data = null;
		this.shadows = null;
	}
	cancel() {
		this.graph.clearNodeShadows();
		this.data = null;
		this.shadows = null;
	}
}
$hxClasses["app.ui.view.main.graph.drag.GraphPasteHandler"] = app_ui_view_main_graph_drag_GraphPasteHandler;
app_ui_view_main_graph_drag_GraphPasteHandler.__name__ = "app.ui.view.main.graph.drag.GraphPasteHandler";
app_ui_view_main_graph_drag_GraphPasteHandler.__interfaces__ = [app_ui_view_main_graph_drag_DragHandler];
Object.assign(app_ui_view_main_graph_drag_GraphPasteHandler.prototype, {
	__class__: app_ui_view_main_graph_drag_GraphPasteHandler
});
class app_ui_view_main_graph_drag_NodeCreationDragHandler {
	constructor(graph,info,x,y) {
		this.graph = graph;
		this.info = info;
		let dummyGraph = new graph_Graph();
		info.create(dummyGraph,0,0,true);
		this.pasteHandler = new app_ui_view_main_graph_drag_GraphPasteHandler(graph,dummyGraph.serialize(graph_serial_NodeFilter.ALL,false),x,y);
	}
	move(x,y) {
		this.pasteHandler.move(x,y);
	}
	done() {
		this.pasteHandler.done();
		let node = this.pasteHandler.pastedNodes[0];
		switch(node.setting.role._hx_index) {
		case 6:
			this.graph.op.openMenu(new app_ui_view_menu_nodeedit_NodeEditMenu(node,this.graph));
			break;
		case 7:
			this.graph.op.openMenu(new app_ui_view_menu_nodeedit_NodeEditMenu(node,this.graph));
			break;
		default:
		}
	}
	cancel() {
		this.pasteHandler.cancel();
	}
}
$hxClasses["app.ui.view.main.graph.drag.NodeCreationDragHandler"] = app_ui_view_main_graph_drag_NodeCreationDragHandler;
app_ui_view_main_graph_drag_NodeCreationDragHandler.__name__ = "app.ui.view.main.graph.drag.NodeCreationDragHandler";
app_ui_view_main_graph_drag_NodeCreationDragHandler.__interfaces__ = [app_ui_view_main_graph_drag_DragHandler];
Object.assign(app_ui_view_main_graph_drag_NodeCreationDragHandler.prototype, {
	__class__: app_ui_view_main_graph_drag_NodeCreationDragHandler
});
class app_ui_view_main_graph_drag_NodeDragHandler {
	constructor(graph,nodes,x,y) {
		this.anchorY = 0;
		this.anchorX = 0;
		let _gthis = this;
		this.graph = graph;
		this.nodes = nodes.slice();
		this.shadows = [];
		this.anchorX = x;
		this.anchorY = y;
		let _g = 0;
		let _g1 = this.nodes;
		while(_g < _g1.length) {
			let shadow = new app_ui_view_main_graph_NodeShadow(_g1[_g++]);
			this.shadows.push(shadow);
			graph.addNodeShadow(shadow);
		}
		if(nodes.length == 1) {
			this.conn = new app_ui_view_main_graph_drag_VertexConnector(graph,nodes[0].phys.vertex);
			this.conn.onTargetVertexUpdated = function(prev,current) {
				_gthis.shadows[0].hidden = current != null;
			};
		} else {
			this.conn = null;
		}
	}
	move(x,y) {
		let dx = x - this.anchorX;
		let dy = y - this.anchorY;
		let _g = 0;
		let _g1 = this.shadows;
		while(_g < _g1.length) {
			let shadow = _g1[_g];
			++_g;
			shadow.x = shadow.internal.getX() + dx;
			shadow.y = shadow.internal.getY() + dy;
		}
		if(this.nodes.length == 1) {
			this.conn.move(x,y);
		}
	}
	done() {
		let _this = this.graph.selection.nodes;
		_this.map.h = { __keys__ : { }};
		_this.numEntries = 0;
		let _g = 0;
		let _g1 = this.nodes;
		while(_g < _g1.length) this.graph.selection.add(_g1[_g++]);
		let move = true;
		if(this.conn != null) {
			move = !this.conn.isTryingToConnect();
			this.conn.done();
			if(this.conn.connected) {
				this.graph.doneOperation(app_ui_view_main_graph_history_GraphOperation.Add);
			}
		}
		if(move) {
			let dx = this.shadows[0].getX() - this.nodes[0].phys.vertex.point.x;
			let dy = this.shadows[0].getY() - this.nodes[0].phys.vertex.point.y;
			this.graph.moveNodes(this.nodes,dx,dy);
			this.graph.doneOperation(app_ui_view_main_graph_history_GraphOperation.Move);
		}
		this.graph.clearConnectionShadows();
		this.graph.clearNodeShadows();
		this.shadows = null;
		this.nodes = null;
	}
	cancel() {
		if(this.conn != null) {
			this.conn.cancel();
		}
		this.graph.clearConnectionShadows();
		this.graph.clearNodeShadows();
		this.shadows = null;
		this.nodes = null;
	}
}
$hxClasses["app.ui.view.main.graph.drag.NodeDragHandler"] = app_ui_view_main_graph_drag_NodeDragHandler;
app_ui_view_main_graph_drag_NodeDragHandler.__name__ = "app.ui.view.main.graph.drag.NodeDragHandler";
app_ui_view_main_graph_drag_NodeDragHandler.__interfaces__ = [app_ui_view_main_graph_drag_DragHandler];
Object.assign(app_ui_view_main_graph_drag_NodeDragHandler.prototype, {
	__class__: app_ui_view_main_graph_drag_NodeDragHandler
});
class app_ui_view_main_graph_drag_SocketDragHandler {
	constructor(graph,socket) {
		this.graph = graph;
		this.socket = socket;
		this.conn = new app_ui_view_main_graph_drag_VertexConnector(graph,socket.phys.vertex);
		graph.socketSelection.add(socket);
		this.point = socket.phys.vertex.point;
	}
	move(x,y) {
		let dx = x - this.point.x;
		let dy = y - this.point.y;
		let l = Math.sqrt(dx * dx + dy * dy);
		let invL = l > 0 ? 1 / l : 0;
		let f = l * 0.1;
		if(f > 1) {
			f = 1;
		}
		this.point.vx += dx * invL * f;
		this.point.vy += dy * invL * f;
		this.conn.move(x,y);
	}
	done() {
		this.conn.done();
		if(this.conn.connected) {
			this.graph.doneOperation(app_ui_view_main_graph_history_GraphOperation.Add);
		}
		this.graph.socketSelection.remove(this.socket);
	}
	cancel() {
		this.conn.cancel();
		this.graph.socketSelection.remove(this.socket);
	}
}
$hxClasses["app.ui.view.main.graph.drag.SocketDragHandler"] = app_ui_view_main_graph_drag_SocketDragHandler;
app_ui_view_main_graph_drag_SocketDragHandler.__name__ = "app.ui.view.main.graph.drag.SocketDragHandler";
app_ui_view_main_graph_drag_SocketDragHandler.__interfaces__ = [app_ui_view_main_graph_drag_DragHandler];
Object.assign(app_ui_view_main_graph_drag_SocketDragHandler.prototype, {
	__class__: app_ui_view_main_graph_drag_SocketDragHandler
});
class app_ui_view_main_graph_drag_VertexConnector {
	constructor(graph,vertex) {
		this.onTargetVertexUpdated = null;
		this.connected = false;
		this.prevTarget = null;
		this.connectionShadow = null;
		this.graph = graph;
		this.vertex = vertex;
	}
	move(x,y) {
		let pick = this.graph.pickWithCurrentScale(x,y,3 | (16 | 32));
		let checkRes = this.graph.connectableChecker.check(this.vertex,pick);
		this.targetTo(app_ui_view_main_graph_ConnectableCheckResultTools.vertex(checkRes),app_ui_view_main_graph_ConnectableCheckResultTools.ok(checkRes));
	}
	isTryingToConnect() {
		return this.connectionShadow != null;
	}
	done() {
		this.connected = false;
		if(this.connectionShadow != null) {
			if(this.connectionShadow.ok) {
				this.connected = true;
				app_ui_view_main_graph_GraphWrapper.connectVerticesMakingSockets(this.graph.raw,this.connectionShadow.v1,this.connectionShadow.v2);
			}
		}
		this.targetTo(null,false);
	}
	cancel() {
		this.targetTo(null,false);
	}
	targetTo(v,ok) {
		if(v == null) {
			this.connectionShadow = null;
			this.graph.clearConnectionShadows();
		} else if(this.connectionShadow == null) {
			this.connectionShadow = new app_ui_view_main_graph_ConnectionShadow(this.vertex,v,ok);
			this.graph.addConnectionShadow(this.connectionShadow);
		} else {
			this.connectionShadow.v1 = this.vertex;
			this.connectionShadow.v2 = v;
			this.connectionShadow.ok = ok;
		}
		if(this.prevTarget != v) {
			if(this.prevTarget != null) {
				let _g = this.prevTarget.type;
				switch(_g._hx_index) {
				case 0:
					break;
				case 1:
					this.graph.socketSelection.remove(_g.s);
					break;
				case 2:
					break;
				}
			}
			if(v != null) {
				let _g = v.type;
				switch(_g._hx_index) {
				case 0:
					break;
				case 1:
					this.graph.socketSelection.add(_g.s);
					break;
				case 2:
					break;
				}
			}
			if(this.onTargetVertexUpdated != null) {
				this.onTargetVertexUpdated(this.prevTarget,v);
			}
			this.prevTarget = v;
		}
	}
}
$hxClasses["app.ui.view.main.graph.drag.VertexConnector"] = app_ui_view_main_graph_drag_VertexConnector;
app_ui_view_main_graph_drag_VertexConnector.__name__ = "app.ui.view.main.graph.drag.VertexConnector";
app_ui_view_main_graph_drag_VertexConnector.__interfaces__ = [app_ui_view_main_graph_drag_DragHandler];
Object.assign(app_ui_view_main_graph_drag_VertexConnector.prototype, {
	__class__: app_ui_view_main_graph_drag_VertexConnector
});
class app_ui_view_main_graph_history_GraphHistory {
	constructor(maxSize) {
		if(maxSize == null) {
			maxSize = 100;
		}
		this.maxSize = maxSize;
		this.dataStack = [];
		this.currentIndex = -1;
	}
	addSnapshot(hp) {
		if(this.currentIndex == this.dataStack.length - 1) {
			this.dataStack.push(hp);
		} else {
			this.dataStack.length = this.currentIndex + 1;
			this.dataStack.push(hp);
		}
		this.currentIndex = this.dataStack.length - 1;
		if(this.dataStack.length > this.maxSize) {
			this.dataStack.splice(0,1);
			this.currentIndex--;
		}
	}
	canUndo() {
		return this.currentIndex > 0;
	}
	canRedo() {
		return this.currentIndex < this.dataStack.length - 1;
	}
	undo() {
		if(!this.canUndo()) {
			throw haxe_Exception.thrown("cannot undo");
		}
		return this.dataStack[--this.currentIndex];
	}
	redo() {
		if(!this.canRedo()) {
			throw haxe_Exception.thrown("cannot redo");
		}
		return this.dataStack[++this.currentIndex];
	}
}
$hxClasses["app.ui.view.main.graph.history.GraphHistory"] = app_ui_view_main_graph_history_GraphHistory;
app_ui_view_main_graph_history_GraphHistory.__name__ = "app.ui.view.main.graph.history.GraphHistory";
Object.assign(app_ui_view_main_graph_history_GraphHistory.prototype, {
	__class__: app_ui_view_main_graph_history_GraphHistory
});
var app_ui_view_main_graph_history_GraphOperation = $hxEnums["app.ui.view.main.graph.history.GraphOperation"] = { __ename__ : "app.ui.view.main.graph.history.GraphOperation", __constructs__ : ["Reset","Import","Move","Add","Remove","Cut","Paste","Goto","CreateModule","DecomposeModule","NodeEdit"]
	,Reset: {_hx_index:0,__enum__:"app.ui.view.main.graph.history.GraphOperation",toString:$estr}
	,Import: {_hx_index:1,__enum__:"app.ui.view.main.graph.history.GraphOperation",toString:$estr}
	,Move: {_hx_index:2,__enum__:"app.ui.view.main.graph.history.GraphOperation",toString:$estr}
	,Add: {_hx_index:3,__enum__:"app.ui.view.main.graph.history.GraphOperation",toString:$estr}
	,Remove: {_hx_index:4,__enum__:"app.ui.view.main.graph.history.GraphOperation",toString:$estr}
	,Cut: {_hx_index:5,__enum__:"app.ui.view.main.graph.history.GraphOperation",toString:$estr}
	,Paste: {_hx_index:6,__enum__:"app.ui.view.main.graph.history.GraphOperation",toString:$estr}
	,Goto: {_hx_index:7,__enum__:"app.ui.view.main.graph.history.GraphOperation",toString:$estr}
	,CreateModule: {_hx_index:8,__enum__:"app.ui.view.main.graph.history.GraphOperation",toString:$estr}
	,DecomposeModule: {_hx_index:9,__enum__:"app.ui.view.main.graph.history.GraphOperation",toString:$estr}
	,NodeEdit: {_hx_index:10,__enum__:"app.ui.view.main.graph.history.GraphOperation",toString:$estr}
};
class app_ui_view_main_graph_history_HistoryPoint {
	constructor(data,atGraphId) {
		this.data = data;
		this.atGraphId = atGraphId;
	}
}
$hxClasses["app.ui.view.main.graph.history.HistoryPoint"] = app_ui_view_main_graph_history_HistoryPoint;
app_ui_view_main_graph_history_HistoryPoint.__name__ = "app.ui.view.main.graph.history.HistoryPoint";
Object.assign(app_ui_view_main_graph_history_HistoryPoint.prototype, {
	__class__: app_ui_view_main_graph_history_HistoryPoint
});
class app_ui_view_main_input_InputController extends app_event_Dispatcher {
	constructor() {
		super();
		this.state = app_ui_view_main_input_InputControllerState.Idle;
		this.rightClickState = app_ui_view_main_input_InputControllerState.Idle;
	}
	onPointerEnter(p) {
	}
	onPointerExit(p) {
	}
	onPointerDown(pointer,index) {
		switch(index) {
		case 0:
			let _g = this.state;
			switch(_g._hx_index) {
			case 0:
				this.dispatch(function(l) {
					l.onClickBegin(pointer.x,pointer.y);
				});
				this.state = app_ui_view_main_input_InputControllerState.Clicking(pointer);
				break;
			case 1:
				let p = _g.p;
				this.dispatch(function(l) {
					l.onClickCancel();
				});
				this.dispatch(function(l) {
					l.onPinchBegin(p.x,p.y,pointer.x,pointer.y);
				});
				this.state = app_ui_view_main_input_InputControllerState.Pinching(p,pointer);
				break;
			case 2:
				break;
			case 3:
				let p1 = _g.p;
				this.dispatch(function(l) {
					l.onPinchBegin(p1.x,p1.y,pointer.x,pointer.y);
				});
				this.state = app_ui_view_main_input_InputControllerState.Pinching(p1,pointer);
				break;
			}
			break;
		case 1:
			switch(this.rightClickState._hx_index) {
			case 0:
				this.dispatch(function(l) {
					l.onPanBegin(pointer.x,pointer.y);
				});
				this.rightClickState = app_ui_view_main_input_InputControllerState.Clicking(pointer);
				break;
			case 1:
				break;
			default:
				throw haxe_Exception.thrown("invalid right click state");
			}
			break;
		}
	}
	onPointerUp(pointer,index) {
		switch(index) {
		case 0:
			let _g = this.state;
			switch(_g._hx_index) {
			case 0:
				break;
			case 1:
				if(_g.p == pointer) {
					this.dispatch(function(l) {
						l.onClickEnd();
					});
					this.state = app_ui_view_main_input_InputControllerState.Idle;
				}
				break;
			case 2:
				let _g1 = _g.p2;
				let _g2 = _g.p1;
				let left = pointer == _g2 ? _g1 : pointer == _g1 ? _g2 : null;
				if(left != null) {
					this.dispatch(function(l) {
						l.onPinchEnd();
					});
					this.state = app_ui_view_main_input_InputControllerState.WaitForPinch(left);
				}
				break;
			case 3:
				if(_g.p == pointer) {
					this.state = app_ui_view_main_input_InputControllerState.Idle;
				}
				break;
			}
			break;
		case 1:
			let _g3 = this.rightClickState;
			switch(_g3._hx_index) {
			case 0:
				break;
			case 1:
				if(_g3.p == pointer) {
					this.dispatch(function(l) {
						l.onPanEnd();
					});
					this.rightClickState = app_ui_view_main_input_InputControllerState.Idle;
				}
				break;
			default:
				throw haxe_Exception.thrown("invalid right click state");
			}
			break;
		}
	}
	onPointerMove(pointer) {
		let _g = this.rightClickState;
		switch(_g._hx_index) {
		case 0:
			break;
		case 1:
			let p = _g.p;
			if(p == pointer) {
				this.dispatch(function(l) {
					l.onPanMove(p.x,p.y);
				});
			}
			break;
		default:
			throw haxe_Exception.thrown("invalid right click state");
		}
		let _g1 = this.state;
		switch(_g1._hx_index) {
		case 0:
			break;
		case 1:
			let p1 = _g1.p;
			if(p1 == pointer) {
				this.dispatch(function(l) {
					l.onClickMove(p1.x,p1.y);
				});
			}
			break;
		case 2:
			let p2 = _g1.p2;
			let p11 = _g1.p1;
			if(p11 == pointer || p2 == pointer) {
				this.dispatch(function(l) {
					l.onPinchMove(p11.x,p11.y,p2.x,p2.y);
				});
			}
			break;
		case 3:
			break;
		}
	}
	onWheel(p,amount) {
		this.dispatch(function(l) {
			l.onWheel(p.x,p.y,amount);
		});
	}
}
$hxClasses["app.ui.view.main.input.InputController"] = app_ui_view_main_input_InputController;
app_ui_view_main_input_InputController.__name__ = "app.ui.view.main.input.InputController";
app_ui_view_main_input_InputController.__interfaces__ = [app_ui_PointerListener];
app_ui_view_main_input_InputController.__super__ = app_event_Dispatcher;
Object.assign(app_ui_view_main_input_InputController.prototype, {
	__class__: app_ui_view_main_input_InputController
});
var app_ui_view_main_input_InputControllerState = $hxEnums["app.ui.view.main.input.InputControllerState"] = { __ename__ : "app.ui.view.main.input.InputControllerState", __constructs__ : ["Idle","Clicking","Pinching","WaitForPinch"]
	,Idle: {_hx_index:0,__enum__:"app.ui.view.main.input.InputControllerState",toString:$estr}
	,Clicking: ($_=function(p) { return {_hx_index:1,p:p,__enum__:"app.ui.view.main.input.InputControllerState",toString:$estr}; },$_.__params__ = ["p"],$_)
	,Pinching: ($_=function(p1,p2) { return {_hx_index:2,p1:p1,p2:p2,__enum__:"app.ui.view.main.input.InputControllerState",toString:$estr}; },$_.__params__ = ["p1","p2"],$_)
	,WaitForPinch: ($_=function(p) { return {_hx_index:3,p:p,__enum__:"app.ui.view.main.input.InputControllerState",toString:$estr}; },$_.__params__ = ["p"],$_)
};
class app_ui_view_menu_Underlined extends app_ui_view_Button {
	constructor(text,onClick) {
		if(app_ui_Sprite._hx_skip_constructor) {
			super();
			return;
		}
		app_ui_Sprite._hx_skip_constructor = true;
		super();
		app_ui_Sprite._hx_skip_constructor = false;
		this._hx_constructor(text,onClick);
	}
	_hx_constructor(text,onClick) {
		this.selectedCount = 0;
		this.lineT = 0;
		super._hx_constructor(app_ui_core_LengthOrAuto.Auto,app_ui_core_LengthOrAuto.Auto,text,onClick);
		this.textScale = 1.3;
		this.pointerPolicy = app_ui_PointerPolicy.Free;
		let _this = this.element.style.margin;
		let S = app_ui_core_LengthOrAuto.Zero;
		_this.left = S;
		_this.top = S;
		_this.right = S;
		_this.bottom = S;
	}
	update() {
		super.update();
		switch(this.state._hx_index) {
		case 1:case 2:
			this.lineT = 1;
			break;
		case 0:case 3:
			this.lineT += (0 - this.lineT) * 0.5;
			if(this.lineT < 0.001) {
				this.lineT = 0;
			}
			break;
		}
		if(this.selectedCount > 0) {
			if(this.selectedCount++ == 10) {
				this.selectedCount = 0;
			}
		}
	}
	draw(g) {
		g.c2d.strokeStyle = "rgba(" + (153. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
		g.c2d.lineWidth = 1;
		let y1 = this.element.boundary.h;
		let x2 = this.element.boundary.w * this.lineT;
		let y2 = this.element.boundary.h;
		g.c2d.beginPath();
		g.c2d.moveTo(0,y1);
		g.c2d.lineTo(x2,y2);
		g.c2d.stroke();
	}
}
$hxClasses["app.ui.view.menu.Underlined"] = app_ui_view_menu_Underlined;
app_ui_view_menu_Underlined.__name__ = "app.ui.view.menu.Underlined";
app_ui_view_menu_Underlined.__super__ = app_ui_view_Button;
Object.assign(app_ui_view_menu_Underlined.prototype, {
	__class__: app_ui_view_menu_Underlined
});
class app_ui_view_menu_CheckBox extends app_ui_view_menu_Underlined {
	constructor(text,onClick,initialSelected) {
		app_ui_Sprite._hx_skip_constructor = true;
		super();
		app_ui_Sprite._hx_skip_constructor = false;
		this._hx_constructor(text,onClick,initialSelected);
	}
	_hx_constructor(text,onClick,initialSelected) {
		let _gthis = this;
		super._hx_constructor(text,function() {
			_gthis.selected = !_gthis.selected;
			onClick(_gthis.selected);
			_gthis.selectedCount = 1;
		});
		this.selected = initialSelected;
		this.pointerPolicy = app_ui_PointerPolicy.Free;
		let _this = this.element.style.margin;
		let S = app_ui_core_LengthOrAuto.Zero;
		_this.left = S;
		_this.top = S;
		_this.right = S;
		_this.bottom = S;
		this.label = new app_ui_view_Label(text,"left",app_ui_core_LengthOrAuto.Auto,app_ui_core_LengthOrAuto.Auto,function() {
			return 1.3;
		});
		this.label.element.style.grow = 1;
		this.label.element.style.margin.left = app_ui_core_LengthOrAuto.Px(24.);
		this.element.set_layout(new app_ui_core_layout_FlexLayout(false));
		this.addChild(this.label);
	}
	setSelected(selected) {
		if(this.selected != selected) {
			this.onClick();
		}
	}
	draw(g) {
		let tmp;
		switch(this.state._hx_index) {
		case 1:case 2:
			tmp = true;
			break;
		default:
			tmp = false;
		}
		if(tmp || this.selectedCount > 0) {
			g.c2d.fillStyle = "rgba(" + (153. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
			g.c2d.strokeStyle = "rgba(" + (153. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
			let rgba = [0.4,0,0];
			this.label.fillColor = new app_ui_view_color_StaticColor(rgba[0],rgba[1],rgba[2],rgba.length <= 3 ? 1.0 : rgba[3]);
		} else {
			g.c2d.fillStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
			g.c2d.strokeStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
			this.label.fillColor = new app_ui_view_color_StaticColor(0,0,0);
		}
		let rectSize;
		switch(this.state._hx_index) {
		case 0:case 1:case 3:
			rectSize = 1.2;
			break;
		case 2:
			rectSize = 1.0;
			break;
		}
		let rectSize1 = 10. * rectSize;
		g.c2d.lineWidth = 2;
		app_ui_view_menu_CheckBox.rectCenter(g,10.,this.element.boundary.h * 0.5,rectSize1,app_graphics_DrawMode.Stroke);
		if(this.selected) {
			app_ui_view_menu_CheckBox.rectCenter(g,10.,this.element.boundary.h * 0.5,rectSize1 - 4,app_graphics_DrawMode.Fill);
		}
		if(this.selectedCount > 0) {
			let t = this.selectedCount / 10;
			if(t > 1) {
				t = 1;
			}
			let a = 1 - t * t;
			if(a == null) {
				a = 1.0;
			}
			g.c2d.fillStyle = "rgba(" + (153. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + a + ")";
			app_ui_view_menu_CheckBox.rectCenter(g,10.,this.element.boundary.h * 0.5,rectSize1 + 2 + 4 * t,app_graphics_DrawMode.Fill);
		}
		super.draw(g);
	}
	static rectCenter(g,x,y,wh,mode) {
		let x1 = x - wh * 0.5;
		let y1 = y - wh * 0.5;
		switch(mode._hx_index) {
		case 0:
			g.c2d.strokeRect(x1,y1,wh,wh);
			break;
		case 1:
			g.c2d.fillRect(x1,y1,wh,wh);
			break;
		case 2:
			g.c2d.fillRect(x1,y1,wh,wh);
			g.c2d.strokeRect(x1,y1,wh,wh);
			break;
		}
	}
}
$hxClasses["app.ui.view.menu.CheckBox"] = app_ui_view_menu_CheckBox;
app_ui_view_menu_CheckBox.__name__ = "app.ui.view.menu.CheckBox";
app_ui_view_menu_CheckBox.__super__ = app_ui_view_menu_Underlined;
Object.assign(app_ui_view_menu_CheckBox.prototype, {
	__class__: app_ui_view_menu_CheckBox
});
class app_ui_view_menu_EventStopper extends app_ui_Sprite {
	constructor(time) {
		super();
		let _this = this.element.style.size;
		_this.w = app_ui_core_LengthOrAuto.Percent(100);
		_this.h = app_ui_core_LengthOrAuto.Percent(100);
		this.stopEvent = true;
		this.time = time;
	}
	update() {
		if(--this.time <= 0) {
			this.dead = true;
		}
	}
}
$hxClasses["app.ui.view.menu.EventStopper"] = app_ui_view_menu_EventStopper;
app_ui_view_menu_EventStopper.__name__ = "app.ui.view.menu.EventStopper";
app_ui_view_menu_EventStopper.__super__ = app_ui_Sprite;
Object.assign(app_ui_view_menu_EventStopper.prototype, {
	__class__: app_ui_view_menu_EventStopper
});
class app_ui_view_menu_Menu extends app_ui_Sprite {
	constructor(graph,wrapper) {
		if(app_ui_Sprite._hx_skip_constructor) {
			super();
			return;
		}
		app_ui_Sprite._hx_skip_constructor = true;
		super();
		app_ui_Sprite._hx_skip_constructor = false;
		this._hx_constructor(graph,wrapper);
	}
	_hx_constructor(graph,wrapper) {
		this.liveCount = 10;
		this.deathCount = 0;
		super._hx_constructor();
		this.graph = graph;
		this.stopEvent = true;
		let _this = this.element.style.size;
		_this.w = app_ui_core_LengthOrAuto.Percent(100);
		_this.h = app_ui_core_LengthOrAuto.Percent(100);
		let fl = new app_ui_core_layout_FlexLayout(true);
		fl.alignCross = 2;
		this.element.set_layout(fl);
		if(wrapper == null) {
			wrapper = new app_ui_Sprite();
		}
		this.wrapper = wrapper;
		wrapper.element.style.size.w = app_ui_core_LengthOrAuto.Px(250);
		let _this1 = wrapper.element.style.padding;
		let S = app_ui_core_Length.Px(8);
		_this1.left = S;
		_this1.top = S;
		_this1.right = S;
		_this1.bottom = S;
		wrapper.element.style.grow = 1;
		wrapper.element.style.margin.top = app_ui_core_LengthOrAuto.Percent(5);
		wrapper.element.style.margin.bottom = app_ui_core_LengthOrAuto.Auto;
		wrapper.element.set_layout(new app_ui_core_layout_FlexLayout(true));
		this.enableClosingOnOutsideClick = false;
		this.addChild(wrapper);
	}
	onPointerDown(p,index) {
		super.onPointerDown(p,index);
		if(p.isPrimary) {
			this.primaryPointerDownOutsize = !this.wrapper.element.boundary.hitTest(p.x,p.y);
		}
	}
	onPointerUp(p,index) {
		super.onPointerUp(p,index);
		if(p.isPrimary && this.primaryPointerDownOutsize) {
			if(!this.wrapper.element.boundary.hitTest(p.x,p.y)) {
				if(this.enableClosingOnOutsideClick) {
					this.close();
				}
			}
		}
	}
	addTitle(text) {
		let title = new app_ui_view_Label(text,"center",app_ui_core_LengthOrAuto.Auto,app_ui_core_LengthOrAuto.Px(32),function() {
			return 2.0;
		});
		title.element.style.margin.top = app_ui_core_LengthOrAuto.Px(8);
		title.element.style.margin.bottom = app_ui_core_LengthOrAuto.Px(8);
		title.stroke = true;
		title.strokeColor = new app_ui_view_color_StaticColor(0,0,0);
		title.fillColor = new app_ui_view_color_StaticColor(1,1,1);
		this.wrapper.addChild(title);
	}
	addRow(itemOrItems,heightScale) {
		if(heightScale == null) {
			heightScale = 1.0;
		}
		let items = itemOrItems;
		let row = new app_ui_Sprite();
		row.element.style.size.h = app_ui_core_LengthOrAuto.Px(20 * heightScale);
		row.element.style.margin.bottom = app_ui_core_LengthOrAuto.Px(2);
		row.element.set_layout(new app_ui_core_layout_FlexLayout(false));
		let _g = 0;
		while(_g < items.length) {
			let item = items[_g];
			++_g;
			item.element.style.margin.left = app_ui_core_LengthOrAuto.Px(2);
			if(item.element.style.grow == 0) {
				item.element.style.grow = 1;
			}
			row.addChild(item);
		}
		items[0].element.style.margin.left = app_ui_core_LengthOrAuto.Zero;
		this.wrapper.addChild(row);
	}
	addSpace() {
		this.wrapper.children[this.wrapper.children.length - 1].element.style.margin.bottom = app_ui_core_LengthOrAuto.Px(10.);
	}
	item(text,onClick,closeWhenSelected,bullet) {
		if(bullet == null) {
			bullet = true;
		}
		if(closeWhenSelected == null) {
			closeWhenSelected = false;
		}
		let _gthis = this;
		let i = new app_ui_view_menu_MenuItem(text,function() {
			if(onClick != null) {
				onClick();
			}
			if(closeWhenSelected) {
				_gthis.close();
			}
		},bullet);
		i.element.style.size.h = app_ui_core_LengthOrAuto.Px(20);
		return i;
	}
	checkBox(text,onClick,selected) {
		if(selected == null) {
			selected = false;
		}
		let cb = new app_ui_view_menu_CheckBox(text,onClick == null ? function(_) {
		} : onClick,selected);
		cb.element.style.size.h = app_ui_core_LengthOrAuto.Px(20);
		return cb;
	}
	radioButton(text,onSelected,selected) {
		if(selected == null) {
			selected = false;
		}
		let rb = new app_ui_view_menu_RadioButton(text,onSelected == null ? function() {
		} : onSelected,selected);
		rb.element.style.size.h = app_ui_core_LengthOrAuto.Px(20);
		return rb;
	}
	button(text,onClick,closeWhenSelected) {
		if(closeWhenSelected == null) {
			closeWhenSelected = false;
		}
		let _gthis = this;
		let b = new app_ui_view_Button(app_ui_core_LengthOrAuto.Auto,app_ui_core_LengthOrAuto.Auto,text,function() {
			if(onClick != null) {
				onClick();
			}
			if(closeWhenSelected) {
				_gthis.close();
			}
		},1.3);
		b.element.style.size.h = app_ui_core_LengthOrAuto.Px(20);
		return b;
	}
	label(text,scale,align) {
		if(align == null) {
			align = "center";
		}
		if(scale == null) {
			scale = 1.0;
		}
		let t = 1.3 * scale;
		let l = new app_ui_view_Label(text,align,app_ui_core_LengthOrAuto.Auto,app_ui_core_LengthOrAuto.Auto,function() {
			return t;
		});
		l.element.style.size.h = app_ui_core_LengthOrAuto.Px(20);
		return l;
	}
	close() {
		if(this.deathCount == 0) {
			this.deathCount = 1;
			this.element.style.noHit = true;
			this.liveCount = 0;
			this.onClose();
		}
	}
	onClose() {
	}
	update() {
		if(this.deathCount == 0 && this.graph.op.getTopMenu() == this) {
			this.onKeyboardUpdate(this.graph.op.getKeyboard());
		}
		if(this.deathCount > 0 && ++this.deathCount == 15.) {
			this.dead = true;
		}
		if(this.liveCount > 0 && --this.liveCount == 0) {
			this.element.style.noHit = false;
		}
	}
	onKeyboardUpdate(keyboard) {
		if(pot_input_Keyboard.isKeyDown(keyboard,"Escape")) {
			this.close();
		}
	}
	draw(g) {
		let a = this.deathCount - 5.;
		let t = 1 - (a > 0 ? a : 0) / 10 - this.liveCount / 10;
		t = 1 - t;
		t = t * t * t * t;
		t = 1 - t;
		let a1 = 0.9 * t;
		if(a1 == null) {
			a1 = 1.0;
		}
		g.c2d.fillStyle = "rgba(" + (255.0 | 0) + "," + (255.0 | 0) + "," + (255.0 | 0) + "," + a1 + ")";
		g.c2d.fillRect(0,0,this.element.boundary.w,this.element.boundary.h);
		if(t < 1) {
			let pivotY = this.wrapper.element.boundary.y + this.wrapper.element.boundary.h * 0.5;
			g.c2d.translate(this.element.boundary.w * 0.5,pivotY);
			g.c2d.scale(1,t);
			g.c2d.translate(-this.element.boundary.w * 0.5,-pivotY);
		}
	}
}
$hxClasses["app.ui.view.menu.Menu"] = app_ui_view_menu_Menu;
app_ui_view_menu_Menu.__name__ = "app.ui.view.menu.Menu";
app_ui_view_menu_Menu.__super__ = app_ui_Sprite;
Object.assign(app_ui_view_menu_Menu.prototype, {
	__class__: app_ui_view_menu_Menu
});
class app_ui_view_menu__$Menu_MenuRow {
	static fromSprite(s) {
		return [s];
	}
	static fromInheritedArray(a) {
		let result = new Array(a.length);
		let _g = 0;
		let _g1 = a.length;
		while(_g < _g1) {
			let i = _g++;
			result[i] = a[i];
		}
		return result;
	}
}
class app_ui_view_menu_MenuItem extends app_ui_view_menu_Underlined {
	constructor(text,onClick,bullet) {
		app_ui_Sprite._hx_skip_constructor = true;
		super();
		app_ui_Sprite._hx_skip_constructor = false;
		this._hx_constructor(text,onClick,bullet);
	}
	_hx_constructor(text,onClick,bullet) {
		let _gthis = this;
		super._hx_constructor(text,function() {
			onClick();
			_gthis.selectedCount = 1;
		});
		this.bullet = bullet;
		this.textScale = 1.3;
		this.pointerPolicy = app_ui_PointerPolicy.Free;
		let _this = this.element.style.margin;
		let S = app_ui_core_LengthOrAuto.Zero;
		_this.left = S;
		_this.top = S;
		_this.right = S;
		_this.bottom = S;
		this.label = new app_ui_view_Label(text,bullet ? "left" : "center",app_ui_core_LengthOrAuto.Auto,app_ui_core_LengthOrAuto.Auto,function() {
			return _gthis.textScale;
		});
		this.label.element.style.grow = 1;
		if(bullet) {
			this.label.element.style.margin.left = app_ui_core_LengthOrAuto.Px(20);
		}
		this.element.set_layout(new app_ui_core_layout_FlexLayout(false));
		this.addChild(this.label);
	}
	draw(g) {
		let tmp;
		switch(this.state._hx_index) {
		case 1:case 2:
			tmp = true;
			break;
		default:
			tmp = false;
		}
		if(tmp || this.selectedCount > 0) {
			g.c2d.fillStyle = "rgba(" + (153. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
			let rgba = [0.4,0,0];
			this.label.fillColor = new app_ui_view_color_StaticColor(rgba[0],rgba[1],rgba[2],rgba.length <= 3 ? 1.0 : rgba[3]);
		} else {
			g.c2d.fillStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
			this.label.fillColor = new app_ui_view_color_StaticColor(0,0,0);
		}
		if(this.bullet) {
			let y = this.element.boundary.h * 0.5;
			let r;
			switch(this.state._hx_index) {
			case 0:case 1:case 3:
				r = 3;
				break;
			case 2:
				r = 4;
				break;
			}
			g.c2d.beginPath();
			g.c2d.arc(10.,y,r,0,6.2831853071795862);
			g.c2d.fill();
			if(this.selectedCount > 0) {
				let t = this.selectedCount / 10;
				if(t > 1) {
					t = 1;
				}
				let a = 1 - t * t;
				if(a == null) {
					a = 1.0;
				}
				g.c2d.fillStyle = "rgba(" + (153. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + a + ")";
				let y = this.element.boundary.h * 0.5;
				g.c2d.beginPath();
				g.c2d.arc(10.,y,4 + t * 4,0,6.2831853071795862);
				g.c2d.fill();
			}
		}
		super.draw(g);
	}
}
$hxClasses["app.ui.view.menu.MenuItem"] = app_ui_view_menu_MenuItem;
app_ui_view_menu_MenuItem.__name__ = "app.ui.view.menu.MenuItem";
app_ui_view_menu_MenuItem.__super__ = app_ui_view_menu_Underlined;
Object.assign(app_ui_view_menu_MenuItem.prototype, {
	__class__: app_ui_view_menu_MenuItem
});
class app_ui_view_menu_RadioButton extends app_ui_view_menu_Underlined {
	constructor(text,onSelected,initialSelected) {
		app_ui_Sprite._hx_skip_constructor = true;
		super();
		app_ui_Sprite._hx_skip_constructor = false;
		this._hx_constructor(text,onSelected,initialSelected);
	}
	_hx_constructor(text,onSelected,initialSelected) {
		this.group = [];
		let _gthis = this;
		super._hx_constructor(text,function() {
			if(!_gthis.selected) {
				let _g = 0;
				let _g1 = _gthis.group;
				while(_g < _g1.length) _g1[_g++].selected = false;
				_gthis.selected = true;
				_gthis.selectedCount = 1;
				onSelected();
			}
		});
		this.selected = initialSelected;
		this.pointerPolicy = app_ui_PointerPolicy.Free;
		let _this = this.element.style.margin;
		let S = app_ui_core_LengthOrAuto.Zero;
		_this.left = S;
		_this.top = S;
		_this.right = S;
		_this.bottom = S;
		this.label = new app_ui_view_Label(text,"left",app_ui_core_LengthOrAuto.Auto,app_ui_core_LengthOrAuto.Auto,function() {
			return 1.3;
		});
		this.label.element.style.grow = 1;
		this.label.element.style.margin.left = app_ui_core_LengthOrAuto.Px(24.);
		this.element.set_layout(new app_ui_core_layout_FlexLayout(false));
		this.addChild(this.label);
	}
	select() {
		this.onClick();
	}
	draw(g) {
		let tmp;
		switch(this.state._hx_index) {
		case 1:case 2:
			tmp = true;
			break;
		default:
			tmp = false;
		}
		if(tmp || this.selectedCount > 0) {
			g.c2d.fillStyle = "rgba(" + (153. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
			g.c2d.strokeStyle = "rgba(" + (153. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
			let rgba = [0.4,0,0];
			this.label.fillColor = new app_ui_view_color_StaticColor(rgba[0],rgba[1],rgba[2],rgba.length <= 3 ? 1.0 : rgba[3]);
		} else {
			g.c2d.fillStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
			g.c2d.strokeStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
			this.label.fillColor = new app_ui_view_color_StaticColor(0,0,0);
		}
		let circleR;
		switch(this.state._hx_index) {
		case 0:case 1:case 3:
			circleR = 1.2;
			break;
		case 2:
			circleR = 1.0;
			break;
		}
		let circleR1 = 5. * circleR;
		g.c2d.lineWidth = 2;
		let y = this.element.boundary.h * 0.5;
		g.c2d.beginPath();
		g.c2d.arc(10.,y,circleR1,0,6.2831853071795862);
		g.c2d.stroke();
		if(this.selected) {
			let y = this.element.boundary.h * 0.5;
			g.c2d.beginPath();
			g.c2d.arc(10.,y,circleR1 - 2,0,6.2831853071795862);
			g.c2d.fill();
		}
		if(this.selectedCount > 0) {
			let t = this.selectedCount / 10;
			if(t > 1) {
				t = 1;
			}
			let a = 1 - t * t;
			if(a == null) {
				a = 1.0;
			}
			g.c2d.fillStyle = "rgba(" + (153. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + a + ")";
			let y = this.element.boundary.h * 0.5;
			g.c2d.beginPath();
			g.c2d.arc(10.,y,circleR1 + 2 + 4 * t,0,6.2831853071795862);
			g.c2d.fill();
		}
		super.draw(g);
	}
	static addGroup(group) {
		group = group.slice();
		let _g = 0;
		while(_g < group.length) group[_g++].group = group;
	}
}
$hxClasses["app.ui.view.menu.RadioButton"] = app_ui_view_menu_RadioButton;
app_ui_view_menu_RadioButton.__name__ = "app.ui.view.menu.RadioButton";
app_ui_view_menu_RadioButton.__super__ = app_ui_view_menu_Underlined;
Object.assign(app_ui_view_menu_RadioButton.prototype, {
	__class__: app_ui_view_menu_RadioButton
});
class app_ui_view_menu_dialogue_Dialogue extends app_ui_view_menu_Menu {
	_hx_constructor(graph,onClose) {
		super._hx_constructor(graph,new app_ui_view_menu_dialogue_DialogueWindow());
		this.callback = onClose;
		let _this = this.wrapper.element.style.margin;
		if(true) {
			_this.top = app_ui_core_LengthOrAuto.Auto;
			_this.bottom = app_ui_core_LengthOrAuto.Auto;
		}
		this.wrapper.element.style.minSize.h = app_ui_core_LengthOrAuto.Px(100.);
		this.enableClosingOnOutsideClick = true;
		let glue = new app_ui_Sprite();
		glue.element.style.margin.bottom = app_ui_core_LengthOrAuto.Auto;
		this.addChild(glue);
	}
	onClose() {
		if(this.callback != null) {
			this.callback();
		}
	}
}
$hxClasses["app.ui.view.menu.dialogue.Dialogue"] = app_ui_view_menu_dialogue_Dialogue;
app_ui_view_menu_dialogue_Dialogue.__name__ = "app.ui.view.menu.dialogue.Dialogue";
app_ui_view_menu_dialogue_Dialogue.__super__ = app_ui_view_menu_Menu;
Object.assign(app_ui_view_menu_dialogue_Dialogue.prototype, {
	__class__: app_ui_view_menu_dialogue_Dialogue
});
class app_ui_view_menu_dialogue_CalcEnterDialog extends app_ui_view_menu_dialogue_Dialogue {
	constructor(graph,name,onClose) {
		app_ui_Sprite._hx_skip_constructor = true;
		super();
		app_ui_Sprite._hx_skip_constructor = false;
		this._hx_constructor(graph,name,onClose);
	}
	_hx_constructor(graph,name,onClose) {
		let _gthis = this;
		super._hx_constructor(graph,function() {
			onClose(_gthis.confirmed ? _gthis.value : null);
		});
		this.str = "0";
		this.confirmed = false;
		this.value = 0;
		let t = "Edit:" + name;
		this.addTitle(function() {
			return t;
		});
		this.addRow([this.label(function() {
			return _gthis.str;
		},1.5)]);
		this.addSpace();
		let _this = this.wrapper.element.style.padding;
		if(!false) {
			_this.left = app_ui_core_Length.Px(16);
			_this.right = app_ui_core_Length.Px(16);
		}
		let rows = [];
		rows.push([this.button(function() {
			return "Clear";
		},$bind(this,this.clear)),this.button(function() {
			return "BackSpace";
		},$bind(this,this.backspace)),this.button(function() {
			return "+/-";
		},$bind(this,this.changeSign))]);
		let nums = [7,8,9];
		let result = new Array(nums.length);
		let _g = 0;
		let _g1 = nums.length;
		while(_g < _g1) {
			let i = _g++;
			let n = nums[i];
			let t = n == null ? "null" : "" + n;
			let _g1 = $bind(_gthis,_gthis.addNum);
			let n1 = n;
			let tmp = function() {
				_g1(n1);
			};
			result[i] = _gthis.button(function() {
				return t;
			},tmp);
		}
		rows.push(result);
		let nums1 = [4,5,6];
		let result1 = new Array(nums1.length);
		let _g2 = 0;
		let _g11 = nums1.length;
		while(_g2 < _g11) {
			let i = _g2++;
			let n = nums1[i];
			let t = n == null ? "null" : "" + n;
			let _g = $bind(_gthis,_gthis.addNum);
			let n1 = n;
			let tmp = function() {
				_g(n1);
			};
			result1[i] = _gthis.button(function() {
				return t;
			},tmp);
		}
		rows.push(result1);
		let nums2 = [1,2,3];
		let result2 = new Array(nums2.length);
		let _g3 = 0;
		let _g12 = nums2.length;
		while(_g3 < _g12) {
			let i = _g3++;
			let n = nums2[i];
			let t = n == null ? "null" : "" + n;
			let _g = $bind(_gthis,_gthis.addNum);
			let n1 = n;
			let tmp = function() {
				_g(n1);
			};
			result2[i] = _gthis.button(function() {
				return t;
			},tmp);
		}
		rows.push(result2);
		let zero = this.button(function() {
			return "0";
		},function() {
			_gthis.addNum(0);
		});
		rows.push([zero,this.button(function() {
			return ".";
		},$bind(this,this.addPoint))]);
		zero.element.style.grow = 2;
		let _g4 = 0;
		while(_g4 < rows.length) {
			let row = rows[_g4];
			++_g4;
			let _g = 0;
			while(_g < row.length) row[_g++].element.style.size.h = app_ui_core_LengthOrAuto.Auto;
			this.addRow(row,1.4);
		}
		this.addSpace();
		this.addRow([this.item(function() {
			return "Cancel";
		},null,true),this.item(function() {
			return "OK";
		},function() {
			_gthis.confirmed = true;
		},true)]);
	}
	clear() {
		this.str = "0";
		this.value = 0;
	}
	changeSign() {
		this.str = this.str.charAt(0) == "-" ? HxOverrides.substr(this.str,1,null) : "-" + this.str;
		this.updateValue();
	}
	backspace() {
		if(this.str == "-0") {
			this.str = "0";
		} else {
			this.str = HxOverrides.substr(this.str,0,this.str.length - 1);
			if(this.str == "" || this.str == "-") {
				this.str += "0";
			}
		}
		this.updateValue();
	}
	addPoint() {
		if(this.str.indexOf(".") == -1) {
			this.str += ".";
		}
		this.updateValue();
	}
	addNum(n) {
		if(this.str == "0" || this.str == "-0") {
			this.str = HxOverrides.substr(this.str,0,this.str.length - 1);
		}
		if(this.str.length < 9 + (this.str.indexOf("-") != -1 ? 1 : 0) + (this.str.indexOf(".") != -1 ? 1 : 0)) {
			this.str += n;
		}
		this.updateValue();
	}
	updateValue() {
		this.value = parseFloat(this.str);
		let a = this.value;
		this.value = a < -10000 ? -10000 : a > 10000 ? 10000 : a;
		let vi = Math.round(this.value * 10000);
		if(vi == 0 && this.value != 0) {
			vi = this.value > 0 ? 1 : -1;
		}
		this.value = vi / 10000;
	}
	onKeyboardUpdate(keyboard) {
		let _gthis = this;
		super.onKeyboardUpdate(keyboard);
		pot_input_Keyboard.forEachDownKey(this.graph.op.getKeyboard(),function(key) {
			switch(key) {
			case "-":
				_gthis.changeSign();
				break;
			case ".":
				_gthis.addPoint();
				break;
			case "Backspace":
				_gthis.backspace();
				break;
			case "Enter":
				_gthis.confirmed = true;
				_gthis.close();
				break;
			default:
				if(pot_input_KeyValue.DIGITS.includes(key)) {
					_gthis.addNum(HxOverrides.cca(key,0) - HxOverrides.cca("0",0));
				}
			}
		});
	}
}
$hxClasses["app.ui.view.menu.dialogue.CalcEnterDialog"] = app_ui_view_menu_dialogue_CalcEnterDialog;
app_ui_view_menu_dialogue_CalcEnterDialog.__name__ = "app.ui.view.menu.dialogue.CalcEnterDialog";
app_ui_view_menu_dialogue_CalcEnterDialog.__super__ = app_ui_view_menu_dialogue_Dialogue;
Object.assign(app_ui_view_menu_dialogue_CalcEnterDialog.prototype, {
	__class__: app_ui_view_menu_dialogue_CalcEnterDialog
});
class app_ui_view_menu_dialogue_DialogueWindow extends app_ui_Sprite {
	constructor() {
		super();
	}
	draw(g) {
		g.c2d.strokeStyle = "rgba(" + (0. | 0) + "," + (0. | 0) + "," + (0. | 0) + "," + 1.0 + ")";
		g.c2d.fillStyle = "rgba(" + (255.0 | 0) + "," + (255.0 | 0) + "," + (255.0 | 0) + "," + 1.0 + ")";
		let w = this.element.boundary.w;
		let h = this.element.boundary.h;
		g.c2d.beginPath();
		g.c2d.moveTo(w * 0.5,0);
		g.c2d.arcTo(w,0,w,h * 0.5,4);
		g.c2d.arcTo(w,h,w * 0.5,h,4);
		g.c2d.arcTo(0,h,0,h * 0.5,4);
		g.c2d.arcTo(0,0,w * 0.5,0,4);
		g.c2d.closePath();
		g.c2d.fill("evenodd");
		g.c2d.stroke();
	}
}
$hxClasses["app.ui.view.menu.dialogue.DialogueWindow"] = app_ui_view_menu_dialogue_DialogueWindow;
app_ui_view_menu_dialogue_DialogueWindow.__name__ = "app.ui.view.menu.dialogue.DialogueWindow";
app_ui_view_menu_dialogue_DialogueWindow.__super__ = app_ui_Sprite;
Object.assign(app_ui_view_menu_dialogue_DialogueWindow.prototype, {
	__class__: app_ui_view_menu_dialogue_DialogueWindow
});
class app_ui_view_menu_dialogue_EditNameDialog extends app_ui_view_menu_dialogue_Dialogue {
	constructor(graph,initial,maxLength,onClose) {
		app_ui_Sprite._hx_skip_constructor = true;
		super();
		app_ui_Sprite._hx_skip_constructor = false;
		this._hx_constructor(graph,initial,maxLength,onClose);
	}
	_hx_constructor(graph,initial,maxLength,onClose) {
		this.count = 0;
		this.upper = false;
		this.confirmed = false;
		let _gthis = this;
		super._hx_constructor(graph,function() {
			onClose(_gthis.confirmed ? _gthis.name : null);
		});
		this.maxLength = maxLength;
		this.name = initial;
		this.addTitle(function() {
			return "Edit Name";
		});
		this.addRow([this.label(function() {
			return _gthis.name + (((_gthis.count = ++_gthis.count & 63) & 16) == 0 ? "_" : " ");
		},1.5)]);
		this.addSpace();
		let _this = this.wrapper.element.style.padding;
		if(!false) {
			_this.left = app_ui_core_Length.Px(16);
			_this.right = app_ui_core_Length.Px(16);
		}
		let rows = [];
		let lines = ["abcdef","ghijkl","mnopqr","stuvwx","yz+-()","012345","6789.,"];
		this.allChars = lines.join("").split("");
		let _g = 0;
		while(_g < lines.length) {
			let line = lines[_g];
			++_g;
			let row = [];
			let _g1 = 0;
			let _g2 = line.length;
			while(_g1 < _g2) {
				let char = line.charAt(_g1++);
				let getChar = function() {
					if(_gthis.upper) {
						return char.toUpperCase();
					} else {
						return char;
					}
				};
				let item = this.item(getChar,function() {
					_gthis.add(getChar());
				},false,false);
				item.textScale *= 1.2;
				item.element.style.size.h = app_ui_core_LengthOrAuto.Auto;
				row.push(item);
			}
			rows.push(row);
		}
		let _g1 = 0;
		while(_g1 < rows.length) {
			let row = rows[_g1];
			++_g1;
			let result = new Array(row.length);
			let _g = 0;
			let _g11 = row.length;
			while(_g < _g11) {
				let i = _g++;
				result[i] = row[i];
			}
			this.addRow(result,1.2);
		}
		this.addSpace();
		this.addRow([this.button(function() {
			return "Clear";
		},$bind(this,this.clear)),this.button(function() {
			return "BackSpace";
		},$bind(this,this.backspace)),this.button(function() {
			return "A/a";
		},function() {
			_gthis.upper = !_gthis.upper;
		})]);
		this.addSpace();
		this.addRow([this.item(function() {
			return "Cancel";
		},null,true),this.item(function() {
			return "OK";
		},function() {
			_gthis.confirmed = true;
		},true)]);
	}
	clear() {
		this.name = "";
	}
	backspace() {
		if(this.name.length > 0) {
			this.name = HxOverrides.substr(this.name,0,this.name.length - 1);
		}
	}
	add(char) {
		let max = this.maxLength - 1;
		if(this.name.length > max) {
			this.name = this.name.substring(0,max);
		}
		this.name += char;
	}
	onKeyboardUpdate(keyboard) {
		let _gthis = this;
		super.onKeyboardUpdate(keyboard);
		pot_input_Keyboard.forEachDownKey(keyboard,function(key) {
			switch(key) {
			case "Backspace":
				_gthis.backspace();
				break;
			case "Enter":
				_gthis.confirmed = true;
				_gthis.close();
				break;
			default:
				if(_gthis.allChars.includes(key.toLowerCase())) {
					_gthis.add(key);
				}
			}
		});
	}
}
$hxClasses["app.ui.view.menu.dialogue.EditNameDialog"] = app_ui_view_menu_dialogue_EditNameDialog;
app_ui_view_menu_dialogue_EditNameDialog.__name__ = "app.ui.view.menu.dialogue.EditNameDialog";
app_ui_view_menu_dialogue_EditNameDialog.__super__ = app_ui_view_menu_dialogue_Dialogue;
Object.assign(app_ui_view_menu_dialogue_EditNameDialog.prototype, {
	__class__: app_ui_view_menu_dialogue_EditNameDialog
});
class app_ui_view_menu_dialogue_SelectItemDialogue extends app_ui_view_menu_dialogue_Dialogue {
	constructor(graph,onClose,title,items) {
		app_ui_Sprite._hx_skip_constructor = true;
		super();
		app_ui_Sprite._hx_skip_constructor = false;
		this._hx_constructor(graph,onClose,title,items);
	}
	_hx_constructor(graph,onClose,title,items) {
		let _gthis = this;
		super._hx_constructor(graph,function() {
			onClose(_gthis.selected);
		});
		let t = title;
		this.addTitle(function() {
			return t;
		});
		this.addSpace();
		this.selected = null;
		let _g = 0;
		while(_g < items.length) {
			let item = items[_g];
			++_g;
			let t = item.a;
			this.addRow([this.item(function() {
				return t;
			},function() {
				_gthis.selected = item.b;
			},true)]);
		}
	}
}
$hxClasses["app.ui.view.menu.dialogue.SelectItemDialogue"] = app_ui_view_menu_dialogue_SelectItemDialogue;
app_ui_view_menu_dialogue_SelectItemDialogue.__name__ = "app.ui.view.menu.dialogue.SelectItemDialogue";
app_ui_view_menu_dialogue_SelectItemDialogue.__super__ = app_ui_view_menu_dialogue_Dialogue;
Object.assign(app_ui_view_menu_dialogue_SelectItemDialogue.prototype, {
	__class__: app_ui_view_menu_dialogue_SelectItemDialogue
});
class app_ui_view_menu_example_Example {
	constructor(name,data) {
		this.name = name;
		this.data = data;
	}
}
$hxClasses["app.ui.view.menu.example.Example"] = app_ui_view_menu_example_Example;
app_ui_view_menu_example_Example.__name__ = "app.ui.view.menu.example.Example";
Object.assign(app_ui_view_menu_example_Example.prototype, {
	__class__: app_ui_view_menu_example_Example
});
class app_ui_view_menu_example_ExampleCategory {
	constructor(name,examples) {
		this.name = name;
		this.examples = examples;
	}
}
$hxClasses["app.ui.view.menu.example.ExampleCategory"] = app_ui_view_menu_example_ExampleCategory;
app_ui_view_menu_example_ExampleCategory.__name__ = "app.ui.view.menu.example.ExampleCategory";
Object.assign(app_ui_view_menu_example_ExampleCategory.prototype, {
	__class__: app_ui_view_menu_example_ExampleCategory
});
class app_ui_view_menu_example_ExampleList {
	static getExamples() {
		return [app_ui_view_menu_example_ExampleList.basics(),app_ui_view_menu_example_ExampleList.lfos(),app_ui_view_menu_example_ExampleList.filters(),app_ui_view_menu_example_ExampleList.feedbacks(),app_ui_view_menu_example_ExampleList.sounds()];
	}
	static basics() {
		return app_ui_view_menu_example_ExampleList.category("Basics",[app_ui_view_menu_example_ExampleList.example("sine wave","oy5:nodesaoy1:xi906602y1:yi-11546y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei-31408R3oR4fgghgoR1i-151602R2i-12386R3oR4oR5fR6tggR7oR8y3:sinR10oy10:oscillatorR14ggR12aoR13i-26897R3oy5:paramoy2:iofR8y4:freqgggoR13i26700R3oR16oR17fR8y4:gaingggoR13i17718R3oR16oR17fR8y6:detunegggoR13i8R3oR4tgghgoR1i-893816R2i-372614R3oR4oR5fR6tggR7oR8y0:R10oy6:numberi400ggR12aoR13i4519R3oR4tgghgoR1i-906602R2i372614R3oR4oR5fR6tggR7oR8R21R10oR22d0.5ggR12aoR13i-4716R3oR4tgghghy11:connectionsaoy2:n1i1y2:s1i3y2:n2zy2:s2zgoR24i2R25zR26i1R27zgoR24i3R25zR26i1R27i1ghy2:idi-1g"),app_ui_view_menu_example_ExampleList.example("sine waves","oy5:nodesaoy1:xi1074408y1:yi43954y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei28626R3oR4fggoR13i-29013R3oR4fgghgoR1i-173796R2i-261886R3oR4oR5fR6tggR7oR8y3:sinR10oy10:oscillatorR14ggR12aoR13i-22320R3oy5:paramoy2:iofR8y4:freqgggoR13i-30407R3oR16oR17fR8y4:gaingggoR13i25002R3oR16oR17fR8y6:detunegggoR13i2403R3oR4tgghgoR1i-1013796R2i-346886R3oR4oR5fR6tggR7oR8y0:R10oy6:numberd0.3ggR12aoR13i1008R3oR4tgghgoR1i-637194R2i-857500R3oR4oR5fR6tggR7oR8R21R10oR22i400ggR12aoR13i9096R3oR4tgghgoR1i-142194R2i392500R3oR4oR5fR6tggR7oR8R14R10oR15R14ggR12aoR13i-30557R3oR16oR17fR8R18gggoR13i25519R3oR16oR17fR8R19gggoR13i19452R3oR16oR17fR8R20gggoR13i-2790R3oR4tgghgoR1i-1074408R2i312272R3oR4oR5fR6tggR7oR8R21R10oR22i600ggR12aoR13i859R3oR4tgghgoR1i-837194R2i857500R3oR4oR5fR6tggR7oR8R21R10oR22d0.3ggR12aoR13i-5897R3oR4tgghghy11:connectionsaoy2:n1i1y2:s1i3y2:n2zy2:s2i1goR24i2R25zR26i1R27i1goR24i3R25zR26i1R27zgoR24i4R25i3R26zR27zgoR24i5R25zR26i4R27zgoR24i6R25zR26i4R27i1ghy2:idi-1g"),app_ui_view_menu_example_ExampleList.example("envelope","oy5:nodesaoy1:xi912204y1:yi-10796y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei31378R3oR4fgghgoR1i-171000R2i-6636R3oR4oR5fR6tggR7oR8y3:sawR10oy10:oscillatorR14ggR12aoR13i-27492R3oy5:paramoy2:iofR8y4:freqgggoR13i27353R3oR16oR17fR8y4:gaingggoR13i20783R3oR16oR17fR8y6:detunegggoR13i-38R3oR4tgghgoR1i-909398R2i-312250R3oR4oR5fR6tggR7oR8y0:R10oy6:numberi200ggR12aoR13i3924R3oR4tgghgoR1i-912204R2i312250R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.05y1:dd0.1y1:sd0.8y1:rd0.1gggR12aoR13i-4063R3oR4tgghghy11:connectionsaoy2:n1i1y2:s1i3y2:n2zy2:s2zgoR30i2R31zR32i1R33zgoR30i3R31zR32i1R33i1ghy2:idi-1g"),app_ui_view_menu_example_ExampleList.example("input frequency","oy5:nodesaoy1:xi913602y1:yi-7796y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei31378R3oR4fgghgoR1i-169602R2i-3636R3oR4oR5fR6tggR7oR8y2:sqR10oy10:oscillatorR14ggR12aoR13i-27732R3oy5:paramoy2:iofR8y4:freqgggoR13i27715R3oR16oR17fR8y4:gaingggoR13i20783R3oR16oR17fR8y6:detunegggoR13i-38R3oR4tgghgoR1i-898602R2i-285000R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i3683R3oR4tgghgoR1i-913602R2i285000R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.05y1:dd0.1y1:sd0.8y1:rd0.1gggR12aoR13i-3701R3oR4tgghghy11:connectionsaoy2:n1i1y2:s1i3y2:n2zy2:s2zgoR30i2R31zR32i1R33zgoR30i3R31zR32i1R33i1ghy2:idi-1g"),app_ui_view_menu_example_ExampleList.example("envelopes","oy5:nodesaoy1:xi1063602y1:yi-4796y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei-28519R3oR4fggoR13i28142R3oR4fgghgoR1i-29602R2i-330636R3oR4oR5fR6tggR7oR8y3:sinR10oy10:oscillatorR14ggR12aoR13i28604R3oy5:paramoy2:iofR8y4:freqgggoR13i-25700R3oR16oR17fR8y4:gaingggoR13i17426R3oR16oR17fR8y6:detunegggoR13i2897R3oR4tgghgoR1i-1063602R2i-32000R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i-2812R3oR4tggoR13i3742R3oR4tgghgoR1i-40000R2i370000R3oR4oR5fR6tggR7oR8y2:sqR10oR15R23ggR12aoR13i-27674R3oR16oR17fR8R18gggoR13i26779R3oR16oR17fR8R19gggoR13i18134R3oR16oR17fR8R20gggoR13i-3274R3oR4tgghgoR1i-635000R2i-720000R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.05y1:dd0.3y1:szy1:rd0.1gggR12aoR13i5715R3oR4tgghgoR1i-740000R2i720000R3oR4oR5fR6tggR7oR8R24R10oR25oR26i1R27d0.1R28i1R29d0.5gggR12aoR13i-4636R3oR4tgghghy11:connectionsaoy2:n1i1y2:s1i3y2:n2zy2:s2zgoR31i2R32zR33i1R34zgoR31i2R32i1R33i3R34zgoR31i3R32i3R33zR34i1goR31i4R32zR33i1R34i1goR31i5R32zR33i3R34i1ghy2:idi-1g"),app_ui_view_menu_example_ExampleList.example("saturation","oy5:nodesaoy1:xi955000y1:yi-99500y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei31328R3oR4fgghgoR1i-285000R2i-79500R3oR4oR5fR6tggR7oR8y3:sinR10oy10:oscillatorR14ggR12aoR13i-26681R3oy5:paramoy2:iofR8y4:freqgggoR13i26485R3oR16oR17fR8y4:gaingggoR13i20623R3oR16oR17fR8y6:detunegggoR13i-290R3oR4tgghgoR1i-955000R2i280501R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.3y1:dd0.1y1:si1y1:rd0.6gggR12aoR13i-4931R3oR4tgghgoR1i135000R2i412500R3oR4oR5fR6tggR7oR8y0:R10oy6:numberi3ggR12aoR13i-15124R3oR4tgghgoR1i164527R2i-92562R3oy5:smallzgR7oR8y6:%C3%97R10oy5:binOpi1ggR12aoR13i31125R3oR4fggoR13i-88R3oR4tggoR13i16292R3oR4fgghgoR1i-935000R2i-412500R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i4734R3oR4tgghghy11:connectionsaoy2:n1i1y2:s1i3y2:n2i4y2:s2zgoR35i2R36zR37i1R38i1goR35i3R36zR37i4R38i2goR35i4R36i1R37zR38zgoR35i5R36zR37i1R38zghy2:idi-1g"),app_ui_view_menu_example_ExampleList.example("compressor","oy5:nodesaoy1:xi1247500y1:yi-72000y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei31337R3oR4fgghgoR1i-632500R2i-47000R3oR4oR5fR6tggR7oR8y3:sinR10oy10:oscillatorR14ggR12aoR13i-26610R3oy5:paramoy2:iofR8y4:freqgggoR13i26409R3oR16oR17fR8y4:gaingggoR13i15478R3oR16oR17fR8y6:detunegggoR13i-231R3oR4tgghgoR1i-82500R2i365000R3oR4oR5fR6tggR7oR8y0:R10oy6:numberi4ggR12aoR13i-15366R3oR4tgghgoR1i-67973R2i-60062R3oy5:smallzgR7oR8y6:%C3%97R10oy5:binOpi1ggR12aoR13i31185R3oR4fggoR13i16050R3oR4fggoR13i-110R3oR4tgghgoR1i-1242500R2i-365000R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i4806R3oR4tgghgoR1i427500R2i-65500R3oR4oR5tR6tggR7oR8y3:cmpR10oy10:compressorzggR12aoR13i31306R3oR4fggoR13i-79R3oR4tgghgoR1i-1247500R2i289500R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.05y1:dd0.1y1:sd0.8y1:rd0.1gggR12aoR13i-5007R3oR4tgghghy11:connectionsaoy2:n1i1y2:s1i3y2:n2i3y2:s2zgoR37i2R38zR39i3R40i1goR37i3R38i2R39i5R40zgoR37i4R38zR39i1R40zgoR37i5R38i1R39zR40zgoR37i6R38zR39i1R40i1ghy2:idi-1g"),app_ui_view_menu_example_ExampleList.example("detune","oy5:nodesaoy1:xi1142500y1:yi-397364y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei-31214R3oR4fgghgoR1i-322500R2i-737364R3oR4oR5fR6tggR7oR8y3:sawR10oy10:oscillatorR14ggR12aoR13i-31257R3oy5:paramoy2:iofR8y4:freqgggoR13i24294R3oR16oR17fR8y4:gaingggoR13i18274R3oR16oR17fR8y6:detunegggoR13i4932R3oR4tgghgoR1i-1142500R2i-750364R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i159R3oR4tggoR13i7010R3oR4tgghgoR1i-1127366R2i-42436R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.05y1:dd0.1y1:sd0.8y1:rd0.1gggR12aoR13i-7122R3oR4tggoR13i-91R3oR4tgghgoR1i-312500R2i-49864R3oR4oR5fR6tggR7oR8R14R10oR15R14ggR12aoR13i-24406R3oR16oR17fR8R18gggoR13i31325R3oR16oR17fR8R19gggoR13i9373R3oR16oR17fR8R20gggoR13i-5540R3oR4tgghgoR1i275286R2i750364R3oR4oR5fR6tggR7oR8y0:R10oy6:numberi60ggR12aoR13i-22043R3oR4tgghgoR1i277500R2i-414864R3oR4oR5tR6tggR7oR8y3:cmpR10oy10:compressorzggR12aoR13i25876R3oR4fggoR13i-26484R3oR4fggoR13i202R3oR4tgghghy11:connectionsaoy2:n1i1y2:s1i3y2:n2i6y2:s2i1goR34i2R35zR36i1R37zgoR34i2R35i1R36i4R37zgoR34i3R35zR36i1R37i1goR34i3R35i1R36i4R37i1goR34i4R35i3R36i6R37zgoR34i5R35zR36i4R37i2goR34i6R35i2R36zR37zghy2:idi-1g"),app_ui_view_menu_example_ExampleList.example("delay","oy5:nodesaoy1:xi1080000y1:yi-140500y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei31259R3oR4fgghgoR1i-465000R2i-125500R3oR4oR5fR6tggR7oR8y2:sqR10oy10:oscillatorR14ggR12aoR13i-26610R3oy5:paramoy2:iofR8y4:freqgggoR13i26409R3oR16oR17fR8y4:gaingggoR13i19318R3oR16oR17fR8y6:detunegggoR13i-15R3oR4tgghgoR1i-1075000R2i-443500R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i4806R3oR4tgghgoR1i-1080000R2i211000R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.05y1:dd0.1y1:sd0.8y1:rd0.1gggR12aoR13i-5007R3oR4tgghgoR1i187500R2i-126500R3oR4oR5tR6tggR7oR8y3:delR10oy5:delayzggR12aoR13i21466R3oR16oR17fR8y4:timegggoR13i31401R3oR4fggoR13i-157R3oR4tgghgoR1i-182500R2i443500R3oR4oR5fR6tggR7oR8y0:R10oy6:numberd0.2ggR12aoR13i-9950R3oR4tgghghy11:connectionsaoy2:n1i1y2:s1i3y2:n2i4y2:s2i1goR35i2R36zR37i1R38zgoR35i3R36zR37i1R38i1goR35i4R36i2R37zR38zgoR35i5R36zR37i4R38zghy2:idi-1g"),app_ui_view_menu_example_ExampleList.example("modules","oy5:nodesaoy1:xi871107y1:yi7614y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei-31296R3oR4fgghgoR1i-871107R2i-7614R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i47R3oR4tgghgoR1i-94084R2i-3998R3oy6:moduleoR5fR6fggR7oR8y3:modR10oy4:nonezggR12aoR13i120R3oR16oy2:ioty12:boundaryNodei1gggoR13i-31369R3oR16oR19fR20zggghy5:graphoR0aoR1i-482023R2i333384R3oR4oR5fR6tggR7oR8y0:R10oy6:numberi2ggR12aoR13i-17576R3oR4tgghgoR1i983924R2i-434303R3oy8:boundaryfgR7oR8R9R10oy4:duplzggR12aoR13i-31408R3oR4fgghgoR1i-1194400R2i-604443R3oR24tgR7oR8y4:freqR10oR25zggR12aoR13i1203R3oR4tggoR13i7309R3oR4tgghgoR1i-550094R2i-26771R3oy5:smallzgR7oR8y6:%C3%97R10oy5:binOpi1ggR12aoR13i-24107R3oR4fggoR13i-4940R3oR4tggoR13i13840R3oR4fgghgoR1i207691R2i-434888R3oR16oR5fR6fggR7oR8y4:sin2R10oR18zggR12aoR13i-30212R3oR16oR19fR20zgggoR13i26476R3oR16oR19fR20i1gggoR13i8R3oR16oR19tR20i2ggghR21oR0aoR1i-732500R2i1501R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.05y1:dd0.1y1:sd0.8y1:rd0.1gggR12aoR13i6520R3oR4tggoR13i-7379R3oR4tgghgoR1i-112500R2i-563500R3oR4oR5fR6tggR7oR8y3:sinR10oy10:oscillatorR37ggR12aoR13i-31297R3oy5:paramoR19fR8R26gggoR13i24013R3oR39oR19fR8y4:gaingggoR13i12663R3oR39oR19fR8y6:detunegggoR13i6566R3oR4tgghgoR1i-62500R2i513500R3oR4oR5fR6tggR7oR8R37R10oR38R37ggR12aoR13i-31204R3oR39oR19fR8R26gggoR13i-24886R3oR39oR19fR8R40gggoR13i14872R3oR39oR19fR8R41gggoR13i-7056R3oR4tgghgoR1i577500R2i-31500R3oR4oR5tR6tggR7oR8y3:cmpR10oy10:compressorzggR12aoR13i-24845R3oR4fggoR13i24363R3oR4fggoR13i431R3oR4tgghgoR1i-1068018R2i-571887R3oR24tgR7oR8y5:freq1R10oR25zggR12aoR13i56R3oR4tgghgoR1i-1117177R2i498948R3oR24tgR7oR8y5:freq2R10oR25zggR12aoR13i61R3oR4tgghgoR1i1199278R2i-4570R3oR24fgR7oR8R9R10oR25zggR12aoR13i-30981R3oR4fgghghy11:connectionsaoy2:n1zy2:s1zy2:n2i2y2:s2i1goR47zR48i1R49i1R50i1goR47i1R48i3R49i3R50zgoR47i2R48i3R49i3R50i1goR47i3R48i2R49i6R50zgoR47i4R48zR49i1R50zgoR47i5R48zR49i2R50zghy2:idi-1gy10:boundariesai4i5i6hghR46aoR47zR48zR49i3R50i2goR47i2R48zR49i4R50zgoR47i2R48i1R49i3R50zgoR47i3R48i1R49i4R50i1goR47i4R48i2R49i1R50zghR51i-1gR52ai2i1hghR46aoR47i1R48zR49i2R50i1goR47i2R48zR49zR50zghR51i-1g")]);
	}
	static lfos() {
		return app_ui_view_menu_example_ExampleList.category("LFOs",[app_ui_view_menu_example_ExampleList.example("vibrato","oy5:nodesaoy1:xi1197500y1:yi-228386y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei31416R3oR4fgghgoR1i197500R2i-228386R3oR4oR5fR6tggR7oR8y3:sinR10oy10:oscillatorR14ggR12aoR13i-25133R3oy5:paramoy2:iofR8y4:freqgggoR13i-31416R3oR16oR17fR8y4:gaingggoR13i21793R3oR16oR17fR8y6:detunegggoR13i-1R3oR4tgghgoR1i-449714R2i-698614R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i6283R3oR4tgghgoR1i-602500R2i-228385R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.05y1:dd0.1y1:sd0.8y1:rd0.1gggR12aoR13i-1R3oR4tgghgoR1i-312500R2i503614R3oR4oR5fR6tggR7oR8R14R10oR15R14ggR12aoR13i-27820R3oR16oR17fR8R18gggoR13i29247R3oR16oR17fR8R19gggoR13i23151R3oR16oR17fR8R20gggoR13i-9623R3oR4tgghgoR1i-1044714R2i228386R3oR4oR5fR6tggR7oR8y0:R10oy6:numberi6ggR12aoR13i3595R3oR4tgghgoR1i-1197500R2i698614R3oR4oR5fR6tggR7oR8R29R10oR30i120ggR12aoR13i-2169R3oR4tgghghy11:connectionsaoy2:n1i1y2:s1i3y2:n2zy2:s2zgoR32i2R33zR34i1R35zgoR32i3R33zR34i1R35i1goR32i4R33i3R34i1R35i2goR32i5R33zR34i4R35zgoR32i6R33zR34i4R35i1ghy2:idi-1g"),app_ui_view_menu_example_ExampleList.example("alarm","oy5:nodesaoy1:xi1132500y1:yi-240886y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei31416R3oR4fgghgoR1i132500R2i-240886R3oR4oR5fR6tggR7oR8y2:sqR10oy10:oscillatorR14ggR12aoR13i-25133R3oy5:paramoy2:iofR8y4:freqgggoR13i-31416R3oR16oR17fR8y4:gaingggoR13i21727R3oR16oR17fR8y6:detunegggoR13i-1R3oR4tgghgoR1i-514714R2i-711114R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i6283R3oR4tgghgoR1i-667500R2i-240885R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.05y1:dd0.1y1:sd0.8y1:rd0.1gggR12aoR13i-1R3oR4tgghgoR1i-387500R2i516114R3oR4oR5fR6tggR7oR8y3:sawR10oR15R29ggR12aoR13i-27476R3oR16oR17fR8R18gggoR13i28856R3oR16oR17fR8R19gggoR13i23104R3oR16oR17fR8R20gggoR13i-9689R3oR4tgghgoR1i-1109714R2i215886R3oR4oR5fR6tggR7oR8y0:R10oy6:numberd1.5ggR12aoR13i3940R3oR4tgghgoR1i-1132500R2i711114R3oR4oR5fR6tggR7oR8R30R10oR31i240ggR12aoR13i-2560R3oR4tgghghy11:connectionsaoy2:n1i1y2:s1i3y2:n2zy2:s2zgoR33i2R34zR35i1R36zgoR33i3R34zR35i1R36i1goR33i4R34i3R35i1R36i2goR33i5R34zR35i4R36zgoR33i6R34zR35i4R36i1ghy2:idi-1g"),app_ui_view_menu_example_ExampleList.example("masking","oy5:nodesaoy1:xi1168607y1:yi-298386y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei-29472R3oR4fgghgoR1i-446393R2i-643386R3oR4oR5fR6tggR7oR8y2:sqR10oy10:oscillatorR14ggR12aoR13i-30466R3oy5:paramoy2:iofR8y4:freqgggoR13i24923R3oR16oR17fR8y4:gaingggoR13i18249R3oR16oR17fR8y6:detunegggoR13i2377R3oR4tgghgoR1i-1078607R2i-703614R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i950R3oR4tgghgoR1i-1131393R2i-123385R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.05y1:dd0.1y1:sd0.8y1:rd0.1gggR12aoR13i-6493R3oR4tgghgoR1i-481393R2i703614R3oR4oR5fR6tggR7oR8R14R10oR15R14ggR12aoR13i-30831R3oR16oR17fR8R18gggoR13i25079R3oR16oR17fR8R19gggoR13i17031R3oR16oR17fR8R20gggoR13i-8361R3oR4tgghgoR1i-1168607R2i663386R3oR4oR5fR6tggR7oR8y0:R10oy6:numberi4ggR12aoR13i585R3oR4tgghgoR1i149929R2i-498922R3oy5:smallzgR7oR8y6:%C3%97R10oy5:binOpi1ggR12aoR13i-29039R3oR4fggoR13i1944R3oR4tggoR13i18661R3oR4fgghgoR1i-81038R2i260449R3oy6:moduleoR5fR6fggR7oR8y3:0-1R10oy4:nonezggR12aoR13i-12755R3oR34oR17ty12:boundaryNodei1gggoR13i23055R3oR34oR17fR37zggghy5:graphoR0aoR1i-105355R2i748165R3oR4oR5fR6tggR7oR8R29R10oR30d0.5ggR12aoR13i-10877R3oR4tggoR13i-21032R3oR4tgghgoR1i251772R2i67392R3oR31zgR7oR8y3:%2BR10oR33zggR12aoR13i31186R3oR4fggoR13i474R3oR4tggoR13i20539R3oR4fgghgoR1i-496418R2i84443R3oR31zgR7oR8R32R10oR33i1ggR12aoR13i31373R3oR4fggoR13i-227R3oR4tggoR13i10382R3oR4fgghgoR1i1129723R2i109038R3oy8:boundaryfgR7oR8R9R10oy4:duplzggR12aoR13i-30942R3oR4fgghgoR1i-1182853R2i87421R3oR40tgR7oR8y2:inR10oR41zggR12aoR13i-44R3oR4tgghghy11:connectionsaoy2:n1zy2:s1zy2:n2i1y2:s2i2goR44zR45i1R46i2R47i2goR44i1R45i1R46i3R47zgoR44i2R45i1R46i1R47zgoR44i4R45zR46i2R47zghy2:idi-1gy10:boundariesai4i3hghR43aoR44i1R45i3R46i6R47zgoR44i2R45zR46i1R47zgoR44i3R45zR46i1R47i1goR44i4R45i3R46i7R47i1goR44i5R45zR46i4R47zgoR44i6R45i1R46zR47zgoR44i7R45zR46i6R47i2ghR48i-1g"),app_ui_view_menu_example_ExampleList.example("mixing","oy5:nodesaoy1:xi1436107y1:yi226728y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei-24939R3oR4fgghgoR1i-423893R2i-783272R3oR4oR5fR6tggR7oR8y3:sinR10oy10:oscillatorR14ggR12aoR13i-31257R3oy5:paramoy2:iofR8y4:freqgggoR13i24388R3oR16oR17fR8y4:gaingggoR13i12016R3oR16oR17fR8y6:detunegggoR13i3230R3oR4tgghgoR1i-1381107R2i-798500R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i159R3oR4tggoR13i7194R3oR4tgghgoR1i-788893R2i793728R3oR4oR5fR6tggR7oR8R14R10oR15R14ggR12aoR13i31342R3oR16oR17fR8R18gggoR13i23831R3oR16oR17fR8R19gggoR13i18129R3oR16oR17fR8R20gggoR13i-647R3oR4tgghgoR1i-1436107R2i798500R3oR4oR5fR6tggR7oR8y0:R10oy6:numberd0.5ggR12aoR13i-74R3oR4tgghgoR1i-413893R2i48728R3oR4oR5fR6tggR7oR8y3:sawR10oR15R25ggR12aoR13i-24222R3oR16oR17fR8R18gggoR13i31267R3oR16oR17fR8R19gggoR13i13717R3oR16oR17fR8R20gggoR13i-5065R3oR4tgghgoR1i-1423893R2i63728R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.05y1:dd0.1y1:sd0.8y1:rd0.1gggR12aoR13i-149R3oR4tggoR13i-7027R3oR4tgghgoR1i-131394R2i751105R3oy6:moduleoR5fR6fggR7oR8y3:0-1R10oy4:nonezggR12aoR13i30769R3oR32oR17fy12:boundaryNodezgggoR13i-10816R3oR32oR17tR35i1ggghy5:graphoR0aoR1i17501R2i487623R3oR4oR5fR6tggR7oR8R23R10oR24d0.5ggR12aoR13i-10524R3oR4tggoR13i-18872R3oR4tgghgoR1i-183301R2i-125605R3oy5:smallzgR7oR8y6:%C3%97R10oy5:binOpi1ggR12aoR13i31028R3oR4fggoR13i777R3oR4tggoR13i12543R3oR4fgghgoR1i343886R2i-84580R3oR37zgR7oR8y3:%2BR10oR39zggR12aoR13i-30639R3oR4fggoR13i1505R3oR4tggoR13i20892R3oR4fgghgoR1i-705481R2i-105339R3oy8:boundarytgR7oR8y2:inR10oy4:duplzggR12aoR13i-388R3oR4tgghgoR1i886358R2i-2311R3oR41fgR7oR8R9R10oR43zggR12aoR13i-29911R3oR4fgghghy11:connectionsaoy2:n1zy2:s1zy2:n2i2y2:s2i2goR45zR46i1R47i1R48i2goR45i1R46i1R47i2R48zgoR45i2R46i1R47i4R48zgoR45i3R46zR47i1R48zghy2:idi-1gy10:boundariesai3i4hgoR1i517725R2i-468091R3oR32oR5fR6fggR7oR8y3:mixR10oR34zggR12aoR13i-28186R3oR32oR17fR35zgggoR13i26351R3oR32oR17fR35i1gggoR13i20600R3oR32oR17fR35i2gggoR13i6476R3oR32oR17tR35i3ggghR36oR0aoR1i138690R2i-619386R3oR37zgR7oR8R38R10oR39i1ggR12aoR13i-31370R3oR4fggoR13i8483R3oR4tggoR13i14808R3oR4fgghgoR1i-488630R2i-44267R3oR37zgR7oR8R38R10oR39i1ggR12aoR13i-31356R3oR4fggoR13i12860R3oR4fggoR13i-2321R3oR4tgghgoR1i-335623R2i478384R3oR37zgR7oR8R23R10oR43zggR12aoR13i25042R3oR4fggoR13i-18556R3oR4tggoR13i-473R3oR4tgghgoR1i235806R2i451327R3oR32oR5fR6fggR7oR8y3:notR10oR34zggR12aoR13i30943R3oR32oR17fR35zgggoR13i-16613R3oR32oR17tR35i1ggghR36oR0aoR1i-342424R2i540492R3oR4oR5fR6tggR7oR8R23R10oR24i-1ggR12aoR13i-15515R3oR4tgghgoR1i-329754R2i-117457R3oR37zgR7oR8R38R10oR39i1ggR12aoR13i30347R3oR4fggoR13i100R3oR4tggoR13i15901R3oR4fgghgoR1i422576R2i530492R3oR4oR5fR6tggR7oR8R23R10oR24i1ggR12aoR13i-16102R3oR4tgghgoR1i397339R2i-110203R3oR37zgR7oR8R40R10oR39zggR12aoR13i-31316R3oR4fggoR13i543R3oR4tggoR13i15314R3oR4fgghgoR1i-1034131R2i-41864R3oR41tgR7oR8R42R10oR43zggR12aoR13i-1069R3oR4tgghgoR1i1180904R2i-67623R3oR41fgR7oR8R9R10oR43zggR12aoR13i-30873R3oR4fgghghR44aoR45zR46zR47i1R48i2goR45i1R46i1R47i3R48zgoR45i2R46zR47i3R48i2goR45i3R46i1R47i5R48zgoR45i4R46zR47i1R48zghR49i-1gR50ai4i5hgoR1i449756R2i-266056R3oR37zgR7oR8R40R10oR39zggR12aoR13i-22925R3oR4fggoR13i-1143R3oR4tggoR13i29095R3oR4fgghgoR1i-861437R2i-623985R3oR41tgR7oR8R28R10oR43zggR12aoR13i46R3oR4tgghgoR1i-942172R2i-46986R3oR41tgR7oR8y1:bR10oR43zggR12aoR13i60R3oR4tgghgoR1i-728520R2i769344R3oR41tgR7oR8y5:ratioR10oR43zggR12aoR13i-6374R3oR4tgghgoR1i879188R2i-315347R3oR41fgR7oR8R9R10oR43zggR12aoR13i30273R3oR4fgghghR44aoR45zR46i1R47i4R48zgoR45i1R46i2R47i4R48i2goR45i2R46i1R47i1R48i1goR45i2R46i2R47i3R48zgoR45i3R46i1R47zR48i2goR45i4R46i1R47i8R48zgoR45i5R46zR47zR48zgoR45i6R46zR47i1R48zgoR45i7R46zR47i2R48zghR49i-1gR50ai5i6i7i8hghR44aoR45i1R46i3R47i8R48zgoR45i2R46zR47i1R48zgoR45i2R46i1R47i5R48zgoR45i3R46i3R47i7R48zgoR45i4R46zR47i3R48zgoR45i5R46i3R47i8R48i1goR45i6R46zR47i5R48i1goR45i6R46i1R47i1R48i1goR45i7R46i1R47i8R48i2goR45i8R46i3R47zR48zghR49i-1g"),app_ui_view_menu_example_ExampleList.example("Doppler effect","oy5:nodesaoy1:xi1273607y1:yi-623386y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei-30996R3oR4fgghgoR1i-366393R2i-688386R3oR4oR5fR6tggR7oR8y3:triR10oy10:oscillatorR14ggR12aoR13i-30253R3oy5:paramoy2:iofR8y4:freqgggoR13i26835R3oR16oR17fR8y4:gaingggoR13i19895R3oR16oR17fR8y6:detunegggoR13i367R3oR4tgghgoR1i-1138607R2i-778614R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i1163R3oR4tgghgoR1i-1086393R2i-333385R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.05y1:dd0.1y1:sd0.8y1:rd0.1gggR12aoR13i-4581R3oR4tgghgoR1i368607R2i-661386R3oR4oR5tR6tggR7oR8y3:delR10oy5:delayzggR12aoR13i16874R3oR16oR17fR8y4:timegggoR13i-31049R3oR4fggoR13i420R3oR4tgghgoR1i-641393R2i778614R3oR4oR5fR6tggR7oR8y3:sinR10oR15R32ggR12aoR13i-31017R3oR16oR17fR8R18gggoR13i25650R3oR16oR17fR8R19gggoR13i19947R3oR16oR17fR8R20gggoR13i-2686R3oR4tgghgoR1i-1273607R2i753386R3oR4oR5fR6tggR7oR8y0:R10oy6:numberi1ggR12aoR13i399R3oR4tgghgoR1i703607R2i283614R3oR4oR5fR6tggR7oR8R33R10oR34d0.2ggR12aoR13i-28045R3oR4tgghgoR1i-72500R2i622000R3oy6:moduleoR5fR6fggR7oR8y3:0-1R10oy4:nonezggR12aoR13i-9517R3oR35oR17ty12:boundaryNodei1gggoR13i28730R3oR35oR17fR38zggghy5:graphoR0aoR1i-105355R2i748165R3oR4oR5fR6tggR7oR8R33R10oR34d0.5ggR12aoR13i-10877R3oR4tggoR13i-21032R3oR4tgghgoR1i251772R2i67392R3oy5:smallzgR7oR8y3:%2BR10oy5:binOpzggR12aoR13i31188R3oR4fggoR13i474R3oR4tggoR13i20539R3oR4fgghgoR1i-496418R2i84443R3oR40zgR7oR8y6:%C3%97R10oR42i1ggR12aoR13i31373R3oR4fggoR13i-228R3oR4tggoR13i10384R3oR4fgghgoR1i1129723R2i109038R3oy8:boundaryfgR7oR8R9R10oy4:duplzggR12aoR13i-30942R3oR4fgghgoR1i-1182853R2i87421R3oR44tgR7oR8y2:inR10oR45zggR12aoR13i-43R3oR4tgghghy11:connectionsaoy2:n1zy2:s1zy2:n2i1y2:s2i2goR48zR49i1R50i2R51i2goR48i1R49i1R50i3R51zgoR48i2R49i1R50i1R51zgoR48i4R49zR50i2R51zghy2:idi-1gy10:boundariesai4i3hgoR1i275514R2i133573R3oR40zgR7oR8R43R10oR42i1ggR12aoR13i3371R3oR4fggoR13i-14542R3oR4tggoR13i21899R3oR4fgghghR47aoR48i1R49i3R50i4R51i1goR48i2R49zR50i1R51zgoR48i3R49zR50i1R51i1goR48i4R49i2R50zR51zgoR48i5R49i3R50i8R51i1goR48i6R49zR50i5R51zgoR48i7R49zR50i9R51zgoR48i8R49zR50i9R51i2goR48i9R49i1R50i4R51zghR52i-1g"),app_ui_view_menu_example_ExampleList.example("wah","oy5:nodesaoy1:xi1391744y1:yi-972236y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei-30649R3oR4fgghgoR1i-489530R2i-987699R3oR4oR5fR6tggR7oR8y3:sawR10oy10:oscillatorR14ggR12aoR13i22858R3oy5:paramoy2:iofR8y4:freqgggoR13i-30309R3oR16oR17fR8y4:gaingggoR13i10920R3oR16oR17fR8y6:detunegggoR13i-535R3oR4tgghgoR1i-1110836R2i-272164R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i-8558R3oR4tggoR13i817R3oR4tgghgoR1i-1254530R2i-1072698R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.05y1:dd0.1y1:sd0.8y1:rd0.1gggR12aoR13i1107R3oR4tgghgoR1i500470R2i-1040699R3oR4oR5tR6tggR7oR8y3:BPFR10oy6:filtery2:bpggR12aoR13i18876R3oR16oR17fR8R18gggoR13i12878R3oR16oR17fR8y1:QgggoR13i7178R3oR16oR17fR8R19gggoR13i30881R3oR4fggoR13i767R3oR4tgghgoR1i679196R2i-426162R3oR4oR5fR6tggR7oR8y0:R10oy6:numberi2ggR12aoR13i-18538R3oR4tgghgoR1i-734530R2i689301R3oR4oR5fR6tggR7oR8y3:sinR10oR15R35ggR12aoR13i-31108R3oR16oR17fR8R18gggoR13i21732R3oR16oR17fR8R19gggoR13i15883R3oR16oR17fR8R20gggoR13i-3400R3oR4tgghgoR1i-1391744R2i669073R3oR4oR5fR6tggR7oR8R33R10oR34i3ggR12aoR13i308R3oR4tgghgoR1i33090R2i1072698R3oR4oR5fR6tggR7oR8R33R10oR34i1ggR12aoR13i-18076R3oR4tgghgoR1i442844R2i805901R3oR4oR5fR6tggR7oR8R33R10oR34i3ggR12aoR13i-25967R3oR4tgghgoR1i213035R2i-163828R3oy5:smallzgR7oR8y6:%C3%97R10oy5:binOpi1ggR12aoR13i-30599R3oR4fggoR13i-12540R3oR4tggoR13i20457R3oR4fgghgoR1i-112500R2i469294R3oy6:moduleoR5fR6fggR7oR8y3:rngR10oy4:nonezggR12aoR13i-10959R3oR39oR17ty12:boundaryNodei3gggoR13i13340R3oR39oR17fR42zgggoR13i5449R3oR39oR17fR42i1gggoR13i28016R3oR39oR17fR42i2ggghy5:graphoR0aoR1i88902R2i-600833R3oR36zgR7oR8y3:%2BR10oR38zggR12aoR13i7838R3oR4fggoR13i-24006R3oR4tggoR13i30846R3oR4fgghgoR1i764111R2i116123R3oR36zgR7oR8R37R10oR38i1ggR12aoR13i26396R3oR4fggoR13i-23010R3oR4tggoR13i-30482R3oR4fgghgoR1i307970R2i-204993R3oR4oR5fR6tggR7oR8R33R10oR34i-1ggR12aoR13i-28629R3oR4tgghgoR1i-276750R2i-579972R3oR36zgR7oR8R33R10oy4:duplzggR12aoR13i30846R3oR4fggoR13i-570R3oR4tggoR13i10631R3oR4tgghgoR1i-173463R2i42943R3oR36zgR7oR8R44R10oR38zggR12aoR13i-27966R3oR4fggoR13i760R3oR4tggoR13i-14803R3oR4fgghgoR1i-139334R2i-332963R3oR36zgR7oR8R37R10oR38i1ggR12aoR13i-20785R3oR4fggoR13i16613R3oR4tggoR13i2786R3oR4fgghgoR1i-557030R2i460007R3oR4oR5fR6tggR7oR8R33R10oR34d0.5ggR12aoR13i4483R3oR4tggoR13i-218R3oR4tgghgoR1i-153844R2i653906R3oR36zgR7oR8R37R10oR38i1ggR12aoR13i27393R3oR4fggoR13i-6144R3oR4tggoR13i-26933R3oR4fgghgoR1i139439R2i445782R3oR36zgR7oR8R44R10oR38zggR12aoR13i25173R3oR4fggoR13i-4829R3oR4tggoR13i31291R3oR4fgghgoR1i-444522R2i-1088821R3oy8:boundaryfgR7oR8R9R10oR45zggR12aoR13i7409R3oR4fgghgoR1i-748244R2i-553073R3oR46tgR7oR8y3:minR10oR45zggR12aoR13i-570R3oR4tgghgoR1i-714328R2i-151408R3oR46tgR7oR8y3:maxR10oR45zggR12aoR13i3450R3oR4tgghgoR1i-730808R2i899391R3oR46tgR7oR8y2:inR10oR45zggR12aoR13i-4023R3oR4tgghghy11:connectionsaoy2:n1zy2:s1i1y2:n2i9y2:s2zgoR51i1R52i1R53zR54zgoR51i2R52zR53i5R54i2goR51i3R52i1R53zR54i2goR51i3R52i2R53i5R54zgoR51i4R52i1R53i1R54i2goR51i5R52i1R53i4R54i2goR51i6R52zR53i7R54i2goR51i6R52i1R53i8R54i2goR51i7R52i1R53i8R54zgoR51i8R52i1R53i1R54zgoR51i10R52zR53i3R54zgoR51i11R52zR53i4R54zgoR51i12R52zR53i7R54zghy2:idi-1gy10:boundariesai10i11i12i9hghR50aoR51i1R52i3R53i4R54i3goR51i2R52zR53i1R54zgoR51i2R52i1R53i10R54zgoR51i3R52zR53i1R54i1goR51i4R52i4R53zR54zgoR51i5R52zR53i4R54i1goR51i6R52i3R53i11R54i3goR51i7R52zR53i6R54zgoR51i8R52zR53i11R54i1goR51i9R52zR53i11R54i2goR51i10R52i1R53i4R54zgoR51i11R52zR53i10R54i2ghR55i-1g")]);
	}
	static filters() {
		return app_ui_view_menu_example_ExampleList.category("Filters",[app_ui_view_menu_example_ExampleList.example("low pass filter","oy5:nodesaoy1:xi1291107y1:yi-228886y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei30919R3oR4fgghgoR1i-518893R2i-373886R3oR4oR5fR6tggR7oR8y2:sqR10oy10:oscillatorR14ggR12aoR13i-27596R3oy5:paramoy2:iofR8y4:freqgggoR13i26779R3oR16oR17fR8y4:gaingggoR13i17922R3oR16oR17fR8y6:detunegggoR13i2598R3oR4tgghgoR1i-1291107R2i-684114R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i3820R3oR4tgghgoR1i-1268893R2i1115R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.05y1:dd0.1y1:sd0.8y1:rd0.1gggR12aoR13i-4636R3oR4tgghgoR1i226107R2i-175886R3oR4oR5tR6tggR7oR8y3:LPFR10oy6:filtery2:lpggR12aoR13i19957R3oR16oR17fR8R18gggoR13i12560R3oR16oR17fR8y1:QgggoR13i6663R3oR16oR17fR8R19gggoR13i-28818R3oR4fggoR13i-497R3oR4tgghgoR1i-156107R2i668886R3oR4oR5fR6tggR7oR8y0:R10oy6:numberi600ggR12aoR13i-11459R3oR4tgghgoR1i506107R2i684114R3oR4oR5fR6tggR7oR8R33R10oR34i1ggR12aoR13i-18856R3oR4tgghghy11:connectionsaoy2:n1i1y2:s1i3y2:n2i4y2:s2i3goR36i2R37zR38i1R39zgoR36i3R37zR38i1R39i1goR36i4R37i4R38zR39zgoR36i5R37zR38i4R39zgoR36i6R37zR38i4R39i1ghy2:idi-1g"),app_ui_view_menu_example_ExampleList.example("high pass filter","oy5:nodesaoy1:xi1235000y1:yi-403772y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei28060R3oR4fgghgoR1i-625000R2i-293772R3oR4oR5fR6tggR7oR8y2:sqR10oy10:oscillatorR14ggR12aoR13i-24458R3oy5:paramoy2:iofR8y4:freqgggoR13i27387R3oR16oR17fR8y4:gaingggoR13i17922R3oR16oR17fR8y6:detunegggoR13i3102R3oR4tgghgoR1i-1122214R2i-709000R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i6958R3oR4tgghgoR1i-1235000R2i-33771R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.05y1:dd0.1y1:sd0.8y1:rd0.1gggR12aoR13i-4029R3oR4tgghgoR1i180000R2i-35772R3oR4oR5tR6tggR7oR8y3:HPFR10oy6:filtery2:hpggR12aoR13i18669R3oR16oR17fR8R18gggoR13i10620R3oR16oR17fR8y1:QgggoR13i4420R3oR16oR17fR8R19gggoR13i-28314R3oR4fggoR13i-3356R3oR4tgghgoR1i-47214R2i709000R3oR4oR5fR6tggR7oR8y0:R10oy6:numberi4000ggR12aoR13i-12747R3oR4tgghgoR1i590000R2i699228R3oR4oR5fR6tggR7oR8R33R10oR34i1ggR12aoR13i-20796R3oR4tgghghy11:connectionsaoy2:n1i1y2:s1i3y2:n2i4y2:s2i3goR36i2R37zR38i1R39zgoR36i3R37zR38i1R39i1goR36i4R37i4R38zR39zgoR36i5R37zR38i4R39zgoR36i6R37zR38i4R39i1ghy2:idi-1g"),app_ui_view_menu_example_ExampleList.example("band pass filter","oy5:nodesaoy1:xi1188640y1:yi-171396y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei31134R3oR4fgghgoR1i-1188640R2i203983R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.05y1:dd0.1y1:sd0.8y1:rd0.1gggR12aoR13i-5380R3oR4tgghgoR1i-560401R2i-170928R3oR4oR5fR6tggR7oR8y3:sinR10oy10:oscillatorR20ggR12aoR13i-26430R3oy5:paramoy2:iofR8y4:freqgggoR13i26036R3oR22oR23fR8y4:gaingggoR13i-9193R3oR22oR23fR8y6:detunegggoR13i396R3oR4tgghgoR1i-1160000R2i-497386R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i4986R3oR4tgghgoR1i160000R2i-142386R3oR4oR5tR6tggR7oR8y3:BPFR10oy6:filtery2:bpggR12aoR13i21035R3oR22oR23fR8R24gggoR13i11711R3oR22oR23fR8y1:QgggoR13i4896R3oR22oR23fR8R25gggoR13i-282R3oR4tggoR13i-31020R3oR4fgghgoR1i-217214R2i497386R3oR4oR5fR6tggR7oR8y0:R10oy6:numberd523.3ggR12aoR13i-10381R3oR4tgghgoR1i405000R2i437614R3oR4oR5fR6tggR7oR8R33R10oR34i20ggR12aoR13i-19705R3oR4tgghghy11:connectionsaoy2:n1i1y2:s1zy2:n2i2y2:s2i1goR36i2R37i3R38i4R39i4goR36i3R37zR38i2R39zgoR36i4R37i3R38zR39zgoR36i5R37zR38i4R39zgoR36i6R37zR38i4R39i1ghy2:idi-1g"),app_ui_view_menu_example_ExampleList.example("band stop filter","oy5:nodesaoy1:xi1188640y1:yi-161396y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei31134R3oR4fgghgoR1i-1188640R2i213983R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.05y1:dd0.1y1:sd0.8y1:rd0.1gggR12aoR13i-5380R3oR4tgghgoR1i-560401R2i-160928R3oR4oR5fR6tggR7oR8y3:sinR10oy10:oscillatorR20ggR12aoR13i-26430R3oy5:paramoy2:iofR8y4:freqgggoR13i26036R3oR22oR23fR8y4:gaingggoR13i-9193R3oR22oR23fR8y6:detunegggoR13i396R3oR4tgghgoR1i-1160000R2i-487386R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i4986R3oR4tgghgoR1i160000R2i-132386R3oR4oR5tR6tggR7oR8y3:BSFR10oy6:filtery2:bsggR12aoR13i20566R3oR22oR23fR8R24gggoR13i11711R3oR22oR23fR8y1:QgggoR13i4896R3oR22oR23fR8R25gggoR13i-282R3oR4tggoR13i-31020R3oR4fgghgoR1i-167214R2i487386R3oR4oR5fR6tggR7oR8y0:R10oy6:numberd523.3ggR12aoR13i-10850R3oR4tgghgoR1i405000R2i447614R3oR4oR5fR6tggR7oR8R33R10oR34i10ggR12aoR13i-19705R3oR4tgghghy11:connectionsaoy2:n1i1y2:s1zy2:n2i2y2:s2i1goR36i2R37i3R38i4R39i4goR36i3R37zR38i2R39zgoR36i4R37i3R38zR39zgoR36i5R37zR38i4R39zgoR36i6R37zR38i4R39i1ghy2:idi-1g"),app_ui_view_menu_example_ExampleList.example("low shelf filter","oy5:nodesaoy1:xi1246820y1:yi-191817y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei-31366R3oR4fgghgoR1i-1235460R2i183562R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.05y1:dd0.1y1:sd0.5y1:rd0.1gggR12aoR13i-5501R3oR4tgghgoR1i-632221R2i-186349R3oR4oR5fR6tggR7oR8y3:sinR10oy10:oscillatorR20ggR12aoR13i-27189R3oy5:paramoy2:iofR8y4:freqgggoR13i25915R3oR22oR23fR8y4:gaingggoR13i-9193R3oR22oR23fR8y6:detunegggoR13i-145R3oR4tgghgoR1i-1246820R2i-462807R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i4227R3oR4tgghgoR1i133180R2i-197421R3oR4oR5tR6tggR7oR8y3:LSFR10oy6:filtery2:lsggR12aoR13i19934R3oR22oR23fR8R24gggoR13i4571R3oR22oR23fR8y1:QgggoR13i12318R3oR22oR23fR8R25gggoR13i31271R3oR4fggoR13i50R3oR4tgghgoR1i-159034R2i452351R3oR4oR5fR6tggR7oR8y0:R10oy6:numberi350ggR12aoR13i-11482R3oR4tgghgoR1i365966R2i462807R3oR4oR5fR6tggR7oR8R33R10oR34i20ggR12aoR13i-19098R3oR4tgghghy11:connectionsaoy2:n1i1y2:s1zy2:n2i2y2:s2i1goR36i2R37i3R38i4R39i3goR36i3R37zR38i2R39zgoR36i4R37i4R38zR39zgoR36i5R37zR38i4R39zgoR36i6R37zR38i4R39i2ghy2:idi-1g"),app_ui_view_menu_example_ExampleList.example("high shelf filter","oy5:nodesaoy1:xi1246820y1:yi-194317y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei-31366R3oR4fgghgoR1i-1235460R2i181062R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.05y1:dd0.1y1:sd0.5y1:rd0.1gggR12aoR13i-5177R3oR4tgghgoR1i-577221R2i-193849R3oR4oR5fR6tggR7oR8y3:sinR10oy10:oscillatorR20ggR12aoR13i-27564R3oy5:paramoy2:iofR8y4:freqgggoR13i26239R3oR22oR23fR8y4:gaingggoR13i-9193R3oR22oR23fR8y6:detunegggoR13i-85R3oR4tgghgoR1i-1246820R2i-465307R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i3852R3oR4tgghgoR1i133180R2i-199921R3oR4oR5tR6tggR7oR8y3:HSFR10oy6:filtery2:hsggR12aoR13i19934R3oR22oR23fR8R24gggoR13i4571R3oR22oR23fR8y1:QgggoR13i11946R3oR22oR23fR8R25gggoR13i31330R3oR4fggoR13i50R3oR4tgghgoR1i-159034R2i449851R3oR4oR5fR6tggR7oR8y0:R10oy6:numberi600ggR12aoR13i-11482R3oR4tgghgoR1i395966R2i465307R3oR4oR5fR6tggR7oR8R33R10oR34i10ggR12aoR13i-19470R3oR4tgghghy11:connectionsaoy2:n1i1y2:s1zy2:n2i2y2:s2i1goR36i2R37i3R38i4R39i3goR36i3R37zR38i2R39zgoR36i4R37i4R38zR39zgoR36i5R37zR38i4R39zgoR36i6R37zR38i4R39i2ghy2:idi-1g"),app_ui_view_menu_example_ExampleList.example("peak filter","oy5:nodesaoy1:xi1246820y1:yi-264317y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei-31366R3oR4fgghgoR1i-1235460R2i111062R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.05y1:dd0.1y1:sd0.5y1:rd0.1gggR12aoR13i-5177R3oR4tgghgoR1i-577221R2i-263849R3oR4oR5fR6tggR7oR8y3:sinR10oy10:oscillatorR20ggR12aoR13i-27564R3oy5:paramoy2:iofR8y4:freqgggoR13i26239R3oR22oR23fR8y4:gaingggoR13i-9193R3oR22oR23fR8y6:detunegggoR13i-85R3oR4tgghgoR1i-1246820R2i-535307R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i3852R3oR4tgghgoR1i133180R2i-269921R3oR4oR5tR6tggR7oR8y2:PFR10oy6:filtery1:pggR12aoR13i22394R3oR22oR23fR8R24gggoR13i9623R3oR22oR23fR8y1:QgggoR13i15611R3oR22oR23fR8R25gggoR13i31330R3oR4fggoR13i50R3oR4tgghgoR1i-384034R2i384851R3oR4oR5fR6tggR7oR8y0:R10oy6:numberd523.3ggR12aoR13i-9022R3oR4tgghgoR1i140966R2i535307R3oR4oR5fR6tggR7oR8R33R10oR34i10ggR12aoR13i-15805R3oR4tgghgoR1i595000R2i393000R3oR4oR5fR6tggR7oR8R33R10oR34i10ggR12aoR13i-21793R3oR4tgghghy11:connectionsaoy2:n1i1y2:s1zy2:n2i2y2:s2i1goR36i2R37i3R38i4R39i3goR36i3R37zR38i2R39zgoR36i4R37i4R38zR39zgoR36i5R37zR38i4R39zgoR36i6R37zR38i4R39i2goR36i7R37zR38i4R39i1ghy2:idi-1g"),app_ui_view_menu_example_ExampleList.example("saw to square","oy5:nodesaoy1:xi1551820y1:yi706048y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei-21550R3oR4fgghgoR1i-1480460R2i46427R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.05y1:dd0.1y1:sd0.8y1:rd0.1gggR12aoR13i-6762R3oR4tgghgoR1i-932221R2i-393484R3oR4oR5fR6tggR7oR8y3:sawR10oy10:oscillatorR20ggR12aoR13i-27630R3oy5:paramoy2:iofR8y4:freqgggoR13i24654R3oR22oR23fR8y4:gaingggoR13i14734R3oR22oR23fR8y6:detunegggoR13i10212R3oR4tgghgoR1i-519034R2i999830R3oR4oR5fR6tggR7oR8y0:R10oy6:numberi2ggR12aoR13i-15452R3oR4tgghgoR1i-501379R2i309946R3oy6:moduleoR5fR6fggR7oR8y4:stopR10oy4:nonezggR12aoR13i-21203R3oR29oR23fy12:boundaryNodezgggoR13i-10660R3oR29oR23tR32i2gggoR13i15964R3oR29oR23fR32i1ggghy5:graphoR0aoR1i69559R2i-589888R3oR4oR5tR6tggR7oR8y3:BSFR10oy6:filtery2:bsggR12aoR13i19300R3oR22oR23fR8R24gggoR13i12688R3oR22oR23fR8y1:QgggoR13i6919R3oR22oR23fR8R25gggoR13i-30321R3oR4fggoR13i454R3oR4tgghgoR1i354559R2i325112R3oR4oR5fR6tggR7oR8R27R10oR28i30ggR12aoR13i-18727R3oR4tgghgoR1i-300441R2i340112R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i-11685R3oR4tgghgoR1i-123677R2i-75335R3oy5:smallzgR7oR8y6:%C3%97R10oy5:binOpi1ggR12aoR13i30660R3oR4fggoR13i-12116R3oR4tggoR13i19731R3oR4fgghgoR1i-937458R2i-700578R3oy8:boundarytgR7oR8y2:inR10oy4:duplzggR12aoR13i1095R3oR4tgghgoR1i1133071R2i-541604R3oR43fgR7oR8R9R10oR45zggR12aoR13i-30962R3oR4fgghgoR1i-646023R2i-35768R3oR43tgR7oR8y3:nthR10oR45zggR12aoR13i-756R3oR4tgghghy11:connectionsaoy2:n1zy2:s1i4y2:n2i5y2:s2zgoR48i1R49zR50zR51i1goR48i2R49zR50i3R51i2goR48i3R49i1R50zR51zgoR48i4R49zR50zR51i3goR48i6R49zR50i3R51zghy2:idi-1gy10:boundariesai4i6i5hgoR1i-1551820R2i-639942R3oR4oR5fR6tggR7oR8R38R10oR39zggR12aoR13i3786R3oR4tgghgoR1i-145648R2i-1000000R3oR4oR5fR6tggR7oR8R27R10oR28i4ggR12aoR13i15346R3oR4tgghgoR1i-122992R2i-374884R3oR29oR5fR6fggR7oR8R30R10oR31zggR12aoR13i20756R3oR29oR23fR32zgggoR13i8604R3oR29oR23tR32i2gggoR13i-16070R3oR29oR23fR32i1ggghR33oR0aoR1i69559R2i-589888R3oR4oR5tR6tggR7oR8R34R10oR35R36ggR12aoR13i19300R3oR22oR23fR8R24gggoR13i12688R3oR22oR23fR8R37gggoR13i6919R3oR22oR23fR8R25gggoR13i-30321R3oR4fggoR13i454R3oR4tgghgoR1i354559R2i325112R3oR4oR5fR6tggR7oR8R27R10oR28i30ggR12aoR13i-18727R3oR4tgghgoR1i-300441R2i340112R3oR4oR5fR6tggR7oR8R38R10oR39zggR12aoR13i-11685R3oR4tgghgoR1i-123677R2i-75335R3oR40zgR7oR8R41R10oR42i1ggR12aoR13i30660R3oR4fggoR13i-12116R3oR4tggoR13i19731R3oR4fgghgoR1i-937458R2i-700578R3oR43tgR7oR8R44R10oR45zggR12aoR13i1095R3oR4tgghgoR1i1133071R2i-541604R3oR43fgR7oR8R9R10oR45zggR12aoR13i-30962R3oR4fgghgoR1i-646023R2i-35768R3oR43tgR7oR8R46R10oR45zggR12aoR13i-756R3oR4tgghghR47aoR48zR49i4R50i5R51zgoR48i1R49zR50zR51i1goR48i2R49zR50i3R51i2goR48i3R49i1R50zR51zgoR48i4R49zR50zR51i3goR48i6R49zR50i3R51zghR52i-1gR53ai4i6i5hgoR1i499352R2i1005000R3oR4oR5fR6tggR7oR8R27R10oR28i6ggR12aoR13i-15818R3oR4tgghgoR1i492008R2i340116R3oR29oR5fR6fggR7oR8R30R10oR31zggR12aoR13i-22811R3oR29oR23fR32zgggoR13i-10812R3oR29oR23tR32i2gggoR13i15598R3oR29oR23fR32i1ggghR33oR0aoR1i69559R2i-589888R3oR4oR5tR6tggR7oR8R34R10oR35R36ggR12aoR13i19300R3oR22oR23fR8R24gggoR13i12689R3oR22oR23fR8R37gggoR13i6989R3oR22oR23fR8R25gggoR13i-30321R3oR4fggoR13i454R3oR4tgghgoR1i354559R2i325112R3oR4oR5fR6tggR7oR8R27R10oR28i30ggR12aoR13i-18728R3oR4tgghgoR1i-300441R2i340112R3oR4oR5fR6tggR7oR8R38R10oR39zggR12aoR13i-11685R3oR4tgghgoR1i-123677R2i-75335R3oR40zgR7oR8R41R10oR42i1ggR12aoR13i30660R3oR4fggoR13i-12116R3oR4tggoR13i19731R3oR4fgghgoR1i-937458R2i-700578R3oR43tgR7oR8R44R10oR45zggR12aoR13i1095R3oR4tgghgoR1i1133071R2i-541604R3oR43fgR7oR8R9R10oR45zggR12aoR13i-30962R3oR4fgghgoR1i-646023R2i-35768R3oR43tgR7oR8R46R10oR45zggR12aoR13i-756R3oR4tgghghR47aoR48zR49i4R50i5R51zgoR48i1R49zR50zR51i1goR48i2R49zR50i3R51i2goR48i3R49i1R50zR51zgoR48i4R49zR50zR51i3goR48i6R49zR50i3R51zghR52i-1gR53ai4i6i5hgoR1i859352R2i-1005000R3oR4oR5fR6tggR7oR8R27R10oR28i8ggR12aoR13i15743R3oR4tgghgoR1i857008R2i-344884R3oR29oR5fR6fggR7oR8R30R10oR31zggR12aoR13i20604R3oR29oR23fR32zgggoR13i9866R3oR29oR23tR32i2gggoR13i-15672R3oR29oR23fR32i1ggghR33oR0aoR1i69559R2i-589888R3oR4oR5tR6tggR7oR8R34R10oR35R36ggR12aoR13i19300R3oR22oR23fR8R24gggoR13i12688R3oR22oR23fR8R37gggoR13i6626R3oR22oR23fR8R25gggoR13i-30321R3oR4fggoR13i454R3oR4tgghgoR1i354559R2i325112R3oR4oR5fR6tggR7oR8R27R10oR28i30ggR12aoR13i-18727R3oR4tgghgoR1i-300441R2i340112R3oR4oR5fR6tggR7oR8R38R10oR39zggR12aoR13i-11685R3oR4tgghgoR1i-123677R2i-75335R3oR40zgR7oR8R41R10oR42i1ggR12aoR13i30660R3oR4fggoR13i-12116R3oR4tggoR13i19731R3oR4fgghgoR1i-937458R2i-700578R3oR43tgR7oR8R44R10oR45zggR12aoR13i1095R3oR4tgghgoR1i1133071R2i-541604R3oR43fgR7oR8R9R10oR45zggR12aoR13i-30962R3oR4fgghgoR1i-646023R2i-35768R3oR43tgR7oR8R46R10oR45zggR12aoR13i-756R3oR4tgghghR47aoR48zR49i4R50i5R51zgoR48i1R49zR50zR51i1goR48i2R49zR50i3R51i2goR48i3R49i1R50zR51zgoR48i4R49zR50zR51i3goR48i6R49zR50i3R51zghR52i-1gR53ai4i6i5hghR47aoR48i1R49zR50i2R51i1goR48i2R49i3R50i4R51zgoR48i3R49zR50i4R51i2goR48i4R49i1R50i7R51zgoR48i5R49zR50i2R51zgoR48i6R49zR50i7R51i2goR48i7R49i1R50i9R51zgoR48i8R49zR50i9R51i2goR48i9R49i1R50i11R51zgoR48i10R49zR50i11R51i2goR48i11R49i1R50zR51zghR52i-1g"),app_ui_view_menu_example_ExampleList.example("auto wah","oy5:nodesaoy1:xi1341820y1:yi-301210y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei30481R3oR4fgghgoR1i-560460R2i-180831R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.05y1:dd0.1y1:sd0.8y1:rd0.1gggR12aoR13i-13414R3oR4tgghgoR1i-412221R2i-815742R3oR4oR5fR6tggR7oR8y3:sawR10oy10:oscillatorR20ggR12aoR13i26006R3oy5:paramoy2:iofR8y4:freqgggoR13i18002R3oR22oR23fR8y4:gaingggoR13i12302R3oR22oR23fR8y6:detunegggoR13i7459R3oR4tgghgoR1i-1341820R2i-257200R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i-5410R3oR4tggoR13i7610R3oR4tgghgoR1i255000R2i-199258R3oR4oR5tR6tggR7oR8y3:LPFR10oy6:filtery2:lpggR12aoR13i23907R3oR22oR23fR8R24gggoR13i11278R3oR22oR23fR8y1:QgggoR13i3634R3oR22oR23fR8R25gggoR13i-23957R3oR4fggoR13i-935R3oR4tgghgoR1i580000R2i485742R3oR4oR5fR6tggR7oR8y0:R10oy6:numberi15ggR12aoR13i-20138R3oR4tgghgoR1i-755000R2i815742R3oR4oR5fR6tggR7oR8R14R10oR15oR16d0.1R17d0.1R18d0.75R19d0.1gggR12aoR13i-15870R3oR4tgghgoR1i-265000R2i790742R3oR4oR5fR6tggR7oR8R33R10oR34i10ggR12aoR13i-15826R3oR4tgghgoR1i-270908R2i291545R3oy5:smallzgR7oR8y6:%C3%97R10oy5:binOpi1ggR12aoR13i31374R3oR4fggoR13i-7509R3oR4tggoR13i15590R3oR4fgghgoR1i-763460R2i293604R3oR35zgR7oR8R36R10oR37i1ggR12aoR13i-23806R3oR4fggoR13i-42R3oR4tggoR13i15546R3oR4fgghghy11:connectionsaoy2:n1i1y2:s1zy2:n2i2y2:s2i1goR39i2R40i3R41i4R42i3goR39i3R40zR41i2R42zgoR39i3R40i1R41i9R42zgoR39i4R40i4R41zR42zgoR39i5R40zR41i4R42i1goR39i6R40zR41i9R42i2goR39i7R40zR41i8R42i2goR39i8R40i1R41i4R42zgoR39i9R40i1R41i8R42zghy2:idi-1g"),app_ui_view_menu_example_ExampleList.example("piano","oy5:nodesaoy1:xi1561140y1:yi40890y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei-31069R3oR4fgghgoR1i-1561140R2i336269R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:azy1:di3y1:szy1:rd0.4gggR12aoR13i4073R3oR4tgghgoR1i-937901R2i-603642R3oR4oR5fR6tggR7oR8y3:sawR10oy10:oscillatorR20ggR12aoR13i-27304R3oy5:paramoy2:iofR8y4:freqgggoR13i26716R3oR22oR23fR8y4:gaingggoR13i11840R3oR22oR23fR8y6:detunegggoR13i6839R3oR4tgghgoR1i-1537500R2i-865100R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i4112R3oR4tgghgoR1i-230680R2i-27158R3oR4oR5tR6tggR7oR8y3:LPFR10oy6:filtery2:lpggR12aoR13i24081R3oR22oR23fR8R24gggoR13i14008R3oR22oR23fR8y1:QgggoR13i8267R3oR22oR23fR8R25gggoR13i-24577R3oR4fggoR13i1060R3oR4tgghgoR1i-115680R2i642842R3oR4oR5fR6tggR7oR8y0:R10oy6:numberzggR12aoR13i-17408R3oR4tgghgoR1i-1540680R2i865100R3oR4oR5fR6tggR7oR8R33R10oR34i800ggR12aoR13i-4026R3oR4tgghgoR1i-934118R2i606805R3oy5:smallzgR7oR8y6:%C3%97R10oy5:binOpi1ggR12aoR13i-27343R3oR4fggoR13i-7335R3oR4tggoR13i27390R3oR4fgghgoR1i-1545680R2i-294900R3oR4oR5fR6tggR7oR8R14R10oR15oR16d0.001R17i2R18zR19d0.3gggR12aoR13i-4700R3oR4tgghgoR1i674320R2i10100R3oR4oR5tR6tggR7oR8y3:cmpR10oy10:compressorzggR12aoR13i31070R3oR4fggoR13i347R3oR4tgghgoR1i269320R2i-534900R3oR4oR5fR6tggR7oR8R33R10oR34i2ggR12aoR13i15957R3oR4tgghgoR1i255400R2i24578R3oR35zgR7oR8R36R10oR37i1ggR12aoR13i-30356R3oR4fggoR13i-345R3oR4tggoR13i-15459R3oR4fgghghy11:connectionsaoy2:n1i1y2:s1zy2:n2i7y2:s2zgoR41i2R42i3R43i4R44i3goR41i3R42zR43i2R44zgoR41i4R42i4R43i11R44zgoR41i5R42zR43i4R44i1goR41i6R42zR43i7R44i2goR41i7R42i1R43i4R44zgoR41i8R42zR43i2R44i1goR41i9R42i1R43zR44zgoR41i10R42zR43i11R44i2goR41i11R42i1R43i9R44zghy2:idi-1g")]);
	}
	static feedbacks() {
		return app_ui_view_menu_example_ExampleList.category("Feedbacks",[app_ui_view_menu_example_ExampleList.example("echo","oy5:nodesaoy1:xi1270000y1:yi-66386y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei-28858R3oR4fgghgoR1i-585000R2i-336386R3oR4oR5fR6tggR7oR8y3:sawR10oy10:oscillatorR14ggR12aoR13i-28541R3oy5:paramoy2:iofR8y4:freqgggoR13i26351R3oR16oR17fR8y4:gaingggoR13i17596R3oR16oR17fR8y6:detunegggoR13i-302R3oR4tgghgoR1i-1262214R2i-536614R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i2875R3oR4tgghgoR1i-1270000R2i43615R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.01y1:dd0.1y1:szy1:rd0.1gggR12aoR13i-5065R3oR4tgghgoR1i-240000R2i506614R3oR4oR5fR6tggR7oR8y0:R10oy6:numberd0.3ggR12aoR13i-11449R3oR4tgghgoR1i425000R2i536614R3oR4oR5fR6tggR7oR8R29R10oR30d0.5ggR12aoR13i-18662R3oR4tgghgoR1i152589R2i-358684R3oy6:moduleoR5fR6fggR7oR8y4:echoR10oy4:nonezggR12aoR13i19967R3oR31oR17fy12:boundaryNodezgggoR13i2559R3oR31oR17tR34i3gggoR13i31114R3oR31oR17fR34i1gggoR13i12754R3oR31oR17fR34i2ggghy5:graphoR0aoR1i157411R2i460298R3oR4oR5tR6tggR7oR8y3:delR10oy5:delayzggR12aoR13i18025R3oR16oR17fR8y4:timegggoR13i-12999R3oR4fggoR13i-25290R3oR4tgghgoR1i366982R2i-294169R3oy5:smallzgR7oR8R29R10oy4:duplzggR12aoR13i-31107R3oR4fggoR13i-234R3oR4tggoR13i18417R3oR4tgghgoR1i-304837R2i-314897R3oR39zgR7oR8y3:%2BR10oy5:binOpzggR12aoR13i-31213R3oR4fggoR13i308R3oR4tggoR13i14868R3oR4fgghgoR1i-264557R2i163768R3oR39zgR7oR8y6:%C3%97R10oR42i1ggR12aoR13i6126R3oR4fggoR13i-16547R3oR4tggoR13i26011R3oR4fgghgoR1i-5257R2i1149692R3oy8:boundarytgR7oR8R38R10oR40zggR12aoR13i-13391R3oR4tgghgoR1i996272R2i-308919R3oR44fgR7oR8R9R10oR40zggR12aoR13i31182R3oR4fgghgoR1i-848273R2i-325934R3oR44tgR7oR8y2:inR10oR40zggR12aoR13i203R3oR4tgghgoR1i-800102R2i485171R3oR44tgR7oR8R19R10oR40zggR12aoR13i-5405R3oR4tgghghy11:connectionsaoy2:n1zy2:s1i2y2:n2i3y2:s2zgoR47i1R48i1R49i5R50zgoR47i1R48i2R49zR50i1goR47i2R48i1R49i1R50zgoR47i3R48i1R49i2R50i2goR47i4R48zR49zR50zgoR47i6R48zR49i2R50zgoR47i7R48zR49i3R50i2ghy2:idi-1gy10:boundariesai4i6i7i5hghR46aoR47i1R48i3R49i6R50i2goR47i2R48zR49i1R50zgoR47i3R48zR49i1R50i1goR47i4R48zR49i6R50zgoR47i5R48zR49i6R50i3goR47i6R48i1R49zR50zghR51i-1g"),app_ui_view_menu_example_ExampleList.example("reverb","oy5:nodesaoy1:xi1270000y1:yi-66386y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei-28857R3oR4fgghgoR1i-585000R2i-336386R3oR4oR5fR6tggR7oR8y2:sqR10oy10:oscillatorR14ggR12aoR13i-28541R3oy5:paramoy2:iofR8y4:freqgggoR13i26351R3oR16oR17fR8y4:gaingggoR13i17596R3oR16oR17fR8y6:detunegggoR13i-302R3oR4tgghgoR1i-1262214R2i-536614R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i2875R3oR4tgghgoR1i-1270000R2i43615R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.01y1:dd0.1y1:szy1:rd0.1gggR12aoR13i-5065R3oR4tgghgoR1i-240000R2i506614R3oR4oR5fR6tggR7oR8y0:R10oy6:numberd0.3ggR12aoR13i-11449R3oR4tgghgoR1i425000R2i536614R3oR4oR5fR6tggR7oR8R29R10oR30d0.6ggR12aoR13i-18662R3oR4tgghgoR1i152589R2i-358684R3oy6:moduleoR5fR6fggR7oR8y6:reverbR10oy4:nonezggR12aoR13i19967R3oR31oR17fy12:boundaryNodezgggoR13i2559R3oR31oR17tR34i3gggoR13i31114R3oR31oR17fR34i1gggoR13i12754R3oR31oR17fR34i2ggghy5:graphoR0aoR1i422411R2i295298R3oR4oR5tR6tggR7oR8y3:delR10oy5:delayzggR12aoR13i12331R3oR16oR17fR8y4:timegggoR13i-16646R3oR4fggoR13i27308R3oR4tgghgoR1i366982R2i-294169R3oy5:smallzgR7oR8R29R10oy4:duplzggR12aoR13i-30485R3oR4fggoR13i932R3oR4tggoR13i14770R3oR4tgghgoR1i-229837R2i-349897R3oR39zgR7oR8y3:%2BR10oy5:binOpzggR12aoR13i-30981R3oR4fggoR13i931R3oR4tggoR13i21332R3oR4fgghgoR1i-159557R2i548768R3oR39zgR7oR8y6:%C3%97R10oR42i1ggR12aoR13i-4108R3oR4fggoR13i16572R3oR4fggoR13i-23558R3oR4tgghgoR1i669743R2i999692R3oy8:boundarytgR7oR8R38R10oR40zggR12aoR13i-19085R3oR4tgghgoR1i851272R2i-248919R3oR44fgR7oR8R9R10oR40zggR12aoR13i-30484R3oR4fgghgoR1i-713273R2i-370934R3oR44tgR7oR8y2:inR10oR40zggR12aoR13i435R3oR4tgghgoR1i-215102R2i1190171R3oR44tgR7oR8R19R10oR40zggR12aoR13i-14844R3oR4tgghgoR1i-550000R2i158000R3oR4oR5tR6tggR7oR8y3:LPFR10oy6:filtery2:lpggR12aoR13i28839R3oR16oR17fR8R18gggoR13i21926R3oR16oR17fR8y1:QgggoR13i16227R3oR16oR17fR8R19gggoR13i7858R3oR4fggoR13i-10083R3oR4tgghgoR1i-1232214R2i337772R3oR4oR5fR6tggR7oR8R29R10oR30i800ggR12aoR13i-2577R3oR4tgghgoR1i-980000R2i758000R3oR4oR5fR6tggR7oR8R29R10oR30zggR12aoR13i-9490R3oR4tgghghy11:connectionsaoy2:n1zy2:s1i2y2:n2i3y2:s2zgoR51i1R52i1R53i5R54zgoR51i1R52i2R53zR54i1goR51i2R52i1R53i1R54zgoR51i3R52i2R53i8R54i3goR51i4R52zR53zR54zgoR51i6R52zR53i2R54zgoR51i7R52zR53i3R54i1goR51i8R52i4R53i2R54i2goR51i9R52zR53i8R54zgoR51i10R52zR53i8R54i1ghy2:idi-1gy10:boundariesai4i6i7i5hghR50aoR51i1R52i3R53i6R54i2goR51i2R52zR53i1R54zgoR51i3R52zR53i1R54i1goR51i4R52zR53i6R54zgoR51i5R52zR53i6R54i3goR51i6R52i1R53zR54zghR55i-1g"),app_ui_view_menu_example_ExampleList.example("noise","oy5:nodesaoy1:xi1080377y1:yi-232161y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei-31164R3oR4fgghgoR1i-1080377R2i-463672R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.05y1:dd0.1y1:sd0.8y1:rd0.1gggR12aoR13i1913R3oR4tgghgoR1i-276932R2i463673R3oR4oR5fR6tggR7oR8y0:R10oy6:numberi10ggR12aoR13i-22684R3oR4tgghgoR1i-29355R2i-260072R3oy6:moduleoR5fR6fggR7oR8y5:noiseR10oy4:nonezggR12aoR13i251R3oR22oy2:ioty12:boundaryNodei2gggoR13i-29502R3oR22oR25fR26zgggoR13i26403R3oR22oR25fR26i1ggghy5:graphoR0aoR1i1170350R2i-342503R3oy5:smallzgR7oR8y6:%C3%97R10oy5:binOpi1ggR12aoR13i-30986R3oR4fggoR13i241R3oR4tggoR13i-16146R3oR4fgghgoR1i41739R2i-386371R3oR4oR5fR6tggR7oR8y3:sinR10oy10:oscillatorR31ggR12aoR13i-30979R3oy5:paramoR25fR8y4:freqgggoR13i-25004R3oR33oR25fR8y4:gaingggoR13i-19156R3oR33oR25fR8y6:detunegggoR13i358R3oR4tgghgoR1i687819R2i-363241R3oR28zgR7oR8R20R10oy4:duplzggR12aoR13i-31058R3oR4fggoR13i430R3oR4tggoR13i21683R3oR4tgghgoR1i138673R2i443745R3oR4oR5tR6tggR7oR8y3:delR10oy5:delayzggR12aoR13i23961R3oR33oR25fR8y4:timegggoR13i-9733R3oR4fggoR13i-23707R3oR4tgghgoR1i-256877R2i59480R3oR28zgR7oR8R29R10oR30i1ggR12aoR13i7709R3oR4fggoR13i-22461R3oR4tggoR13i24805R3oR4fgghgoR1i-637797R2i-416099R3oR28zgR7oR8y3:%2BR10oR30zggR12aoR13i8955R3oR4fggoR13i437R3oR4tggoR13i25571R3oR4fgghgoR1i-463827R2i999995R3oR4oR5fR6tggR7oR8R20R10oR21zggR12aoR13i-7455R3oR4tgghgoR1i-1055077R2i-140005R3oR4oR5fR6tggR7oR8R20R10oR21i1ggR12aoR13i-5845R3oR4tgghgoR1i1670648R2i-330436R3oy8:boundaryfgR7oR8R9R10oR37zggR12aoR13i-31175R3oR4fgghgoR1i1141106R2i-1010250R3oR42tgR7oR8R35R10oR37zggR12aoR13i15270R3oR4tgghgoR1i-787504R2i472199R3oR42tgR7oR8R34R10oR37zggR12aoR13i-6610R3oR4tgghghy11:connectionsaoy2:n1zy2:s1i1y2:n2i8y2:s2zgoR44i1R45i3R46i2R47zgoR44i2R45i1R46zR47zgoR44i2R45i2R46i3R47i1goR44i3R45i2R46i4R47zgoR44i4R45i1R46i5R47zgoR44i5R45i1R46i1R47zgoR44i6R45zR46i3R47zgoR44i7R45zR46i5R47i2goR44i9R45zR46zR47i2goR44i10R45zR46i4R47i2ghy2:idi-1gy10:boundariesai9i10i8hgoR1i-1072500R2i214328R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i-3238R3oR4tgghgoR1i-614743R2i60684R3oR28zgR7oR8R29R10oR30i1ggR12aoR13i28178R3oR4fggoR13i-5013R3oR4tggoR13i8732R3oR4fgghghR43aoR44i1R45zR46i3R47i1goR44i2R45zR46i5R47i2goR44i3R45zR46zR47zgoR44i4R45zR46i5R47zgoR44i5R45i1R46i3R47i2ghR48i-1g"),app_ui_view_menu_example_ExampleList.example("scream","oy5:nodesaoy1:xi1135000y1:yi-432y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei30244R3oR4fgghgoR1i-355000R2i19568R3oR4oR5fR6tggR7oR8y3:sinR10oy10:oscillatorR14ggR12aoR13i-12279R3oy5:paramoy2:iofR8y4:freqgggoR13i-30648R3oR16oR17fR8y4:gaingggoR13i17445R3oR16oR17fR8y6:detunegggoR13i1183R3oR4tgghgoR1i-597214R2i-1440660R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i7573R3oR4tgghgoR1i-1135000R2i-40431R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.05y1:dd0.1y1:sd0.8y1:rd0.1gggR12aoR13i768R3oR4tgghgoR1i486883R2i1440660R3oR4oR5fR6tggR7oR8y0:R10oy6:numberd0.001ggR12aoR13i-20169R3oR4tgghgoR1i301960R2i97672R3oy5:smallzgR7oR8R29R10oy4:duplzggR12aoR13i-30233R3oR4fggoR13i-1172R3oR4tggoR13i16876R3oR4tgghgoR1i211883R2i865660R3oR4oR5tR6tggR7oR8y3:delR10oy5:delayzggR12aoR13i11247R3oR16oR17fR8y4:timegggoR13i-14540R3oR4fggoR13i-30100R3oR4tgghgoR1i-963117R2i1195660R3oR4oR5fR6tggR7oR8R29R10oR30i1200ggR12aoR13i-7261R3oR4tgghgoR1i-487219R2i773122R3oR31zgR7oR8y6:%C3%97R10oy5:binOpi1ggR12aoR13i1316R3oR4fggoR13i-13971R3oR4tggoR13i24155R3oR4fgghgoR1i356883R2i-514340R3oR4oR5fR6tggR7oR8R23R10oR24oR25zR26d0.1R27i1R28d0.1gggR12aoR13i-29437R3oR4tgghgoR1i-129600R2i-611893R3oR31zgR7oR8R36R10oR37i1ggR12aoR13i-16772R3oR4fggoR13i19136R3oR4tggoR13i1979R3oR4fgghgoR1i291883R2i-1209340R3oR4oR5fR6tggR7oR8R29R10oR30i2ggR12aoR13i27980R3oR4tgghgoR1i-175565R2i-1042084R3oR31zgR7oR8R36R10oR37i1ggR12aoR13i-23843R3oR4fggoR13i14644R3oR4tggoR13i-3436R3oR4fgghghy11:connectionsaoy2:n1i1y2:s1i3y2:n2i5y2:s2zgoR39i2R40zR41i12R42zgoR39i3R40zR41i1R42i1goR39i4R40zR41i6R42zgoR39i5R40i1R41zR42zgoR39i5R40i2R41i6R42i1goR39i6R40i2R41i8R42zgoR39i7R40zR41i8R42i2goR39i8R40i1R41i1R42i2goR39i9R40zR41i10R42i2goR39i10R40i1R41i1R42zgoR39i11R40zR41i12R42i2goR39i12R40i1R41i10R42zghy2:idi-1g")]);
	}
	static sounds() {
		return app_ui_view_menu_example_ExampleList.category("Sounds",[app_ui_view_menu_example_ExampleList.example("hi-hat","oy5:nodesaoy1:xi812500y1:yi-13000y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei-31351R3oR4fgghgoR1i-262500R2i-20000R3oy6:moduleoR5fR6fggR7oR8y5:noiseR10oy4:nonezggR12aoR13i65R3oR14oy2:ioty12:boundaryNodei2gggoR13i-23794R3oR14oR17fR18zgggoR13i23382R3oR14oR17fR18i1ggghy5:graphoR0aoR1i1170350R2i-342503R3oy5:smallzgR7oR8y6:%C3%97R10oy5:binOpi1ggR12aoR13i-30986R3oR4fggoR13i241R3oR4tggoR13i-16146R3oR4fgghgoR1i41739R2i-386371R3oR4oR5fR6tggR7oR8y3:sinR10oy10:oscillatorR23ggR12aoR13i-30979R3oy5:paramoR17fR8y4:freqgggoR13i-25004R3oR25oR17fR8y4:gaingggoR13i-19156R3oR25oR17fR8y6:detunegggoR13i358R3oR4tgghgoR1i687819R2i-363241R3oR20zgR7oR8y0:R10oy4:duplzggR12aoR13i-31058R3oR4fggoR13i430R3oR4tggoR13i21683R3oR4tgghgoR1i138673R2i443745R3oR4oR5tR6tggR7oR8y3:delR10oy5:delayzggR12aoR13i23961R3oR25oR17fR8y4:timegggoR13i-9733R3oR4fggoR13i-23707R3oR4tgghgoR1i-256877R2i59480R3oR20zgR7oR8R21R10oR22i1ggR12aoR13i7709R3oR4fggoR13i-22461R3oR4tggoR13i24805R3oR4fgghgoR1i-637797R2i-416099R3oR20zgR7oR8y3:%2BR10oR22zggR12aoR13i8955R3oR4fggoR13i437R3oR4tggoR13i25571R3oR4fgghgoR1i-463827R2i999995R3oR4oR5fR6tggR7oR8R29R10oy6:numberzggR12aoR13i-7455R3oR4tgghgoR1i-1055077R2i-140005R3oR4oR5fR6tggR7oR8R29R10oR35i1ggR12aoR13i-5845R3oR4tgghgoR1i1670648R2i-330436R3oy8:boundaryfgR7oR8R9R10oR30zggR12aoR13i-31175R3oR4fgghgoR1i1141106R2i-1010250R3oR36tgR7oR8R27R10oR30zggR12aoR13i15270R3oR4tgghgoR1i-787504R2i472199R3oR36tgR7oR8R26R10oR30zggR12aoR13i-6610R3oR4tgghghy11:connectionsaoy2:n1zy2:s1i1y2:n2i8y2:s2zgoR38i1R39i3R40i2R41zgoR38i2R39i1R40zR41zgoR38i2R39i2R40i3R41i1goR38i3R39i2R40i4R41zgoR38i4R39i1R40i5R41zgoR38i5R39i1R40i1R41zgoR38i6R39zR40i3R41zgoR38i7R39zR40i5R41i2goR38i9R39zR40zR41i2goR38i10R39zR40i4R41i2ghy2:idi-1gy10:boundariesai9i10i8hgoR1i-812500R2i-545000R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:azy1:dd0.15y1:szy1:rd0.05gggR12aoR13i7621R3oR4tgghgoR1i-807500R2i545000R3oR4oR5fR6tggR7oR8R29R10oR35i10000ggR12aoR13i-8034R3oR4tgghghR37aoR38i1R39zR40zR41zgoR38i2R39zR40i1R41i1goR38i3R39zR40i1R41i2ghR42i-1g"),app_ui_view_menu_example_ExampleList.example("bass drum","oy5:nodesaoy1:xi1398607y1:yi412000y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei-28293R3oR4fgghgoR1i-516393R2i1345000R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:azy1:dd0.1y1:szy1:rd0.05gggR12aoR13i-19562R3oR4tggoR13i-10692R3oR4tgghgoR1i-91427R2i570038R3oR4oR5fR6tggR7oR8y2:sqR10oy10:oscillatorR20ggR12aoR13i31001R3oy5:paramoy2:iofR8y4:freqgggoR13i20724R3oR22oR23fR8y4:gaingggoR13i12279R3oR22oR23fR8y6:detunegggoR13i-87R3oR4tgghgoR1i-1398607R2i619772R3oR4oR5fR6tggR7oR8y0:R10oy6:numberi200ggR12aoR13i-337R3oR4tgghgoR1i-818585R2i600191R3oy5:smallzgR7oR8y6:%C3%97R10oy5:binOpi1ggR12aoR13i31078R3oR4fggoR13i-414R3oR4tggoR13i11854R3oR4fgghgoR1i488607R2i565000R3oR4oR5tR6tggR7oR8y3:LPFR10oy6:filtery2:lpggR12aoR13i-20849R3oR22oR23fR8R24gggoR13i15562R3oR22oR23fR8y1:QgggoR13i9022R3oR22oR23fR8R25gggoR13i31329R3oR4fggoR13i-8095R3oR4tgghgoR1i121393R2i-85228R3oR4oR5fR6tggR7oR8R27R10oR28i2000ggR12aoR13i10567R3oR4tggoR13i-7129R3oR4tgghgoR1i498607R2i1250000R3oR4oR5fR6tggR7oR8R27R10oR28zggR12aoR13i-15854R3oR4tgghgoR1i803607R2i-675000R3oy6:moduleoR5fR6fggR7oR8y5:noiseR10oy4:nonezggR12aoR13i15590R3oR36oR23ty12:boundaryNodei2gggoR13i-27949R3oR36oR23fR39zgggoR13i24287R3oR36oR23fR39i1ggghy5:graphoR0aoR1i1170350R2i-342503R3oR29zgR7oR8R30R10oR31i1ggR12aoR13i-30986R3oR4fggoR13i241R3oR4tggoR13i-16146R3oR4fgghgoR1i41739R2i-386371R3oR4oR5fR6tggR7oR8y3:sinR10oR21R41ggR12aoR13i-30979R3oR22oR23fR8R24gggoR13i-25004R3oR22oR23fR8R25gggoR13i-19156R3oR22oR23fR8R26gggoR13i358R3oR4tgghgoR1i687819R2i-363241R3oR29zgR7oR8R27R10oy4:duplzggR12aoR13i-31058R3oR4fggoR13i430R3oR4tggoR13i21683R3oR4tgghgoR1i138673R2i443745R3oR4oR5tR6tggR7oR8y3:delR10oy5:delayzggR12aoR13i23961R3oR22oR23fR8y4:timegggoR13i-9733R3oR4fggoR13i-23707R3oR4tgghgoR1i-256877R2i59480R3oR29zgR7oR8R30R10oR31i1ggR12aoR13i7709R3oR4fggoR13i-22461R3oR4tggoR13i24805R3oR4fgghgoR1i-637797R2i-416099R3oR29zgR7oR8y3:%2BR10oR31zggR12aoR13i8955R3oR4fggoR13i437R3oR4tggoR13i25571R3oR4fgghgoR1i-463827R2i999995R3oR4oR5fR6tggR7oR8R27R10oR28zggR12aoR13i-7455R3oR4tgghgoR1i-1055077R2i-140005R3oR4oR5fR6tggR7oR8R27R10oR28i1ggR12aoR13i-5845R3oR4tgghgoR1i1670648R2i-330436R3oy8:boundaryfgR7oR8R9R10oR42zggR12aoR13i-31175R3oR4fgghgoR1i1141106R2i-1010250R3oR47tgR7oR8R25R10oR42zggR12aoR13i15270R3oR4tgghgoR1i-787504R2i472199R3oR47tgR7oR8R24R10oR42zggR12aoR13i-6610R3oR4tgghghy11:connectionsaoy2:n1zy2:s1i1y2:n2i8y2:s2zgoR49i1R50i3R51i2R52zgoR49i2R50i1R51zR52zgoR49i2R50i2R51i3R52i1goR49i3R50i2R51i4R52zgoR49i4R50i1R51i5R52zgoR49i5R50i1R51i1R52zgoR49i6R50zR51i3R52zgoR49i7R50zR51i5R52i2goR49i9R50zR51zR52i2goR49i10R50zR51i4R52i2ghy2:idi-1gy10:boundariesai9i10i8hgoR1i-426393R2i-835000R3oR4oR5fR6tggR7oR8R14R10oR15oR16zR17d0.02R18zR19d0.01gggR12aoR13i-768R3oR4tgghgoR1i418607R2i-1345000R3oR4oR5fR6tggR7oR8R27R10oR28d0.5ggR12aoR13i19735R3oR4tgghgoR1i222602R2i-884938R3oR29zgR7oR8R30R10oR31i1ggR12aoR13i30648R3oR4fggoR13i3467R3oR4tggoR13i-11680R3oR4fgghgoR1i814191R2i223332R3oR29zgR7oR8R46R10oR31zggR12aoR13i23321R3oR4fggoR13i3123R3oR4tggoR13i-15826R3oR4fgghghR48aoR49i1R50zR51i4R52i2goR49i1R50i1R51i2R52i1goR49i2R50i3R51i5R52i3goR49i3R50zR51i4R52zgoR49i4R50i1R51i2R52zgoR49i5R50i4R51i12R52zgoR49i6R50zR51i5R52zgoR49i6R50i1R51i8R52i2goR49i7R50zR51i5R52i1goR49i8R50zR51i12R52i2goR49i9R50zR51i11R52zgoR49i10R50zR51i11R52i2goR49i11R50i1R51i8R52i1goR49i12R50i1R51zR52zghR53i-1g"),app_ui_view_menu_example_ExampleList.example("snare drum","oy5:nodesaoy1:xi1361803y1:yi91750y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei-30797R3oR4fgghgoR1i-569281R2i-294060R3oR4oR5fR6tggR7oR8y0:R10oy6:numberi2000ggR12aoR13i-2909R3oR4tgghgoR1i90672R2i-491668R3oy6:moduleoR5fR6fggR7oR8y5:noiseR10oy4:nonezggR12aoR13i7470R3oR16oy2:ioty12:boundaryNodei2gggoR13i-26430R3oR16oR19fR20zgggoR13i28507R3oR16oR19fR20i1ggghy5:graphoR0aoR1i1170350R2i-342503R3oy5:smallzgR7oR8y6:%C3%97R10oy5:binOpi1ggR12aoR13i-30986R3oR4fggoR13i241R3oR4tggoR13i-16146R3oR4fgghgoR1i41739R2i-386371R3oR4oR5fR6tggR7oR8y3:sinR10oy10:oscillatorR25ggR12aoR13i-30979R3oy5:paramoR19fR8y4:freqgggoR13i-25004R3oR27oR19fR8y4:gaingggoR13i-19156R3oR27oR19fR8y6:detunegggoR13i358R3oR4tgghgoR1i687819R2i-363241R3oR22zgR7oR8R14R10oy4:duplzggR12aoR13i-31058R3oR4fggoR13i430R3oR4tggoR13i21683R3oR4tgghgoR1i138673R2i443745R3oR4oR5tR6tggR7oR8y3:delR10oy5:delayzggR12aoR13i23961R3oR27oR19fR8y4:timegggoR13i-9733R3oR4fggoR13i-23707R3oR4tgghgoR1i-256877R2i59480R3oR22zgR7oR8R23R10oR24i1ggR12aoR13i7709R3oR4fggoR13i-22461R3oR4tggoR13i24805R3oR4fgghgoR1i-637797R2i-416099R3oR22zgR7oR8y3:%2BR10oR24zggR12aoR13i8955R3oR4fggoR13i437R3oR4tggoR13i25571R3oR4fgghgoR1i-463827R2i999995R3oR4oR5fR6tggR7oR8R14R10oR15zggR12aoR13i-7455R3oR4tgghgoR1i-1055077R2i-140005R3oR4oR5fR6tggR7oR8R14R10oR15i1ggR12aoR13i-5845R3oR4tgghgoR1i1670648R2i-330436R3oy8:boundaryfgR7oR8R9R10oR31zggR12aoR13i-31175R3oR4fgghgoR1i1141106R2i-1010250R3oR36tgR7oR8R29R10oR31zggR12aoR13i15270R3oR4tgghgoR1i-787504R2i472199R3oR36tgR7oR8R28R10oR31zggR12aoR13i-6610R3oR4tgghghy11:connectionsaoy2:n1zy2:s1i1y2:n2i8y2:s2zgoR38i1R39i3R40i2R41zgoR38i2R39i1R40zR41zgoR38i2R39i2R40i3R41i1goR38i3R39i2R40i4R41zgoR38i4R39i1R40i5R41zgoR38i5R39i1R40i1R41zgoR38i6R39zR40i3R41zgoR38i7R39zR40i5R41i2goR38i9R39zR40zR41i2goR38i10R39zR40i4R41i2ghy2:idi-1gy10:boundariesai9i10i8hgoR1i-678196R2i-910250R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:azy1:dd0.1y1:szy1:rd0.05gggR12aoR13i4985R3oR4tgghgoR1i-501804R2i640250R3oR16oR5fR6fggR7oR8R17R10oR18zggR12aoR13i-1893R3oR16oR19tR20i2gggoR13i-25689R3oR16oR19fR20zgggoR13i28374R3oR16oR19fR20i1ggghR21oR0aoR1i1170350R2i-342503R3oR22zgR7oR8R23R10oR24i1ggR12aoR13i-30986R3oR4fggoR13i241R3oR4tggoR13i-16146R3oR4fgghgoR1i41739R2i-386371R3oR4oR5fR6tggR7oR8R25R10oR26R25ggR12aoR13i-30979R3oR27oR19fR8R28gggoR13i-25004R3oR27oR19fR8R29gggoR13i-19156R3oR27oR19fR8R30gggoR13i358R3oR4tgghgoR1i687819R2i-363241R3oR22zgR7oR8R14R10oR31zggR12aoR13i-31058R3oR4fggoR13i430R3oR4tggoR13i21683R3oR4tgghgoR1i138673R2i443745R3oR4oR5tR6tggR7oR8R32R10oR33zggR12aoR13i23961R3oR27oR19fR8R34gggoR13i-9733R3oR4fggoR13i-23707R3oR4tgghgoR1i-256877R2i59480R3oR22zgR7oR8R23R10oR24i1ggR12aoR13i7709R3oR4fggoR13i-22461R3oR4tggoR13i24805R3oR4fgghgoR1i-637797R2i-416099R3oR22zgR7oR8R35R10oR24zggR12aoR13i8955R3oR4fggoR13i437R3oR4tggoR13i25571R3oR4fgghgoR1i-463827R2i999995R3oR4oR5fR6tggR7oR8R14R10oR15zggR12aoR13i-7455R3oR4tgghgoR1i-1055077R2i-140005R3oR4oR5fR6tggR7oR8R14R10oR15i1ggR12aoR13i-5845R3oR4tgghgoR1i1670648R2i-330436R3oR36fgR7oR8R9R10oR31zggR12aoR13i-31175R3oR4fgghgoR1i1141106R2i-1010250R3oR36tgR7oR8R29R10oR31zggR12aoR13i15270R3oR4tgghgoR1i-787504R2i472199R3oR36tgR7oR8R28R10oR31zggR12aoR13i-6610R3oR4tgghghR37aoR38zR39i1R40i8R41zgoR38i1R39i3R40i2R41zgoR38i2R39i1R40zR41zgoR38i2R39i2R40i3R41i1goR38i3R39i2R40i4R41zgoR38i4R39i1R40i5R41zgoR38i5R39i1R40i1R41zgoR38i6R39zR40i3R41zgoR38i7R39zR40i5R41i2goR38i9R39zR40zR41i2goR38i10R39zR40i4R41i2ghR42i-1gR43ai9i10i8hgoR1i-1361803R2i910250R3oR4oR5fR6tggR7oR8R14R10oR15i4000ggR12aoR13i-3042R3oR4tgghgoR1i-1261803R2i150250R3oR4oR5fR6tggR7oR8R44R10oR45oR46zR47d0.2R48zR49d0.15gggR12aoR13i5727R3oR4tgghgoR1i-96804R2i170250R3oR4oR5fR6tggR7oR8R14R10oR15d0.4ggR12aoR13i7338R3oR4tgghgoR1i262078R2i493891R3oR22zgR7oR8R23R10oR24i1ggR12aoR13i29523R3oR4fggoR13i-24078R3oR4fggoR13i-8228R3oR4tgghgoR1i674745R2i49143R3oR22zgR7oR8R35R10oR24zggR12aoR13i23188R3oR4fggoR13i619R3oR4tggoR13i-23946R3oR4fgghghR37aoR38i1R39zR40i2R41i2goR38i2R39zR40i9R41i2goR38i3R39zR40i2R41i1goR38i4R39zR40i8R41zgoR38i5R39zR40i4R41i2goR38i6R39zR40i4R41i1goR38i7R39zR40i8R41i1goR38i8R39i2R40i9R41zgoR38i9R39i1R40zR41zghR42i-1g"),app_ui_view_menu_example_ExampleList.example("drumset","oy5:nodesaoy1:xi2092312y1:yi-779168y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei24910R3oR4fggoR13i-29960R3oR4fgghgoR1i-1511733R2i1161504R3oy6:moduleoR5fR6fggR7oR8y5:hihatR10oy4:nonezggR12aoR13i-9892R3oR14oy2:ioty12:boundaryNodezggghy5:graphoR0aoR1i365000R2i-13333R3oR14oR5fR6fggR7oR8y5:noiseR10oR16zggR12aoR13i65R3oR14oR17tR18i2gggoR13i-23794R3oR14oR17fR18zgggoR13i23382R3oR14oR17fR18i1ggghR19oR0aoR1i1170350R2i-342503R3oy5:smallzgR7oR8y6:%C3%97R10oy5:binOpi1ggR12aoR13i-30986R3oR4fggoR13i241R3oR4tggoR13i-16146R3oR4fgghgoR1i41739R2i-386371R3oR4oR5fR6tggR7oR8y3:sinR10oy10:oscillatorR24ggR12aoR13i-30979R3oy5:paramoR17fR8y4:freqgggoR13i-25004R3oR26oR17fR8y4:gaingggoR13i-19156R3oR26oR17fR8y6:detunegggoR13i358R3oR4tgghgoR1i687819R2i-363241R3oR21zgR7oR8y0:R10oy4:duplzggR12aoR13i-31058R3oR4fggoR13i430R3oR4tggoR13i21683R3oR4tgghgoR1i138673R2i443745R3oR4oR5tR6tggR7oR8y3:delR10oy5:delayzggR12aoR13i23961R3oR26oR17fR8y4:timegggoR13i-9733R3oR4fggoR13i-23707R3oR4tgghgoR1i-256877R2i59480R3oR21zgR7oR8R22R10oR23i1ggR12aoR13i7709R3oR4fggoR13i-22461R3oR4tggoR13i24805R3oR4fgghgoR1i-637797R2i-416099R3oR21zgR7oR8y3:%2BR10oR23zggR12aoR13i8955R3oR4fggoR13i437R3oR4tggoR13i25571R3oR4fgghgoR1i-463827R2i999995R3oR4oR5fR6tggR7oR8R30R10oy6:numberzggR12aoR13i-7455R3oR4tgghgoR1i-1055077R2i-140005R3oR4oR5fR6tggR7oR8R30R10oR36i1ggR12aoR13i-5845R3oR4tgghgoR1i1670648R2i-330436R3oy8:boundaryfgR7oR8R9R10oR31zggR12aoR13i-31175R3oR4fgghgoR1i1141106R2i-1010250R3oR37tgR7oR8R28R10oR31zggR12aoR13i15270R3oR4tgghgoR1i-787504R2i472199R3oR37tgR7oR8R27R10oR31zggR12aoR13i-6610R3oR4tgghghy11:connectionsaoy2:n1zy2:s1i1y2:n2i8y2:s2zgoR39i1R40i3R41i2R42zgoR39i2R40i1R41zR42zgoR39i2R40i2R41i3R42i1goR39i3R40i2R41i4R42zgoR39i4R40i1R41i5R42zgoR39i5R40i1R41i1R42zgoR39i6R40zR41i3R42zgoR39i7R40zR41i5R42i2goR39i9R40zR41zR42i2goR39i10R40zR41i4R42i2ghy2:idi-1gy10:boundariesai9i10i8hgoR1i-185000R2i-538333R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:azy1:dd0.15y1:szy1:rd0.05gggR12aoR13i7621R3oR4tgghgoR1i-180000R2i551667R3oR4oR5fR6tggR7oR8R30R10oR36i10000ggR12aoR13i-8034R3oR4tgghgoR1i998396R2i-9208R3oR37fgR7oR8R9R10oR31zggR12aoR13i-31351R3oR4fgghghR38aoR39zR40zR41i3R42zgoR39i1R40zR41zR42i1goR39i2R40zR41zR42i2ghR43i-1gR44ai3hgoR1i-2092312R2i1150678R3oR14oR5fR6fggR7oR8y4:bassR10oR16zggR12aoR13i-10263R3oR14oR17tR18zggghR19oR0aoR1i-526077R2i1232653R3oR4oR5fR6tggR7oR8R45R10oR46oR47zR48d0.1R49zR50d0.05gggR12aoR13i-19562R3oR4tggoR13i-10692R3oR4tgghgoR1i-828269R2i487844R3oR21zgR7oR8R22R10oR23i1ggR12aoR13i31078R3oR4fggoR13i-414R3oR4tggoR13i11854R3oR4fgghgoR1i-101111R2i457691R3oR4oR5fR6tggR7oR8y2:sqR10oR25R52ggR12aoR13i31001R3oR26oR17fR8R27gggoR13i20724R3oR26oR17fR8R28gggoR13i12279R3oR26oR17fR8R29gggoR13i-87R3oR4tgghgoR1i478923R2i452653R3oR4oR5tR6tggR7oR8y3:LPFR10oy6:filtery2:lpggR12aoR13i-20849R3oR26oR17fR8R27gggoR13i15562R3oR26oR17fR8y1:QgggoR13i9022R3oR26oR17fR8R28gggoR13i31329R3oR4fggoR13i-8095R3oR4tgghgoR1i-1408291R2i507425R3oR4oR5fR6tggR7oR8R30R10oR36i200ggR12aoR13i-337R3oR4tgghgoR1i804507R2i110985R3oR21zgR7oR8R35R10oR23zggR12aoR13i23321R3oR4fggoR13i3123R3oR4tggoR13i-15826R3oR4fgghgoR1i111709R2i-197575R3oR4oR5fR6tggR7oR8R30R10oR36i2000ggR12aoR13i10567R3oR4tggoR13i-7129R3oR4tgghgoR1i793923R2i-787347R3oR14oR5fR6fggR7oR8R20R10oR16zggR12aoR13i15590R3oR14oR17tR18i2gggoR13i-27949R3oR14oR17fR18zgggoR13i24287R3oR14oR17fR18i1ggghR19oR0aoR1i1170350R2i-342503R3oR21zgR7oR8R22R10oR23i1ggR12aoR13i-30986R3oR4fggoR13i241R3oR4tggoR13i-16146R3oR4fgghgoR1i41739R2i-386371R3oR4oR5fR6tggR7oR8R24R10oR25R24ggR12aoR13i-30979R3oR26oR17fR8R27gggoR13i-25004R3oR26oR17fR8R28gggoR13i-19156R3oR26oR17fR8R29gggoR13i358R3oR4tgghgoR1i687819R2i-363241R3oR21zgR7oR8R30R10oR31zggR12aoR13i-31058R3oR4fggoR13i430R3oR4tggoR13i21683R3oR4tgghgoR1i138673R2i443745R3oR4oR5tR6tggR7oR8R32R10oR33zggR12aoR13i23961R3oR26oR17fR8R34gggoR13i-9733R3oR4fggoR13i-23707R3oR4tgghgoR1i-256877R2i59480R3oR21zgR7oR8R22R10oR23i1ggR12aoR13i7709R3oR4fggoR13i-22461R3oR4tggoR13i24805R3oR4fgghgoR1i-637797R2i-416099R3oR21zgR7oR8R35R10oR23zggR12aoR13i8955R3oR4fggoR13i437R3oR4tggoR13i25571R3oR4fgghgoR1i-463827R2i999995R3oR4oR5fR6tggR7oR8R30R10oR36zggR12aoR13i-7455R3oR4tgghgoR1i-1055077R2i-140005R3oR4oR5fR6tggR7oR8R30R10oR36i1ggR12aoR13i-5845R3oR4tgghgoR1i1670648R2i-330436R3oR37fgR7oR8R9R10oR31zggR12aoR13i-31175R3oR4fgghgoR1i1141106R2i-1010250R3oR37tgR7oR8R28R10oR31zggR12aoR13i15270R3oR4tgghgoR1i-787504R2i472199R3oR37tgR7oR8R27R10oR31zggR12aoR13i-6610R3oR4tgghghR38aoR39zR40i1R41i8R42zgoR39i1R40i3R41i2R42zgoR39i2R40i1R41zR42zgoR39i2R40i2R41i3R42i1goR39i3R40i2R41i4R42zgoR39i4R40i1R41i5R42zgoR39i5R40i1R41i1R42zgoR39i6R40zR41i3R42zgoR39i7R40zR41i5R42i2goR39i9R40zR41zR42i2goR39i10R40zR41i4R42i2ghR43i-1gR44ai9i10i8hgoR1i488923R2i1137653R3oR4oR5fR6tggR7oR8R30R10oR36zggR12aoR13i-15854R3oR4tgghgoR1i-436077R2i-947347R3oR4oR5fR6tggR7oR8R45R10oR46oR47zR48d0.02R49zR50d0.01gggR12aoR13i-768R3oR4tgghgoR1i212918R2i-997285R3oR21zgR7oR8R22R10oR23i1ggR12aoR13i30648R3oR4fggoR13i3467R3oR4tggoR13i-11680R3oR4fgghgoR1i408923R2i-1457347R3oR4oR5fR6tggR7oR8R30R10oR36d0.5ggR12aoR13i19735R3oR4tgghgoR1i997235R2i173203R3oR37fgR7oR8R9R10oR31zggR12aoR13i-28293R3oR4fgghghR38aoR39zR40zR41i1R42i2goR39zR40i1R41i2R42i1goR39i1R40i1R41i2R42zgoR39i2R40i3R41i3R42i3goR39i3R40i4R41i5R42zgoR39i4R40zR41i1R42zgoR39i5R40i1R41i12R42zgoR39i6R40zR41i3R42zgoR39i6R40i1R41i7R42i2goR39i7R40zR41i5R42i2goR39i8R40zR41i3R42i1goR39i9R40zR41i10R42zgoR39i10R40i1R41i7R42i1goR39i11R40zR41i10R42i2ghR43i-1gR44ai12hgoR1i-927392R2i1208737R3oR14oR5fR6fggR7oR8y5:snareR10oR16zggR12aoR13i-11934R3oR14oR17tR18zggghR19oR0aoR1i-186815R2i-373844R3oR4oR5fR6tggR7oR8R30R10oR36i2000ggR12aoR13i-2909R3oR4tgghgoR1i473138R2i-571452R3oR14oR5fR6fggR7oR8R20R10oR16zggR12aoR13i7470R3oR14oR17tR18i2gggoR13i-26430R3oR14oR17fR18zgggoR13i28507R3oR14oR17fR18i1ggghR19oR0aoR1i1170350R2i-342503R3oR21zgR7oR8R22R10oR23i1ggR12aoR13i-30986R3oR4fggoR13i241R3oR4tggoR13i-16146R3oR4fgghgoR1i41739R2i-386371R3oR4oR5fR6tggR7oR8R24R10oR25R24ggR12aoR13i-30979R3oR26oR17fR8R27gggoR13i-25004R3oR26oR17fR8R28gggoR13i-19156R3oR26oR17fR8R29gggoR13i358R3oR4tgghgoR1i687819R2i-363241R3oR21zgR7oR8R30R10oR31zggR12aoR13i-31058R3oR4fggoR13i430R3oR4tggoR13i21683R3oR4tgghgoR1i138673R2i443745R3oR4oR5tR6tggR7oR8R32R10oR33zggR12aoR13i23961R3oR26oR17fR8R34gggoR13i-9733R3oR4fggoR13i-23707R3oR4tgghgoR1i-256877R2i59480R3oR21zgR7oR8R22R10oR23i1ggR12aoR13i7709R3oR4fggoR13i-22461R3oR4tggoR13i24805R3oR4fgghgoR1i-637797R2i-416099R3oR21zgR7oR8R35R10oR23zggR12aoR13i8955R3oR4fggoR13i437R3oR4tggoR13i25571R3oR4fgghgoR1i-463827R2i999995R3oR4oR5fR6tggR7oR8R30R10oR36zggR12aoR13i-7455R3oR4tgghgoR1i-1055077R2i-140005R3oR4oR5fR6tggR7oR8R30R10oR36i1ggR12aoR13i-5845R3oR4tgghgoR1i1670648R2i-330436R3oR37fgR7oR8R9R10oR31zggR12aoR13i-31175R3oR4fgghgoR1i1141106R2i-1010250R3oR37tgR7oR8R28R10oR31zggR12aoR13i15270R3oR4tgghgoR1i-787504R2i472199R3oR37tgR7oR8R27R10oR31zggR12aoR13i-6610R3oR4tgghghR38aoR39zR40i1R41i8R42zgoR39i1R40i3R41i2R42zgoR39i2R40i1R41zR42zgoR39i2R40i2R41i3R42i1goR39i3R40i2R41i4R42zgoR39i4R40i1R41i5R42zgoR39i5R40i1R41i1R42zgoR39i6R40zR41i3R42zgoR39i7R40zR41i5R42i2goR39i9R40zR41zR42i2goR39i10R40zR41i4R42i2ghR43i-1gR44ai9i10i8hgoR1i1057211R2i-30641R3oR21zgR7oR8R35R10oR23zggR12aoR13i23188R3oR4fggoR13i619R3oR4tggoR13i-23946R3oR4fgghgoR1i-295730R2i-990034R3oR4oR5fR6tggR7oR8R45R10oR46oR47zR48d0.1R49zR50d0.05gggR12aoR13i4985R3oR4tgghgoR1i-119338R2i560466R3oR14oR5fR6fggR7oR8R20R10oR16zggR12aoR13i-1893R3oR14oR17tR18i2gggoR13i-25689R3oR14oR17fR18zgggoR13i28374R3oR14oR17fR18i1ggghR19oR0aoR1i1170350R2i-342503R3oR21zgR7oR8R22R10oR23i1ggR12aoR13i-30986R3oR4fggoR13i241R3oR4tggoR13i-16146R3oR4fgghgoR1i41739R2i-386371R3oR4oR5fR6tggR7oR8R24R10oR25R24ggR12aoR13i-30979R3oR26oR17fR8R27gggoR13i-25004R3oR26oR17fR8R28gggoR13i-19156R3oR26oR17fR8R29gggoR13i358R3oR4tgghgoR1i687819R2i-363241R3oR21zgR7oR8R30R10oR31zggR12aoR13i-31058R3oR4fggoR13i430R3oR4tggoR13i21683R3oR4tgghgoR1i138673R2i443745R3oR4oR5tR6tggR7oR8R32R10oR33zggR12aoR13i23961R3oR26oR17fR8R34gggoR13i-9733R3oR4fggoR13i-23707R3oR4tgghgoR1i-256877R2i59480R3oR21zgR7oR8R22R10oR23i1ggR12aoR13i7709R3oR4fggoR13i-22461R3oR4tggoR13i24805R3oR4fgghgoR1i-637797R2i-416099R3oR21zgR7oR8R35R10oR23zggR12aoR13i8955R3oR4fggoR13i437R3oR4tggoR13i25571R3oR4fgghgoR1i-463827R2i999995R3oR4oR5fR6tggR7oR8R30R10oR36zggR12aoR13i-7455R3oR4tgghgoR1i-1055077R2i-140005R3oR4oR5fR6tggR7oR8R30R10oR36i1ggR12aoR13i-5845R3oR4tgghgoR1i1670648R2i-330436R3oR37fgR7oR8R9R10oR31zggR12aoR13i-31175R3oR4fgghgoR1i1141106R2i-1010250R3oR37tgR7oR8R28R10oR31zggR12aoR13i15270R3oR4tgghgoR1i-787504R2i472199R3oR37tgR7oR8R27R10oR31zggR12aoR13i-6610R3oR4tgghghR38aoR39zR40i1R41i8R42zgoR39i1R40i3R41i2R42zgoR39i2R40i1R41zR42zgoR39i2R40i2R41i3R42i1goR39i3R40i2R41i4R42zgoR39i4R40i1R41i5R42zgoR39i5R40i1R41i1R42zgoR39i6R40zR41i3R42zgoR39i7R40zR41i5R42i2goR39i9R40zR41zR42i2goR39i10R40zR41i4R42i2ghR43i-1gR44ai9i10i8hgoR1i644544R2i414107R3oR21zgR7oR8R22R10oR23i1ggR12aoR13i29523R3oR4fggoR13i-24078R3oR4fggoR13i-8228R3oR4tgghgoR1i-979337R2i830466R3oR4oR5fR6tggR7oR8R30R10oR36i4000ggR12aoR13i-3042R3oR4tgghgoR1i-879337R2i70466R3oR4oR5fR6tggR7oR8R45R10oR46oR47zR48d0.2R49zR50d0.15gggR12aoR13i5727R3oR4tgghgoR1i285662R2i90466R3oR4oR5fR6tggR7oR8R30R10oR36d0.4ggR12aoR13i7338R3oR4tgghgoR1i1326119R2i-13965R3oR37fgR7oR8R9R10oR31zggR12aoR13i-30797R3oR4fgghghR38aoR39zR40zR41i1R42i2goR39i1R40zR41i2R42i2goR39i2R40i1R41i9R42zgoR39i3R40zR41i1R42i1goR39i4R40zR41i5R42zgoR39i5R40i2R41i2R42zgoR39i6R40zR41i4R42i2goR39i7R40zR41i4R42i1goR39i8R40zR41i5R42i1ghR43i-1gR44ai9hgoR1i-923251R2i-11585R3oR4oR5tR6tggR7oR8R32R10oR33zggR12aoR13i-22220R3oR26oR17fR8R34gggoR13i18577R3oR4fggoR13i3512R3oR4tgghgoR1i-1290885R2i-493948R3oR4oR5fR6tggR7oR8R30R10oR36d0.25ggR12aoR13i9196R3oR4tgghgoR1i-400581R2i-120202R3oR4oR5tR6tggR7oR8R32R10oR33zggR12aoR13i-22109R3oR26oR17fR8R34gggoR13i19482R3oR4fggoR13i3423R3oR4tgghgoR1i-757805R2i-599936R3oR4oR5fR6tggR7oR8R30R10oR36d0.5ggR12aoR13i9307R3oR4tgghgoR1i111603R2i-170352R3oR4oR5tR6tggR7oR8R32R10oR33zggR12aoR13i-21641R3oR26oR17fR8R34gggoR13i18504R3oR4tggoR13i26310R3oR4fgghgoR1i-254560R2i-713376R3oR4oR5fR6tggR7oR8R30R10oR36d0.75ggR12aoR13i9775R3oR4tgghgoR1i-1451537R2i92464R3oR4oR5tR6tggR7oR8R32R10oR33zggR12aoR13i-22401R3oR26oR17fR8R34gggoR13i21153R3oR4fggoR13i3723R3oR4tgghgoR1i-1829171R2i-384899R3oR4oR5fR6tggR7oR8R30R10oR36zggR12aoR13i9015R3oR4tgghgoR1i-1072031R2i492714R3oR21zgR7oR8R30R10oR31zggR12aoR13i21524R3oR4fggoR13i-12839R3oR4tggoR13i-5106R3oR4tgghgoR1i-113834R2i614914R3oR21zgR7oR8R35R10oR23zggR12aoR13i-12912R3oR4fggoR13i-4212R3oR4tggoR13i-27693R3oR4fgghgoR1i291257R2i433417R3oR21zgR7oR8R35R10oR23zggR12aoR13i27204R3oR4fggoR13i-4570R3oR4tggoR13i-27904R3oR4fgghgoR1i653434R2i255314R3oR21zgR7oR8R35R10oR23zggR12aoR13i26846R3oR4fggoR13i-27993R3oR4fggoR13i-6535R3oR4tgghgoR1i1105190R2i-923953R3oR4oR5tR6tggR7oR8R32R10oR33zggR12aoR13i-27246R3oR26oR17fR8R34gggoR13i11352R3oR4fggoR13i1456R3oR4tgghgoR1i462305R2i-1208737R3oR4oR5fR6tggR7oR8R30R10oR36i1ggR12aoR13i4170R3oR4tgghgoR1i1413166R2i-262292R3oR21zgR7oR8R30R10oR31zggR12aoR13i-6505R3oR4tggoR13i-20064R3oR4tggoR13i25829R3oR4fgghgoR1i957017R2i22847R3oR4oR5tR6tggR7oR8y3:cmpR10oy10:compressorzggR12aoR13i24881R3oR4fggoR13i-5587R3oR4tgghghR38aoR39i1R40zR41i12R42zgoR39i2R40zR41i10R42i1goR39i3R40zR41i6R42i1goR39i4R40i2R41i14R42i2goR39i5R40zR41i4R42zgoR39i6R40i2R41i15R42i1goR39i7R40zR41i6R42zgoR39i8R40i1R41i13R42zgoR39i9R40zR41i8R42zgoR39i10R40i2R41i13R42i2goR39i11R40zR41i10R42zgoR39i12R40i1R41i4R42i1goR39i12R40i2R41i8R42i2goR39i13R40i1R41i14R42zgoR39i14R40i1R41i15R42zgoR39i15R40i2R41i19R42zgoR39i16R40i2R41zR42i1goR39i17R40zR41i16R42zgoR39i18R40zR41zR42zgoR39i18R40i1R41i16R42i1goR39i19R40i1R41i18R42i2ghR43i-1g"),app_ui_view_menu_example_ExampleList.example("bell","oy5:nodesaoy1:xi1467125y1:yi-573933y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei-31207R3oR4fgghgoR1i542250R2i-593250R3oR4oR5fR6tggR7oR8y3:sinR10oy10:oscillatorR14ggR12aoR13i30950R3oy5:paramoy2:iofR8y4:freqgggoR13i-14512R3oR16oR17fR8y4:gaingggoR13i-20211R3oR16oR17fR8y6:detunegggoR13i209R3oR4tgghgoR1i-660778R2i-604737R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i524R3oR4tgghgoR1i617036R2i-1215489R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.001y1:di2y1:szy1:rd0.2gggR12aoR13i16904R3oR4tgghgoR1i-723201R2i1190833R3oR4oR5fR6tggR7oR8y0:R10oy6:numberi2ggR12aoR13i-12742R3oR4tgghgoR1i-364951R2i1192923R3oR4oR5fR6tggR7oR8R29R10oR30d0.775ggR12aoR13i-17220R3oR4tgghgoR1i-1467125R2i1172292R3oR4oR5fR6tggR7oR8R29R10oR30d1.5ggR12aoR13i-13515R3oR4tgghgoR1i-1116560R2i1184415R3oR4oR5fR6tggR7oR8R29R10oR30d1.48ggR12aoR13i-17971R3oR4tgghgoR1i21137R2i-568973R3oy5:smallzgR7oR8y6:%C3%97R10oy5:binOpi1ggR12aoR13i-30892R3oR4fggoR13i-466R3oR4tggoR13i16030R3oR4fgghgoR1i-1295796R2i441409R3oy6:moduleoR5fR6fggR7oR8y3:modR10oy4:nonezggR12aoR13i13050R3oR34oR17fy12:boundaryNodezgggoR13i-4373R3oR34oR17tR37i2gggoR13i18311R3oR34oR17fR37i1ggghy5:graphoR0aoR1i389828R2i160116R3oR4oR5fR6tggR7oR8R14R10oR15R14ggR12aoR13i30626R3oR16oR17fR8R18gggoR13i13160R3oR16oR17fR8R19gggoR13i4330R3oR16oR17fR8R20gggoR13i-18946R3oR4tgghgoR1i177595R2i-472266R3oR31zgR7oR8y3:%2BR10oR33zggR12aoR13i12470R3oR4fggoR13i-19811R3oR4tggoR13i389R3oR4fgghgoR1i-442371R2i225989R3oR31zgR7oR8R32R10oR33i1ggR12aoR13i-790R3oR4tggoR13i23202R3oR4fggoR13i-28470R3oR4fgghgoR1i976574R2i-441154R3oR4oR5fR6tggR7oR8R29R10oR30i1ggR12aoR13i-31027R3oR4tgghgoR1i-1146628R2i12317R3oR4oR5fR6tggR7oR8R21R10oR22zggR12aoR13i2946R3oR4tgghgoR1i635853R2i1104696R3oy8:boundarytgR7oR8y5:powerR10oy4:duplzggR12aoR13i-18256R3oR4tgghgoR1i-98813R2i-1107635R3oR40fgR7oR8y5:scaleR10oR42zggR12aoR13i11605R3oR4fgghgoR1i-962188R2i784665R3oR40tgR7oR8y4:n-thR10oR42zggR12aoR13i-8214R3oR4tgghghy11:connectionsaoy2:n1zy2:s1i3y2:n2i1y2:s2zgoR46i1R47i1R48i6R49zgoR46i2R47zR48zR49zgoR46i3R47zR48i1R49i2goR46i4R47zR48i2R49i2goR46i5R47zR48zR49i1goR46i7R47zR48i2R49i1ghy2:idi-1gy10:boundariesai5i7i6hgoR1i8022R2i-162488R3oR31zgR7oR8R39R10oR33zggR12aoR13i27548R3oR4fggoR13i-15385R3oR4tggoR13i22143R3oR4fggoR13i10883R3oR4fggoR13i4864R3oR4fgghgoR1i-486916R2i445025R3oR34oR5fR6fggR7oR8R35R10oR36zggR12aoR13i13802R3oR34oR17fR37zgggoR13i-8812R3oR34oR17tR37i2gggoR13i19073R3oR34oR17fR37i1ggghR38oR0aoR1i389828R2i160116R3oR4oR5fR6tggR7oR8R14R10oR15R14ggR12aoR13i30626R3oR16oR17fR8R18gggoR13i13160R3oR16oR17fR8R19gggoR13i4330R3oR16oR17fR8R20gggoR13i-18946R3oR4tgghgoR1i177595R2i-472266R3oR31zgR7oR8R39R10oR33zggR12aoR13i12470R3oR4fggoR13i-19811R3oR4tggoR13i389R3oR4fgghgoR1i-442371R2i225989R3oR31zgR7oR8R32R10oR33i1ggR12aoR13i-790R3oR4tggoR13i23202R3oR4fggoR13i-28470R3oR4fgghgoR1i976574R2i-441154R3oR4oR5fR6tggR7oR8R29R10oR30i1ggR12aoR13i-31027R3oR4tgghgoR1i-1146628R2i12317R3oR4oR5fR6tggR7oR8R21R10oR22zggR12aoR13i2946R3oR4tgghgoR1i635853R2i1104696R3oR40tgR7oR8R41R10oR42zggR12aoR13i-18256R3oR4tgghgoR1i-98813R2i-1107635R3oR40fgR7oR8R43R10oR42zggR12aoR13i11605R3oR4fgghgoR1i-962188R2i784665R3oR40tgR7oR8R44R10oR42zggR12aoR13i-8214R3oR4tgghghR45aoR46zR47i3R48i1R49zgoR46i1R47i1R48i6R49zgoR46i2R47zR48zR49zgoR46i3R47zR48i1R49i2goR46i4R47zR48i2R49i2goR46i5R47zR48zR49i1goR46i7R47zR48i2R49i1ghR50i-1gR51ai5i7i6hgoR1i111199R2i1211870R3oR4oR5fR6tggR7oR8R29R10oR30i3ggR12aoR13i-12978R3oR4tgghgoR1i492114R2i1215489R3oR4oR5fR6tggR7oR8R29R10oR30d0.503ggR12aoR13i-17635R3oR4tgghgoR1i334220R2i441242R3oR34oR5fR6fggR7oR8R35R10oR36zggR12aoR13i13449R3oR34oR17fR37zgggoR13i-20684R3oR34oR17tR37i2gggoR13i18784R3oR34oR17fR37i1ggghR38oR0aoR1i389828R2i160116R3oR4oR5fR6tggR7oR8R14R10oR15R14ggR12aoR13i30626R3oR16oR17fR8R18gggoR13i13160R3oR16oR17fR8R19gggoR13i4330R3oR16oR17fR8R20gggoR13i-18946R3oR4tgghgoR1i177595R2i-472266R3oR31zgR7oR8R39R10oR33zggR12aoR13i12470R3oR4fggoR13i-19811R3oR4tggoR13i389R3oR4fgghgoR1i-442371R2i225989R3oR31zgR7oR8R32R10oR33i1ggR12aoR13i-790R3oR4tggoR13i23202R3oR4fggoR13i-28470R3oR4fgghgoR1i976574R2i-441154R3oR4oR5fR6tggR7oR8R29R10oR30i1ggR12aoR13i-31027R3oR4tgghgoR1i-1146628R2i12317R3oR4oR5fR6tggR7oR8R21R10oR22zggR12aoR13i2946R3oR4tgghgoR1i635853R2i1104696R3oR40tgR7oR8R41R10oR42zggR12aoR13i-18256R3oR4tgghgoR1i-98813R2i-1107635R3oR40fgR7oR8R43R10oR42zggR12aoR13i11605R3oR4fgghgoR1i-962188R2i784665R3oR40tgR7oR8R44R10oR42zggR12aoR13i-8214R3oR4tgghghR45aoR46zR47i3R48i1R49zgoR46i1R47i1R48i6R49zgoR46i2R47zR48zR49zgoR46i3R47zR48i1R49i2goR46i4R47zR48i2R49i2goR46i5R47zR48zR49i1goR46i7R47zR48i2R49i1ghR50i-1gR51ai5i7i6hgoR1i978337R2i1208287R3oR4oR5fR6tggR7oR8R29R10oR30d3.501ggR12aoR13i-13376R3oR4tgghgoR1i1406116R2i1206820R3oR4oR5fR6tggR7oR8R29R10oR30d0.475ggR12aoR13i-18948R3oR4tgghgoR1i1155861R2i464329R3oR34oR5fR6fggR7oR8R35R10oR36zggR12aoR13i12427R3oR34oR17fR37zgggoR13i-26406R3oR34oR17tR37i2gggoR13i18079R3oR34oR17fR37i1ggghR38oR0aoR1i389828R2i160116R3oR4oR5fR6tggR7oR8R14R10oR15R14ggR12aoR13i30626R3oR16oR17fR8R18gggoR13i13160R3oR16oR17fR8R19gggoR13i4330R3oR16oR17fR8R20gggoR13i-18946R3oR4tgghgoR1i177595R2i-472266R3oR31zgR7oR8R39R10oR33zggR12aoR13i12470R3oR4fggoR13i-19811R3oR4tggoR13i389R3oR4fgghgoR1i-442371R2i225989R3oR31zgR7oR8R32R10oR33i1ggR12aoR13i-790R3oR4tggoR13i23202R3oR4fggoR13i-28470R3oR4fgghgoR1i976574R2i-441154R3oR4oR5fR6tggR7oR8R29R10oR30i1ggR12aoR13i-31027R3oR4tgghgoR1i-1146628R2i12317R3oR4oR5fR6tggR7oR8R21R10oR22zggR12aoR13i2946R3oR4tgghgoR1i635853R2i1104696R3oR40tgR7oR8R41R10oR42zggR12aoR13i-18256R3oR4tgghgoR1i-98813R2i-1107635R3oR40fgR7oR8R43R10oR42zggR12aoR13i11605R3oR4fgghgoR1i-962188R2i784665R3oR40tgR7oR8R44R10oR42zggR12aoR13i-8214R3oR4tgghghR45aoR46zR47i3R48i1R49zgoR46i1R47i1R48i6R49zgoR46i2R47zR48zR49zgoR46i3R47zR48i1R49i2goR46i4R47zR48i2R49i2goR46i5R47zR48zR49i1goR46i7R47zR48i2R49i1ghR50i-1gR51ai5i7i6hghR45aoR46i1R47i3R48zR49zgoR46i2R47zR48i8R49zgoR46i3R47zR48i1R49i1goR46i4R47zR48i11R49i2goR46i5R47zR48i11R49zgoR46i6R47zR48i9R49i2goR46i7R47zR48i9R49zgoR46i8R47i1R48i1R49zgoR46i9R47i1R48i10R49zgoR46i10R47i1R48i8R49i2goR46i11R47i1R48i10R49i2goR46i12R47zR48i14R49i2goR46i13R47zR48i14R49zgoR46i14R47i1R48i10R49i3goR46i15R47zR48i17R49i2goR46i16R47zR48i17R49zgoR46i17R47i1R48i10R49i4ghR50i-1g"),app_ui_view_menu_example_ExampleList.example("pipe organ","oy5:nodesaoy1:xi1625127y1:yi-230523y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei-31221R3oR4fgghgoR1i-712225R2i-808828R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.5y1:dd0.1y1:si1y1:rd0.3gggR12aoR13i8924R3oR4tggoR13i2821R3oR4tggoR13i21856R3oR4tggoR13i27585R3oR4tgghgoR1i-726656R2i-225524R3oy5:smallzgR7oR8y3:%2BR10oy5:binOpzggR12aoR13i11355R3oR4fggoR13i-302R3oR4tggoR13i5760R3oR4fggoR13i19865R3oR4fggoR13i25213R3oR4fgghgoR1i-387407R2i1179433R3oR4oR5fR6tggR7oR8y0:R10oy6:numberi2ggR12aoR13i-15894R3oR4tgghgoR1i643566R2i-249633R3oR4oR5tR6tggR7oR8y3:cmpR10oy10:compressorzggR12aoR13i31250R3oR4fggoR13i195R3oR4tgghgoR1i182733R2i1146567R3oR4oR5fR6tggR7oR8R23R10oR24i3ggR12aoR13i-15806R3oR4tgghgoR1i198274R2i-1205073R3oR4oR5fR6tggR7oR8R23R10oR24d0.6ggR12aoR13i15503R3oR4tgghgoR1i211920R2i-540947R3oR20zgR7oR8y6:%C3%97R10oR22i1ggR12aoR13i-28595R3oR4fggoR13i-15913R3oR4fggoR13i16102R3oR4tgghgoR1i-336049R2i-1198246R3oR4oR5fR6tggR7oR8R23R10oR24d0.7ggR12aoR13i16018R3oR4tgghgoR1i-361648R2i-373919R3oR20zgR7oR8R27R10oR22i1ggR12aoR13i-22492R3oR4fggoR13i-15398R3oR4fggoR13i16208R3oR4tgghgoR1i-1078271R2i1201546R3oR4oR5fR6tggR7oR8R23R10oR24i1ggR12aoR13i-15625R3oR4tgghgoR1i-1072118R2i458845R3oy6:moduleoR5fR6fggR7oR8y4:nsinR10oy4:nonezggR12aoR13i-15223R3oR28oy2:iofy12:boundaryNodezgggoR13i-10733R3oR28oR31tR32i2gggoR13i15791R3oR28oR31fR32i1ggghy5:graphoR0aoR1i557456R2i345255R3oR4oR5fR6tggR7oR8y3:sinR10oy10:oscillatorR34ggR12aoR13i30646R3oy5:paramoR31fR8y4:freqgggoR13i-23075R3oR36oR31fR8y4:gaingggoR13i14119R3oR36oR31fR8y6:detunegggoR13i-10954R3oR4tgghgoR1i-777544R2i435255R3oR4oR5fR6tggR7oR8y1:fR10oy9:frequencyzggR12aoR13i-512R3oR4tgghgoR1i-274912R2i409491R3oR20zgR7oR8R27R10oR22i1ggR12aoR13i30904R3oR4fggoR13i-770R3oR4tggoR13i18196R3oR4fgghgoR1i-37712R2i-310676R3oy8:boundarytgR7oR8R38R10oy4:duplzggR12aoR13i8337R3oR4tgghgoR1i987700R2i-490573R3oR42fgR7oR8R9R10oR43zggR12aoR13i20462R3oR4fgghgoR1i-438768R2i1054320R3oR42tgR7oR8y4:n-thR10oR43zggR12aoR13i-13219R3oR4tgghghy11:connectionsaoy2:n1zy2:s1i3y2:n2i4y2:s2zgoR46i1R47zR48i2R49zgoR46i2R47i1R48zR49zgoR46i3R47zR48zR49i1goR46i5R47zR48i2R49i2ghy2:idi-1gy10:boundariesai3i5i4hgoR1i-1005732R2i-1183351R3oR4oR5fR6tggR7oR8R23R10oR24i1ggR12aoR13i15783R3oR4tgghgoR1i-1011027R2i-386677R3oR20zgR7oR8R27R10oR22i1ggR12aoR13i-15702R3oR4fggoR13i16518R3oR4tggoR13i-9499R3oR4fgghgoR1i-401511R2i422988R3oR28oR5fR6fggR7oR8R29R10oR30zggR12aoR13i-15208R3oR28oR31fR32zgggoR13i-20403R3oR28oR31tR32i2gggoR13i15522R3oR28oR31fR32i1ggghR33oR0aoR1i557456R2i345255R3oR4oR5fR6tggR7oR8R34R10oR35R34ggR12aoR13i30646R3oR36oR31fR8R37gggoR13i-23075R3oR36oR31fR8R38gggoR13i14119R3oR36oR31fR8R39gggoR13i-10954R3oR4tgghgoR1i-777544R2i435255R3oR4oR5fR6tggR7oR8R40R10oR41zggR12aoR13i-512R3oR4tgghgoR1i-274912R2i409491R3oR20zgR7oR8R27R10oR22i1ggR12aoR13i30904R3oR4fggoR13i-770R3oR4tggoR13i18196R3oR4fgghgoR1i-37712R2i-310676R3oR42tgR7oR8R38R10oR43zggR12aoR13i8337R3oR4tgghgoR1i987700R2i-490573R3oR42fgR7oR8R9R10oR43zggR12aoR13i20462R3oR4fgghgoR1i-438768R2i1054320R3oR42tgR7oR8R44R10oR43zggR12aoR13i-13219R3oR4tgghghR45aoR46zR47i3R48i4R49zgoR46i1R47zR48i2R49zgoR46i2R47i1R48zR49zgoR46i3R47zR48zR49i1goR46i5R47zR48i2R49i2ghR50i-1gR51ai3i5i4hgoR1i175283R2i387437R3oR28oR5fR6fggR7oR8R29R10oR30zggR12aoR13i-15314R3oR28oR31fR32zgggoR13i-25426R3oR28oR31tR32i2gggoR13i15610R3oR28oR31fR32i1ggghR33oR0aoR1i557456R2i345255R3oR4oR5fR6tggR7oR8R34R10oR35R34ggR12aoR13i30646R3oR36oR31fR8R37gggoR13i-23075R3oR36oR31fR8R38gggoR13i14119R3oR36oR31fR8R39gggoR13i-10954R3oR4tgghgoR1i-777544R2i435255R3oR4oR5fR6tggR7oR8R40R10oR41zggR12aoR13i-512R3oR4tgghgoR1i-274912R2i409491R3oR20zgR7oR8R27R10oR22i1ggR12aoR13i30904R3oR4fggoR13i-770R3oR4tggoR13i18196R3oR4fgghgoR1i-37712R2i-310676R3oR42tgR7oR8R38R10oR43zggR12aoR13i8337R3oR4tgghgoR1i987700R2i-490573R3oR42fgR7oR8R9R10oR43zggR12aoR13i20462R3oR4fgghgoR1i-438768R2i1054320R3oR42tgR7oR8R44R10oR43zggR12aoR13i-13219R3oR4tgghghR45aoR46zR47i3R48i4R49zgoR46i1R47zR48i2R49zgoR46i2R47i1R48zR49zgoR46i3R47zR48zR49i1goR46i5R47zR48i2R49i2ghR50i-1gR51ai3i5i4hgoR1i-1625126R2i1205074R3oR4oR5fR6tggR7oR8R23R10oR24d0.5ggR12aoR13i-15469R3oR4tgghgoR1i-1607440R2i465221R3oR28oR5fR6fggR7oR8R29R10oR30zggR12aoR13i-15051R3oR28oR31fR32zgggoR13i-6695R3oR28oR31tR32i2gggoR13i15947R3oR28oR31fR32i1ggghR33oR0aoR1i557456R2i345255R3oR4oR5fR6tggR7oR8R34R10oR35R34ggR12aoR13i30646R3oR36oR31fR8R37gggoR13i-23075R3oR36oR31fR8R38gggoR13i14119R3oR36oR31fR8R39gggoR13i-10954R3oR4tgghgoR1i-777544R2i435255R3oR4oR5fR6tggR7oR8R40R10oR41zggR12aoR13i-512R3oR4tgghgoR1i-274912R2i409491R3oR20zgR7oR8R27R10oR22i1ggR12aoR13i30904R3oR4fggoR13i-770R3oR4tggoR13i18196R3oR4fgghgoR1i-37712R2i-310676R3oR42tgR7oR8R38R10oR43zggR12aoR13i8337R3oR4tgghgoR1i987700R2i-490573R3oR42fgR7oR8R9R10oR43zggR12aoR13i20462R3oR4fgghgoR1i-438768R2i1054320R3oR42tgR7oR8R44R10oR43zggR12aoR13i-13219R3oR4tgghghR45aoR46zR47i3R48i4R49zgoR46i1R47zR48i2R49zgoR46i2R47i1R48zR49zgoR46i3R47zR48zR49i1goR46i5R47zR48i2R49i2ghR50i-1gR51ai3i5i4hgoR1i-1536499R2i-1183623R3oR4oR5fR6tggR7oR8R23R10oR24d0.8ggR12aoR13i15838R3oR4tgghgoR1i-1545719R2i-472922R3oR20zgR7oR8R27R10oR22i1ggR12aoR13i-15578R3oR4fggoR13i16365R3oR4tggoR13i-3831R3oR4fgghghR45aoR46i1R47zR48i9R49zgoR46i1R47i1R48i7R49zgoR46i1R47i2R48i13R49i2goR46i1R47i3R48i19R49i2goR46i2R47i1R48i4R49zgoR46i3R47zR48i14R49i2goR46i4R47i1R48zR49zgoR46i5R47zR48i15R49i2goR46i6R47zR48i7R49i1goR46i7R47i2R48i15R49zgoR46i8R47zR48i9R49i1goR46i9R47i2R48i14R49zgoR46i10R47zR48i11R49i2goR46i11R47i1R48i2R49i3goR46i12R47zR48i13R49zgoR46i13R47i1R48i11R49zgoR46i14R47i1R48i2R49zgoR46i15R47i1R48i2R49i2goR46i16R47zR48i17R49i2goR46i17R47i1R48i2R49i4goR46i18R47zR48i19R49zgoR46i19R47i1R48i17R49zghR50i-1g"),app_ui_view_menu_example_ExampleList.example("slash","oy5:nodesaoy1:xi391107y1:yi1144614y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei-23914R3oR4fggoR13i-8679R3oR4fgghgoR1i-1336107R2i-147614R3oR4oR5fR6tggR7oR8y0:R10oy6:numberi2000ggR12aoR13i-464R3oR4tgghgoR1i-313893R2i487614R3oy6:moduleoR5fR6fggR7oR8y5:noiseR10oy4:nonezggR12aoR13i7502R3oR16oy2:ioty12:boundaryNodei2gggoR13i-11348R3oR16oR19fR20zgggoR13i-17983R3oR16oR19fR20i1ggghy5:graphoR0aoR1i1170350R2i-342503R3oy5:smallzgR7oR8y6:%C3%97R10oy5:binOpi1ggR12aoR13i-30986R3oR4fggoR13i241R3oR4tggoR13i-16146R3oR4fgghgoR1i41739R2i-386371R3oR4oR5fR6tggR7oR8y3:sinR10oy10:oscillatorR25ggR12aoR13i-30979R3oy5:paramoR19fR8y4:freqgggoR13i-25004R3oR27oR19fR8y4:gaingggoR13i-19156R3oR27oR19fR8y6:detunegggoR13i358R3oR4tgghgoR1i687819R2i-363241R3oR22zgR7oR8R14R10oy4:duplzggR12aoR13i-31058R3oR4fggoR13i430R3oR4tggoR13i21683R3oR4tgghgoR1i138673R2i443745R3oR4oR5tR6tggR7oR8y3:delR10oy5:delayzggR12aoR13i23961R3oR27oR19fR8y4:timegggoR13i-9733R3oR4fggoR13i-23707R3oR4tgghgoR1i-256877R2i59480R3oR22zgR7oR8R23R10oR24i1ggR12aoR13i7709R3oR4fggoR13i-22461R3oR4tggoR13i24805R3oR4fgghgoR1i-637797R2i-416099R3oR22zgR7oR8y3:%2BR10oR24zggR12aoR13i8955R3oR4fggoR13i437R3oR4tggoR13i25571R3oR4fgghgoR1i-463827R2i999995R3oR4oR5fR6tggR7oR8R14R10oR15zggR12aoR13i-7455R3oR4tgghgoR1i-1055077R2i-140005R3oR4oR5fR6tggR7oR8R14R10oR15i1ggR12aoR13i-5845R3oR4tgghgoR1i1670648R2i-330436R3oy8:boundaryfgR7oR8R9R10oR31zggR12aoR13i-31175R3oR4fgghgoR1i1141106R2i-1010250R3oR36tgR7oR8R29R10oR31zggR12aoR13i15270R3oR4tgghgoR1i-787504R2i472199R3oR36tgR7oR8R28R10oR31zggR12aoR13i-6610R3oR4tgghghy11:connectionsaoy2:n1zy2:s1i1y2:n2i8y2:s2zgoR38i1R39i3R40i2R41zgoR38i2R39i1R40zR41zgoR38i2R39i2R40i3R41i1goR38i3R39i2R40i4R41zgoR38i4R39i1R40i5R41zgoR38i5R39i1R40i1R41zgoR38i6R39zR40i3R41zgoR38i7R39zR40i5R41i2goR38i9R39zR40zR41i2goR38i10R39zR40i4R41i2ghy2:idi-1gy10:boundariesai9i10i8hgoR1i-68893R2i-812386R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.08y1:dd0.2y1:szy1:rd0.15gggR12aoR13i15339R3oR4tggoR13i21254R3oR4tggoR13i3623R3oR4tgghgoR1i361107R2i-207386R3oR4oR5fR6tggR7oR8R14R10oR15d0.8ggR12aoR13i28701R3oR4tgghgoR1i-466352R2i-170816R3oR22zgR7oR8R23R10oR24i1ggR12aoR13i-31394R3oR4fggoR13i13433R3oR4tggoR13i-10162R3oR4fgghgoR1i1085000R2i325614R3oR16oR5fR6fggR7oR8R17R10oR18zggR12aoR13i22737R3oR16oR19tR20i2gggoR13i-19609R3oR16oR19fR20zgggoR13i-9405R3oR16oR19fR20i1ggghR21oR0aoR1i1170350R2i-342503R3oR22zgR7oR8R23R10oR24i1ggR12aoR13i-30986R3oR4fggoR13i241R3oR4tggoR13i-16146R3oR4fgghgoR1i41739R2i-386371R3oR4oR5fR6tggR7oR8R25R10oR26R25ggR12aoR13i-30979R3oR27oR19fR8R28gggoR13i-25004R3oR27oR19fR8R29gggoR13i-19156R3oR27oR19fR8R30gggoR13i358R3oR4tgghgoR1i687819R2i-363241R3oR22zgR7oR8R14R10oR31zggR12aoR13i-31058R3oR4fggoR13i430R3oR4tggoR13i21683R3oR4tgghgoR1i138673R2i443745R3oR4oR5tR6tggR7oR8R32R10oR33zggR12aoR13i23961R3oR27oR19fR8R34gggoR13i-9733R3oR4fggoR13i-23707R3oR4tgghgoR1i-256877R2i59480R3oR22zgR7oR8R23R10oR24i1ggR12aoR13i7709R3oR4fggoR13i-22461R3oR4tggoR13i24805R3oR4fgghgoR1i-637797R2i-416099R3oR22zgR7oR8R35R10oR24zggR12aoR13i8955R3oR4fggoR13i437R3oR4tggoR13i25571R3oR4fgghgoR1i-463827R2i999995R3oR4oR5fR6tggR7oR8R14R10oR15zggR12aoR13i-7455R3oR4tgghgoR1i-1055077R2i-140005R3oR4oR5fR6tggR7oR8R14R10oR15i1ggR12aoR13i-5845R3oR4tgghgoR1i1670648R2i-330436R3oR36fgR7oR8R9R10oR31zggR12aoR13i-31175R3oR4fgghgoR1i1141106R2i-1010250R3oR36tgR7oR8R29R10oR31zggR12aoR13i15270R3oR4tgghgoR1i-787504R2i472199R3oR36tgR7oR8R28R10oR31zggR12aoR13i-6610R3oR4tgghghR37aoR38zR39i1R40i8R41zgoR38i1R39i3R40i2R41zgoR38i2R39i1R40zR41zgoR38i2R39i2R40i3R41i1goR38i3R39i2R40i4R41zgoR38i4R39i1R40i5R41zgoR38i5R39i1R40i1R41zgoR38i6R39zR40i3R41zgoR38i7R39zR40i5R41i2goR38i9R39zR40zR41i2goR38i10R39zR40i4R41i2ghR42i-1gR43ai9i10i8hgoR1i1530000R2i-284386R3oR4oR5fR6tggR7oR8R14R10oR15i4000ggR12aoR13i22011R3oR4tgghgoR1i840000R2i-894386R3oR4oR5fR6tggR7oR8R14R10oR15d0.2ggR12aoR13i18127R3oR4tgghgoR1i743759R2i-504394R3oR22zgR7oR8R23R10oR24i1ggR12aoR13i-27793R3oR4fggoR13i11807R3oR4tggoR13i-13289R3oR4fgghgoR1i-42420R2i-95047R3oR22zgR7oR8R23R10oR24i1ggR12aoR13i-16077R3oR4fggoR13i20068R3oR4tggoR13i-2715R3oR4fgghgoR1i-810000R2i-589386R3oR4oR5fR6tggR7oR8R25R10oR26R25ggR12aoR13i-23159R3oR27oR19fR8R28gggoR13i-28966R3oR27oR19fR8R29gggoR13i25129R3oR27oR19fR8R30gggoR13i15939R3oR4tgghgoR1i-1322214R2i-1144614R3oR4oR5fR6tggR7oR8R14R10oR15i1ggR12aoR13i8257R3oR4tgghgoR1i-1530000R2i-769386R3oR4oR5fR6tggR7oR8R14R10oR15i400ggR12aoR13i2450R3oR4tgghgoR1i-819670R2i-171592R3oR22zgR7oR8R35R10oR24zggR12aoR13i30952R3oR4fggoR13i22R3oR4tggoR13i-15477R3oR4fgghghR37aoR38i1R39zR40i14R41zgoR38i2R39zR40zR41zgoR38i3R39zR40i10R41zgoR38i3R39i1R40i5R41i2goR38i3R39i2R40i9R41zgoR38i4R39zR40i10R41i2goR38i5R39i1R40i2R41i2goR38i6R39zR40zR41i1goR38i7R39zR40i6R41i2goR38i8R39zR40i9R41i2goR38i9R39i1R40i6R41i1goR38i10R39i1R40i2R41i1goR38i11R39i3R40i14R41i2goR38i12R39zR40i11R41zgoR38i13R39zR40i11R41i1goR38i14R39i1R40i5R41zghR42i-1g"),app_ui_view_menu_example_ExampleList.example("rain","oy5:nodesaoy1:xi521107y1:yi1093307y4:typeoy6:normaloy5:inputty6:outputfggy7:settingoy4:namey3:outy4:roleoy11:destinationzggy7:socketsaoy5:anglei-19038R3oR4fgghgoR1i-607500R2i-328307R3oy6:moduleoR5fR6fggR7oR8y5:noiseR10oy4:nonezggR12aoR13i5617R3oR14oy2:ioty12:boundaryNodei2gggoR13i-8908R3oR14oR17fR18zgggoR13i-16230R3oR14oR17fR18i1ggghy5:graphoR0aoR1i1170350R2i-342503R3oy5:smallzgR7oR8y6:%C3%97R10oy5:binOpi1ggR12aoR13i-30986R3oR4fggoR13i241R3oR4tggoR13i-16146R3oR4fgghgoR1i41739R2i-386371R3oR4oR5fR6tggR7oR8y3:sinR10oy10:oscillatorR23ggR12aoR13i-30979R3oy5:paramoR17fR8y4:freqgggoR13i-25004R3oR25oR17fR8y4:gaingggoR13i-19156R3oR25oR17fR8y6:detunegggoR13i358R3oR4tgghgoR1i687819R2i-363241R3oR20zgR7oR8y0:R10oy4:duplzggR12aoR13i-31058R3oR4fggoR13i430R3oR4tggoR13i21683R3oR4tgghgoR1i138673R2i443745R3oR4oR5tR6tggR7oR8y3:delR10oy5:delayzggR12aoR13i23961R3oR25oR17fR8y4:timegggoR13i-9733R3oR4fggoR13i-23707R3oR4tgghgoR1i-256877R2i59480R3oR20zgR7oR8R21R10oR22i1ggR12aoR13i7709R3oR4fggoR13i-22461R3oR4tggoR13i24805R3oR4fgghgoR1i-637797R2i-416099R3oR20zgR7oR8y3:%2BR10oR22zggR12aoR13i8955R3oR4fggoR13i437R3oR4tggoR13i25571R3oR4fgghgoR1i-463827R2i999995R3oR4oR5fR6tggR7oR8R29R10oy6:numberzggR12aoR13i-7455R3oR4tgghgoR1i-1055077R2i-140005R3oR4oR5fR6tggR7oR8R29R10oR35i1ggR12aoR13i-5845R3oR4tgghgoR1i1670648R2i-330436R3oy8:boundaryfgR7oR8R9R10oR30zggR12aoR13i-31175R3oR4fgghgoR1i1141106R2i-1010250R3oR36tgR7oR8R27R10oR30zggR12aoR13i15270R3oR4tgghgoR1i-787504R2i472199R3oR36tgR7oR8R26R10oR30zggR12aoR13i-6610R3oR4tgghghy11:connectionsaoy2:n1zy2:s1i1y2:n2i8y2:s2zgoR38i1R39i3R40i2R41zgoR38i2R39i1R40zR41zgoR38i2R39i2R40i3R41i1goR38i3R39i2R40i4R41zgoR38i4R39i1R40i5R41zgoR38i5R39i1R40i1R41zgoR38i6R39zR40i3R41zgoR38i7R39zR40i5R41i2goR38i9R39zR40zR41i2goR38i10R39zR40i4R41i2ghy2:idi-1gy10:boundariesai9i10i8hgoR1i-647500R2i-1093307R3oR4oR5fR6tggR7oR8R29R10oR35i1500ggR12aoR13i15186R3oR4tgghgoR1i-142500R2i-903307R3oR4oR5fR6tggR7oR8R29R10oR35d0.5ggR12aoR13i22508R3oR4tgghgoR1i-27500R2i36693R3oR4oR5tR6tggR7oR8y3:HSFR10oy6:filtery2:hsggR12aoR13i-11534R3oR25oR17fR8R26gggoR13i-17933R3oR25oR17fR8y1:QgggoR13i-3343R3oR25oR17fR8R27gggoR13i-25799R3oR4fggoR13i8304R3oR4tgghgoR1i265286R2i-623535R3oR4oR5fR6tggR7oR8R29R10oR35i4000ggR12aoR13i19882R3oR4tgghgoR1i605286R2i-183079R3oR4oR5fR6tggR7oR8R29R10oR35i35ggR12aoR13i28073R3oR4tgghgoR1i647500R2i316693R3oR4oR5fR6tggR7oR8y3:envR10oy8:envelopeoy1:ad0.2y1:dd0.1y1:si1y1:rd0.6gggR12aoR13i30303R3oR4tgghgoR1i267182R2i359186R3oR20zgR7oR8R21R10oR22i1ggR12aoR13i-23112R3oR4fggoR13i12378R3oR4tggoR13i-1113R3oR4fgghghR37aoR38i1R39zR40i4R41i3goR38i2R39zR40i1R41i2goR38i3R39zR40i1R41i1goR38i4R39i4R40i8R41zgoR38i5R39zR40i4R41zgoR38i6R39zR40i4R41i2goR38i7R39zR40i8R41i2goR38i8R39i1R40zR41zghR42i-1g")]);
	}
	static category(name,data) {
		return new app_ui_view_menu_example_ExampleCategory(name,data);
	}
	static example(name,dataString) {
		let us = new haxe_Unserializer(dataString);
		us.setResolver(null);
		return new app_ui_view_menu_example_Example(name,us.unserialize());
	}
}
$hxClasses["app.ui.view.menu.example.ExampleList"] = app_ui_view_menu_example_ExampleList;
app_ui_view_menu_example_ExampleList.__name__ = "app.ui.view.menu.example.ExampleList";
class app_ui_view_menu_example_OpenExamplesMenu extends app_ui_view_menu_Menu {
	constructor(graph) {
		super(graph);
		this.enableClosingOnOutsideClick = true;
		this.addTitle(function() {
			return "Select Examples";
		});
		this.init();
	}
	init() {
		this.showCategories();
	}
	showCategories() {
		let _g = 0;
		let _g1 = app_ui_view_menu_example_ExampleList.getExamples();
		while(_g < _g1.length) {
			let cat = _g1[_g];
			++_g;
			let t = cat.name;
			let _g2 = $bind(this,this.openCategory);
			let cat1 = cat;
			this.addRow([this.item(function() {
				return t;
			},function() {
				_g2(cat1);
			})]);
		}
	}
	openCategory(cat) {
		let _gthis = this;
		let tmp = this.graph.op;
		let tmp1 = this.graph;
		let cat1 = cat.name;
		let _this = cat.examples;
		let result = new Array(_this.length);
		let _g = 0;
		let _g1 = _this.length;
		while(_g < _g1) {
			let i = _g++;
			let ex = _this[i];
			result[i] = new common_PairData(ex.name,ex);
		}
		tmp.openMenu(new app_ui_view_menu_dialogue_SelectItemDialogue(tmp1,function(ex) {
			if(ex != null) {
				_gthis.loadExample(ex);
			}
		},cat1,result));
	}
	loadExample(ex) {
		this.graph.op.loadAsRoot(ex.data,true);
		this.graph.doneOperation(app_ui_view_main_graph_history_GraphOperation.Import);
		this.close();
	}
}
$hxClasses["app.ui.view.menu.example.OpenExamplesMenu"] = app_ui_view_menu_example_OpenExamplesMenu;
app_ui_view_menu_example_OpenExamplesMenu.__name__ = "app.ui.view.menu.example.OpenExamplesMenu";
app_ui_view_menu_example_OpenExamplesMenu.__super__ = app_ui_view_menu_Menu;
Object.assign(app_ui_view_menu_example_OpenExamplesMenu.prototype, {
	__class__: app_ui_view_menu_example_OpenExamplesMenu
});
class app_ui_view_menu_nodeedit_NodeEditMenu extends app_ui_view_menu_Menu {
	constructor(node,graph) {
		app_ui_Sprite._hx_skip_constructor = true;
		super();
		app_ui_Sprite._hx_skip_constructor = false;
		this._hx_constructor(node,graph);
	}
	_hx_constructor(node,graph) {
		let _gthis = this;
		super._hx_constructor(graph);
		this.node = node;
		let op = graph.op;
		this.updated = false;
		this.enableClosingOnOutsideClick = true;
		this.addTitle(function() {
			return "Edit Node";
		});
		if(node.type._hx_index == 1) {
			this.addRow([this.item(function() {
				return "go inside";
			},function() {
				op.gotoGraph(node.moduleGraph);
				graph.doneOperation(app_ui_view_main_graph_history_GraphOperation.Goto);
			},true)]);
			let _g = $bind(this,this.renameSetting);
			let node1 = node;
			this.addRow([this.item(function() {
				return "rename: " + node.setting.name;
			},function() {
				_g(node1);
			})]);
			let _g1 = 0;
			let _g2 = node.moduleBoundaries;
			while(_g1 < _g2.length) {
				let boundary = _g2[_g1];
				++_g1;
				let _g = $bind(this,this.renameSetting);
				let node = boundary;
				this.addRow([this.item(function() {
					return "rename param: " + boundary.setting.name;
				},function() {
					_g(node);
				})]);
			}
			this.addRow([this.item(function() {
				return "decompose";
			},function() {
				graph.raw.decomposeModule(node);
				graph.doneOperation(app_ui_view_main_graph_history_GraphOperation.DecomposeModule);
			},true)]);
			this.addSpace();
		}
		if(node.type._hx_index == 3) {
			let _g = $bind(this,this.renameSetting);
			let node1 = node;
			this.addRow([this.item(function() {
				return "rename: " + node.setting.name;
			},function() {
				_g(node1);
			})]);
			this.addSpace();
		}
		let _g = node.setting.role;
		switch(_g._hx_index) {
		case 1:
			this.addRoleEditor("wave type",["sine","sawtooth","square","triangle"],["sin","saw","sq","tri"],["sin","saw","sq","tri"],_g.type,function(a) {
				return synth_NodeRole.Oscillator(a);
			});
			break;
		case 4:
			this.addRoleEditor("filter type",["low pass","high pass","band pass","band stop","low shelf","high shelf","peak"],["LPF","HPF","BPF","BSF","LSF","HSF","PF"],["lp","hp","bp","bs","ls","hs","p"],_g.type,function(a) {
				return synth_NodeRole.Filter(a);
			});
			break;
		case 6:
			let env = _g.env;
			this.addNumberEditor("A [sec]","Attack",env.a,"sec",true,function(v) {
				env.a = v;
			});
			this.addNumberEditor("D [sec]","Decay",env.d,"sec",true,function(v) {
				env.d = v;
			});
			this.addNumberEditor("S [lv] ","Sustain",env.s,"level",true,function(v) {
				env.s = v;
			});
			this.addNumberEditor("R [sec]","Release",env.r,"sec",true,function(v) {
				env.r = v;
			});
			this.addSpace();
			break;
		case 7:
			let num = _g.num;
			this.addNumberEditor("Value","Value",num.get_value(),"real",false,function(v) {
				num.set_value(v);
			});
			break;
		default:
		}
		if(node.type._hx_index != 3 && node.setting.role._hx_index != 2) {
			this.addRow([this.item(function() {
				return "remove";
			},function() {
				graph.raw.destroyNode(node);
				_gthis.updated = true;
			},true)]);
			this.addRow([this.item(function() {
				return "copy";
			},function() {
				let data = graph.raw.serialize(graph_serial_NodeFilter.single(node),false);
				graph.op.copy(data);
			},true)]);
		}
		this.addRow([this.item(function() {
			return "close menu";
		},null,true)]);
		this.primaryPointerDownOutsize = false;
	}
	onKeyboardUpdate(keyboard) {
		super.onKeyboardUpdate(keyboard);
		if(pot_input_Keyboard.isKeyDown(keyboard,"Enter")) {
			this.close();
		}
	}
	onClose() {
		if(this.updated) {
			this.graph.doneOperation(app_ui_view_main_graph_history_GraphOperation.NodeEdit);
		}
	}
	renameSetting(node) {
		let _gthis = this;
		this.graph.op.openMenu(app_ui_view_menu_nodeedit_NodeEditMenu.createNameEditDialogue(this.graph,node,function() {
			_gthis.updated = true;
		}));
	}
	addRoleEditor(title,descriptions,names,types,currentType,typeToRole) {
		let buttons = [];
		let _gthis = this;
		let n1 = descriptions.length;
		if(n1 != names.length || n1 != types.length) {
			throw haxe_Exception.thrown("!?");
		}
		let _g = 0;
		while(_g < n1) {
			let i = _g++;
			let t = descriptions[i];
			buttons.push(this.radioButton(function() {
				return t;
			},function() {
				_gthis.node.setting.name = names[i];
				_gthis.node.setting.role = typeToRole(types[i]);
				_gthis.node.notifyUpdate();
				_gthis.updated = true;
			},currentType == types[i]));
		}
		let wrapper = new app_ui_Sprite();
		wrapper.element.set_layout(new app_ui_core_layout_FlexLayout(true));
		app_ui_view_menu_RadioButton.addGroup(buttons);
		let _g1 = 0;
		while(_g1 < buttons.length) wrapper.addChild(buttons[_g1++]);
		wrapper.element.style.grow = 1;
		let t = title;
		this.addRow([this.label(function() {
			return t;
		}),wrapper],buttons.length);
	}
	addNumberEditor(labelName,fullName,initial,range,oneLine,onChanged) {
		let _gthis = this;
		new app_ui_view_menu_nodeedit_NumberEditor(this.graph,this,labelName,fullName,range,oneLine,initial,function(v) {
			onChanged(v);
			_gthis.updated = true;
			_gthis.node.notifyUpdate();
		});
	}
	static createNameEditDialogue(graph,node,onChange) {
		return new app_ui_view_menu_dialogue_EditNameDialog(graph,"",8,function(name) {
			if(name != null) {
				node.setting.name = name;
				node.notifyUpdate();
				if(onChange != null) {
					onChange();
				}
			}
		});
	}
}
$hxClasses["app.ui.view.menu.nodeedit.NodeEditMenu"] = app_ui_view_menu_nodeedit_NodeEditMenu;
app_ui_view_menu_nodeedit_NodeEditMenu.__name__ = "app.ui.view.menu.nodeedit.NodeEditMenu";
app_ui_view_menu_nodeedit_NodeEditMenu.__super__ = app_ui_view_menu_Menu;
Object.assign(app_ui_view_menu_nodeedit_NodeEditMenu.prototype, {
	__class__: app_ui_view_menu_nodeedit_NodeEditMenu
});
class app_ui_view_menu_nodeedit_NumberEditor {
	constructor(graph,menu,labelName,fullName,range,oneLine,initialValue,onChanged) {
		this.insideUpdate = false;
		this.graph = graph;
		this.menu = menu;
		this.labelName = labelName;
		this.fullName = fullName;
		this.range = range;
		this.oneLine = oneLine;
		this.initialValue = initialValue;
		this.onChanged = onChanged;
		this.minTextLength = 5;
		this.maxTextLength = oneLine ? 6 : 10;
		this.negated = initialValue < 0;
		this.initSliders();
		this.initLabel();
		if(oneLine) {
			let t = labelName;
			menu.addRow([menu.label(function() {
				return t;
			}),this.labelWrapper,this.slidersWrapper],this.sliders.length);
		} else {
			menu.addRow([this.labelWrapper,this.slidersWrapper],this.sliders.length);
		}
		this.update(initialValue < 0 ? -initialValue : initialValue);
	}
	initSliders() {
		switch(this.range) {
		case "level":
			this.sliderTypes = [app_ui_view_SliderType.Linear];
			this.sliderScales = [1];
			break;
		case "real":
			this.sliderTypes = [app_ui_view_SliderType.Logarithmic(3),app_ui_view_SliderType.Logarithmic(3),app_ui_view_SliderType.Logarithmic(3),app_ui_view_SliderType.Logarithmic(3)];
			this.sliderScales = [1,10,100,1000];
			break;
		case "hz":case "sec":
			this.sliderTypes = [app_ui_view_SliderType.Logarithmic(10)];
			this.sliderScales = [1];
			break;
		}
		let min = app_ui_view_menu_nodeedit_NumberRangeTools.min(this.range);
		let max = app_ui_view_menu_nodeedit_NumberRangeTools.max(this.range);
		let a = this.initialValue;
		let absInitial = a < 0 ? -a : a;
		let _g = [];
		let _g1 = 0;
		let _g2 = this.sliderTypes.length;
		while(_g1 < _g2) {
			let i = _g1++;
			_g.push(new app_ui_view_Slider(false,min / this.sliderScales[i],max / this.sliderScales[i],absInitial,this.sliderTypes[i],$bind(this,this.updateBySlider)));
		}
		this.sliders = _g;
		let _g3 = 0;
		let _g4 = this.sliders;
		while(_g3 < _g4.length) {
			let s = _g4[_g3];
			++_g3;
			s.element.style.size.h = app_ui_core_LengthOrAuto.Px(20);
			s.element.style.margin.top = app_ui_core_LengthOrAuto.Px(2);
		}
		this.sliders[0].element.style.margin.top = app_ui_core_LengthOrAuto.Zero;
		this.slidersWrapper = new app_ui_Sprite();
		this.slidersWrapper.element.style.grow = 2.4;
		this.slidersWrapper.element.set_layout(new app_ui_core_layout_FlexLayout(true));
		let _g5 = 0;
		let _g6 = this.sliders;
		while(_g5 < _g6.length) this.slidersWrapper.addChild(_g6[_g5++]);
	}
	initLabel() {
		this.labelWrapper = new app_ui_Sprite();
		let _gthis = this;
		this.labelWrapper.element.set_layout(new app_ui_core_layout_FlexLayout(true));
		let signed = app_ui_view_menu_nodeedit_NumberRangeTools.signed(this.range);
		let checkbox = signed ? this.menu.checkBox(function() {
			return "negative";
		},function(flag) {
			_gthis.negated = flag;
			_gthis.update(_gthis.sliders[0].value);
		},this.negated) : null;
		let t = this.fullName;
		let nameLabel = this.menu.label(function() {
			return t;
		});
		let valueLabel = this.menu.item(function() {
			return _gthis.text;
		},function() {
			_gthis.graph.op.openMenu(new app_ui_view_menu_dialogue_CalcEnterDialog(_gthis.graph,_gthis.fullName,function(v) {
				if(v != null) {
					if(signed) {
						_gthis.negated = v < 0;
						if(_gthis.negated) {
							v = -v;
						}
						checkbox.setSelected(_gthis.negated);
					} else if(v < 0) {
						v = 0;
					}
					let min = app_ui_view_menu_nodeedit_NumberRangeTools.min(_gthis.range);
					let max = app_ui_view_menu_nodeedit_NumberRangeTools.max(_gthis.range);
					_gthis.update(v < min ? min : v > max ? max : v);
				}
			}));
		},false,false);
		if(!this.oneLine) {
			this.labelWrapper.addChild(nameLabel);
		}
		this.labelWrapper.addChild(valueLabel);
		if(!this.oneLine && signed) {
			checkbox.element.style.margin.top = app_ui_core_LengthOrAuto.Auto;
			this.labelWrapper.addChild(checkbox);
		}
		if(!this.oneLine) {
			let cs = this.labelWrapper.children;
			cs[0].element.style.margin.top = app_ui_core_LengthOrAuto.Auto;
			cs[cs.length - 1].element.style.margin.bottom = app_ui_core_LengthOrAuto.Auto;
		}
	}
	updateBySlider(absVal) {
		if(this.sliders == null) {
			return;
		}
		if(this.insideUpdate) {
			return;
		}
		let truncation = absVal < 1 ? 10 : absVal < 10 ? 100 : absVal < 100 ? 1000 : absVal < 1000 ? 10000 : absVal < 10000 ? 100000 : 1000000;
		let intAbsVal = Math.round(absVal * 10000);
		intAbsVal = (intAbsVal / truncation + 0.5 | 0) * truncation;
		this.update(intAbsVal / 10000);
	}
	update(absVal) {
		if(this.sliders == null) {
			return;
		}
		if(this.insideUpdate) {
			throw haxe_Exception.thrown("unexpected recursive update");
		}
		let value = this.negated ? -absVal : absVal;
		this.insideUpdate = true;
		let _g = 0;
		let _g1 = this.sliders;
		while(_g < _g1.length) _g1[_g++].setValue(absVal);
		this.text = this.updateText(value);
		this.onChanged(value);
		this.insideUpdate = false;
	}
	updateText(value) {
		let res = app_ui_view_menu_nodeedit_NumberEditor.toFixed(value);
		while(res.length < this.minTextLength) res += "0";
		if(res.length > this.maxTextLength) {
			res = HxOverrides.substr(res,0,this.maxTextLength);
		}
		return res;
	}
	static toFixed(v) {
		let res = Std.string(Math.round(v * 10000) / 10000);
		if(res.indexOf(".") == -1) {
			res += ".0";
		}
		return res;
	}
}
$hxClasses["app.ui.view.menu.nodeedit.NumberEditor"] = app_ui_view_menu_nodeedit_NumberEditor;
app_ui_view_menu_nodeedit_NumberEditor.__name__ = "app.ui.view.menu.nodeedit.NumberEditor";
Object.assign(app_ui_view_menu_nodeedit_NumberEditor.prototype, {
	__class__: app_ui_view_menu_nodeedit_NumberEditor
});
class app_ui_view_menu_nodeedit_NumberRangeTools {
	static min(range) {
		switch(range) {
		case "level":
			return 0;
		case "hz":case "real":
			return 0;
		case "sec":
			return 0;
		}
	}
	static max(range) {
		switch(range) {
		case "level":
			return 1;
		case "hz":case "real":
			return 10000;
		case "sec":
			return 10;
		}
	}
	static signed(range) {
		switch(range) {
		case "hz":case "level":case "sec":
			return false;
		case "real":
			return true;
		}
	}
}
$hxClasses["app.ui.view.menu.nodeedit.NumberRangeTools"] = app_ui_view_menu_nodeedit_NumberRangeTools;
app_ui_view_menu_nodeedit_NumberRangeTools.__name__ = "app.ui.view.menu.nodeedit.NumberRangeTools";
class app_ui_view_menu_pulldown_PulldownMenu extends app_ui_Sprite {
	constructor() {
		app_ui_Sprite._hx_skip_constructor = true;
		super();
		app_ui_Sprite._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.scale = 0;
		this.shown = false;
		super._hx_constructor();
	}
	isShown() {
		return this.shown;
	}
	show() {
		this.shown = true;
	}
	hide() {
		this.shown = false;
	}
	update() {
		this.scale += ((this.shown ? 1 : 0) - this.scale) * 0.5;
		this.element.style.noHit = this.scale < 0.99;
	}
	draw(g) {
		g.c2d.scale(1,this.scale);
	}
}
$hxClasses["app.ui.view.menu.pulldown.PulldownMenu"] = app_ui_view_menu_pulldown_PulldownMenu;
app_ui_view_menu_pulldown_PulldownMenu.__name__ = "app.ui.view.menu.pulldown.PulldownMenu";
app_ui_view_menu_pulldown_PulldownMenu.__super__ = app_ui_Sprite;
Object.assign(app_ui_view_menu_pulldown_PulldownMenu.prototype, {
	__class__: app_ui_view_menu_pulldown_PulldownMenu
});
class common_ArrayTools {
}
$hxClasses["common.ArrayTools"] = common_ArrayTools;
common_ArrayTools.__name__ = "common.ArrayTools";
class common_FloatTools {
}
$hxClasses["common.FloatTools"] = common_FloatTools;
common_FloatTools.__name__ = "common.FloatTools";
class common_IntTools {
}
$hxClasses["common.IntTools"] = common_IntTools;
common_IntTools.__name__ = "common.IntTools";
class common_Maybe {
	static or(this1,a) {
		if(this1 != null) {
			return this1;
		} else {
			return a;
		}
	}
	static orDo(this1,f) {
		if(this1 != null) {
			return this1;
		} else {
			return f();
		}
	}
	static of(a) {
		return a;
	}
}
class common_Pair {
	static _new(a,b) {
		return new common_PairData(a,b);
	}
	static of(a,b) {
		return new common_PairData(a,b);
	}
}
class common_PairData {
	constructor(a,b) {
		this.a = a;
		this.b = b;
	}
}
$hxClasses["common.PairData"] = common_PairData;
common_PairData.__name__ = "common.PairData";
Object.assign(common_PairData.prototype, {
	__class__: common_PairData
});
class common_Set {
	constructor() {
		this.map = new haxe_ds_ObjectMap();
		this.numEntries = 0;
	}
	toArray() {
		let res = [];
		let a = this.map.keys();
		while(a.hasNext()) res.push(a.next());
		return res;
	}
	forEach(f) {
		let a = this.map.keys();
		while(a.hasNext()) f(a.next());
	}
	add(a) {
		if(this.map.h.__keys__[a.__id__] != null) {
			return false;
		}
		this.numEntries++;
		this.map.set(a,null);
		return true;
	}
	remove(a) {
		if(this.map.h.__keys__[a.__id__] == null) {
			return false;
		}
		this.numEntries--;
		this.map.remove(a);
		return true;
	}
	count() {
		return this.numEntries;
	}
	clear() {
		this.map.h = { __keys__ : { }};
		this.numEntries = 0;
	}
	contains(a) {
		return this.map.h.__keys__[a.__id__] != null;
	}
}
$hxClasses["common.Set"] = common_Set;
common_Set.__name__ = "common.Set";
Object.assign(common_Set.prototype, {
	__class__: common_Set
});
class graph_CableInfo {
	constructor() {
		this.vertex = null;
		this.edge = null;
	}
}
$hxClasses["graph.CableInfo"] = graph_CableInfo;
graph_CableInfo.__name__ = "graph.CableInfo";
Object.assign(graph_CableInfo.prototype, {
	__class__: graph_CableInfo
});
class graph_Edge {
	constructor(v1,v2,length,stiff) {
		this.v1 = v1;
		this.v2 = v2;
		this.spring = new phys_Spring(v1.point,v2.point,length,stiff);
		this.firstEdgeOf = null;
		this.lastEdgeOf = null;
	}
	connect() {
		this.v1.edges.push(this);
		this.v2.edges.push(this);
	}
	disconnect() {
		let ok = true;
		ok = HxOverrides.remove(this.v1.edges,this);
		ok = ok && HxOverrides.remove(this.v2.edges,this);
		if(!ok) {
			throw haxe_Exception.thrown("couldn't disconnect");
		}
	}
}
$hxClasses["graph.Edge"] = graph_Edge;
graph_Edge.__name__ = "graph.Edge";
Object.assign(graph_Edge.prototype, {
	__class__: graph_Edge
});
class graph__$Graph_EmptyGraphListener {
	constructor() {
	}
	onNodeCreated(id,setting) {
	}
	onNodeDestroyed(id) {
	}
	onSocketCreated(id,nodeId,type) {
	}
	onSocketDestroyed(id) {
	}
	onSocketConnected(id1,id2) {
	}
	onSocketDisconnected(id1,id2) {
	}
	onNodeUpdated(id) {
	}
	onWaveDataRequest(arrayOut) {
	}
}
$hxClasses["graph._Graph.EmptyGraphListener"] = graph__$Graph_EmptyGraphListener;
graph__$Graph_EmptyGraphListener.__name__ = "graph._Graph.EmptyGraphListener";
graph__$Graph_EmptyGraphListener.__interfaces__ = [graph_GraphListener];
Object.assign(graph__$Graph_EmptyGraphListener.prototype, {
	__class__: graph__$Graph_EmptyGraphListener
});
class graph_Graph {
	constructor(listener,id) {
		if(id == null) {
			id = -1;
		}
		this.listener = listener != null ? listener : new graph__$Graph_EmptyGraphListener();
		this.world = new phys_World();
		this.nodes = [];
		this.vertices = [];
		this.edges = [];
		this.id = id == -1 ? ++graph_Graph.idCount : id;
	}
	getRoot() {
		let res = this;
		while(res.parentModule != null) res = res.parentModule.g;
		return res;
	}
	getPath() {
		let path = [];
		let at = this;
		path.push(at);
		while(at.parentModule != null) {
			at = at.parentModule.g;
			path.push(at);
		}
		path.reverse();
		return path;
	}
	containsOutput() {
		let _g = 0;
		let _g1 = this.nodes;
		while(_g < _g1.length) if(_g1[_g++].setting.role._hx_index == 2) {
			return true;
		}
		return false;
	}
	bakeView(view) {
		let _g = 0;
		let _g1 = this.vertices;
		while(_g < _g1.length) {
			let v = _g1[_g];
			++_g;
			v.point.x -= view.data.centerX;
			v.point.y -= view.data.centerY;
		}
		view.data.centerX = 0;
		view.data.centerY = 0;
	}
	moveCenterToZero() {
		let minX = 1e9;
		let minY = 1e9;
		let maxX = -1e9;
		let maxY = -1e9;
		let _g = 0;
		let _g1 = this.nodes;
		while(_g < _g1.length) {
			let n = _g1[_g];
			++_g;
			let x = n.phys.vertex.point.x;
			let y = n.phys.vertex.point.y;
			if(!(minX < x)) {
				minX = x;
			}
			if(!(minY < y)) {
				minY = y;
			}
			if(!(maxX > x)) {
				maxX = x;
			}
			if(!(maxY > y)) {
				maxY = y;
			}
		}
		let cx = (minX + maxX) * 0.5;
		let cy = (minY + maxY) * 0.5;
		let _g2 = 0;
		let _g3 = this.vertices;
		while(_g2 < _g3.length) {
			let v = _g3[_g2];
			++_g2;
			v.point.x -= cx;
			v.point.y -= cy;
		}
	}
	createNode(x,y,type,setting) {
		let n = new graph_Node(this,x,y,type,setting);
		this.nodes.push(n);
		if(n.type._hx_index != 1) {
			this.listener.onNodeCreated(n.id,n.setting);
		}
		this.updateRequired = true;
		return n;
	}
	createNodeByDataAt(x,y,data) {
		let node = this.createNode(x,y,graph_Node.deserializeType(data.type),graph_NodeSetting.deserialize(data.setting));
		if(node.type._hx_index == 1) {
			node.moduleGraph = graph_Graph.deserialize(data.graph,this.listener);
			node.moduleGraph.parentModule = node;
			let _this = data.boundaries;
			let result = new Array(_this.length);
			let _g = 0;
			let _g1 = _this.length;
			while(_g < _g1) {
				let i = _g++;
				result[i] = node.moduleGraph.nodes[_this[i]];
			}
			node.moduleBoundaries = result;
		}
		let _g = 0;
		let _g1 = data.sockets;
		while(_g < _g1.length) {
			let s = _g1[_g];
			++_g;
			node.createSocket(graph_Socket.deserializeType(s.type,node.moduleBoundaries)).phys.setAngle(s.angle / 10000);
		}
		this.updateRequired = true;
		return node;
	}
	insertNode(v,n) {
		if(v.type != graph_VertexType.Normal) {
			return false;
		}
		let inputs = [];
		let outputs = [];
		let _g = 0;
		let _g1 = v.edges;
		while(_g < _g1.length) {
			let e = _g1[_g];
			++_g;
			if(v != e.v1) {
				inputs.push(e.v1);
			}
			if(v != e.v2) {
				outputs.push(e.v2);
			}
		}
		this.destroyVertex(v);
		let _g2 = 0;
		while(_g2 < inputs.length) {
			let v = inputs[_g2];
			++_g2;
			v.vibrate(true);
			let s = n.createSocket(graph_SocketType.Normal(false));
			s.phys.lookAt(v.point.x,v.point.y);
			this.createEdge(v,s.phys.vertex);
		}
		let _g3 = 0;
		while(_g3 < outputs.length) {
			let v = outputs[_g3];
			++_g3;
			v.vibrate(true);
			let s = n.createSocket(graph_SocketType.Normal(true));
			s.phys.lookAt(v.point.x,v.point.y);
			this.createEdge(s.phys.vertex,v);
		}
		return true;
	}
	createModule(nodesToContain) {
		let pair = this.isolateNodesAndCutCables(nodesToContain);
		return this.createModuleAndConnectCables(nodesToContain,pair.a,pair.b);
	}
	isolateNodesAndCutCables(nodesToContain) {
		let boundaries = [];
		let cableEdges = [];
		let inBoundaries = [];
		let outBoundaries = [];
		let _g = 0;
		while(_g < nodesToContain.length) {
			let n = nodesToContain[_g];
			++_g;
			let _g1 = 0;
			let _g2 = n.sockets;
			while(_g1 < _g2.length) {
				let s = _g2[_g1];
				++_g1;
				let _g = 0;
				let _g3 = s.connections;
				while(_g < _g3.length) {
					let c = _g3[_g];
					++_g;
					let s2 = c.other(s);
					if(nodesToContain.indexOf(s2.parent) == -1) {
						let s2p = s2.phys;
						let v1 = s.phys.vertex;
						let v2 = s2p.vertex;
						let n1v = n.phys.vertex;
						let io = graph_SocketTypeTool.io(s2.type);
						let boundaryNode = this.createNode(v1.point.x + (v2.point.x - v1.point.x) * 0.9,v1.point.y + (v2.point.y - v1.point.y) * 0.9,graph_NodeType.Boundary(graph_SocketTypeTool.io(s2.type)),new graph_NodeSetting("",synth_NodeRole.Dupl));
						if(io) {
							boundaryNode.setting.name = "in";
							inBoundaries.push(boundaryNode);
						} else {
							boundaryNode.setting.name = "out";
							outBoundaries.push(boundaryNode);
						}
						boundaries.push(boundaryNode);
						let boundarySocketPhys = boundaryNode.createSocket(graph_SocketType.Normal(graph_SocketTypeTool.io(s2.type))).phys;
						boundarySocketPhys.lookAt(n1v.point.x,n1v.point.y);
						let edgeToCut = c.nearestEdge(s2);
						let cutCableSocket1Side = s2p.vertex != edgeToCut.v1 ? edgeToCut.v1 : edgeToCut.v2;
						this.destroyEdge(edgeToCut);
						cableEdges.push(v2);
						if(graph_SocketTypeTool.io(s.type)) {
							this.createEdge(cutCableSocket1Side,boundarySocketPhys.vertex);
						} else {
							this.createEdge(boundarySocketPhys.vertex,cutCableSocket1Side);
						}
					}
				}
			}
		}
		if(inBoundaries.length > 1) {
			let _g = 0;
			let _g1 = inBoundaries.length;
			while(_g < _g1) {
				let i = _g++;
				inBoundaries[i].setting.name += i + 1;
			}
		}
		if(outBoundaries.length > 1) {
			let _g = 0;
			let _g1 = outBoundaries.length;
			while(_g < _g1) {
				let i = _g++;
				outBoundaries[i].setting.name += i + 1;
			}
		}
		return new common_PairData(boundaries,cableEdges);
	}
	createModuleAndConnectCables(nodesToContain,boundaries,cables) {
		if(nodesToContain.length == 0) {
			return null;
		}
		let meanX = 0.0;
		let meanY = 0.0;
		let _g = 0;
		while(_g < nodesToContain.length) {
			let n = nodesToContain[_g];
			++_g;
			meanX += n.phys.vertex.point.x;
			meanY += n.phys.vertex.point.y;
		}
		meanX /= nodesToContain.length;
		meanY /= nodesToContain.length;
		let module = this.createNode(meanX,meanY,graph_NodeType.Module(false,false),new graph_NodeSetting("mod",synth_NodeRole.None));
		module.moduleBoundaries = boundaries.slice();
		module.moduleBoundaries.sort(function(b1,b2) {
			let a = b1.setting.name;
			let b = b2.setting.name;
			if(a < b) {
				return -1;
			} else if(a > b) {
				return 1;
			} else {
				return 0;
			}
		});
		this.updateConnections();
		this.transferModule(nodesToContain.concat(boundaries),module.moduleGraph);
		let _g1 = 0;
		let _g2 = boundaries.length;
		while(_g1 < _g2) {
			let i = _g1++;
			let boundary = boundaries[i];
			let cable = cables[i];
			let _g = boundary.type;
			if(_g._hx_index == 3) {
				let socketIO = !_g.io;
				let sp = module.createSocket(boundary.setting.name == "" ? graph_SocketType.Normal(socketIO) : graph_SocketType.Module(socketIO,boundary)).phys;
				sp.lookAt(cable.point.x,cable.point.y);
				if(socketIO) {
					this.connectCable(sp.vertex,cable);
				} else {
					this.connectCable(cable,sp.vertex);
				}
			} else {
				throw haxe_Exception.thrown("not a boundary node");
			}
		}
		let bv = module.moduleGraph.computeBoundingVolume();
		let _g3 = 0;
		let _g4 = module.moduleGraph.vertices;
		while(_g3 < _g4.length) {
			let v = _g4[_g3];
			++_g3;
			v.point.x -= bv.x;
			v.point.y -= bv.y;
		}
		return module;
	}
	transferModule(ns,to) {
		if(this == to) {
			throw haxe_Exception.thrown("cannot tranfer");
		}
		this.dfs(null,null,true);
		let vs = [];
		let es = new haxe_ds_ObjectMap();
		let _g = 0;
		while(_g < ns.length) this.dfs(function(v) {
			vs.push(v);
			let _g = 0;
			let _g1 = v.edges;
			while(_g < _g1.length) es.set(_g1[_g++],true);
			return true;
		},ns[_g++].phys.vertex,false);
		let ok = true;
		let _g1 = 0;
		while(_g1 < vs.length) {
			let v = vs[_g1];
			++_g1;
			ok = ok && this.world.removePoint(v.point);
			to.world.addPoint(v.point);
			ok = ok && HxOverrides.remove(this.vertices,v);
			to.vertices.push(v);
		}
		let e = es.keys();
		while(e.hasNext()) {
			let e1 = e.next();
			ok = ok && this.world.removeSpring(e1.spring);
			to.world.addSpring(e1.spring);
			ok = ok && HxOverrides.remove(this.edges,e1);
			to.edges.push(e1);
		}
		let _g2 = 0;
		while(_g2 < ns.length) {
			let n = ns[_g2];
			++_g2;
			ok = ok && HxOverrides.remove(this.nodes,n);
			to.nodes.push(n);
			n.g = to;
			let _g = 0;
			let _g1 = n.sockets;
			while(_g < _g1.length) _g1[_g++].g = to;
		}
		if(!ok) {
			throw haxe_Exception.thrown("transfer failed");
		}
		this.updateRequired = true;
		to.updateRequired = true;
	}
	computeBoundingVolume() {
		if(this.nodes.length == 0) {
			return new graph_GraphBoundingVolume(0,0,1);
		}
		let x = 0.0;
		let y = 0.0;
		let denom = 0.0;
		let _g = 0;
		let _g1 = this.nodes;
		while(_g < _g1.length) {
			let n = _g1[_g];
			++_g;
			if(n.type._hx_index == 3) {
				continue;
			}
			let p = n.phys.vertex.point;
			x += p.x;
			y += p.y;
			++denom;
		}
		let invV = 1 / (denom == 0 ? 1 : denom);
		x *= invV;
		y *= invV;
		let r = 0.0;
		let _g2 = 0;
		let _g3 = this.nodes;
		while(_g2 < _g3.length) {
			let n = _g3[_g2];
			++_g2;
			if(n.type._hx_index == 3) {
				continue;
			}
			let p = n.phys.vertex.point;
			let dx = x - p.x;
			let dy = y - p.y;
			let r2 = dx * dx + dy * dy;
			if(r2 > r * r) {
				r = Math.sqrt(r2);
			}
		}
		return new graph_GraphBoundingVolume(x,y,r);
	}
	copyNode(n) {
		let np = n.phys;
		let np1 = np.vertex.point.x;
		let np2 = np.vertex.point.y;
		let n1 = n.type;
		let n2 = n.setting.name;
		let role = n.setting.role;
		let n21;
		switch(role._hx_index) {
		case 6:
			let _g = role.env;
			n21 = synth_NodeRole.Envelope(new synth_EnvelopeData(_g.a,_g.d,_g.s,_g.r));
			break;
		case 7:
			n21 = synth_NodeRole.Number(new synth_NumberData(role.num.get_value()));
			break;
		default:
			n21 = role;
		}
		let n22 = this.createNode(np1,np2,n1,new graph_NodeSetting(n2,n21));
		n22.phys.vertex.point.x = np.vertex.point.x;
		n22.phys.vertex.point.y = np.vertex.point.y;
		if(n.type._hx_index == 1) {
			let g1 = n.moduleGraph;
			let g2 = n22.moduleGraph;
			let _g = 0;
			let _g1 = g1.nodes;
			while(_g < _g1.length) g2.copyNode(_g1[_g++]);
			let _g2 = 0;
			let _g3 = g1.nodes.length;
			while(_g2 < _g3) {
				let i = _g2++;
				let n1 = g1.nodes[i];
				let n2 = g2.nodes[i];
				let _g = 0;
				let _g1 = n1.sockets.length;
				while(_g < _g1) {
					let j = _g++;
					let s1 = n1.sockets[j];
					let s2 = n2.sockets[j];
					if(graph_SocketTypeTool.io(s1.type) != true) {
						continue;
					}
					let _g1 = 0;
					let _g2 = s1.connections;
					while(_g1 < _g2.length) {
						let to1 = _g2[_g1++].to;
						g2.createEdge(s2.phys.vertex,g2.nodes[g1.nodes.indexOf(to1.parent)].sockets[to1.parent.sockets.indexOf(to1)].phys.vertex);
					}
				}
			}
			g2.updateConnections();
			let _this = n.moduleBoundaries;
			let result = new Array(_this.length);
			let _g4 = 0;
			let _g5 = _this.length;
			while(_g4 < _g5) {
				let i = _g4++;
				result[i] = g2.nodes[g1.nodes.indexOf(_this[i])];
			}
			n22.moduleBoundaries = result;
		}
		let _g1 = 0;
		let _g2 = n.sockets;
		while(_g1 < _g2.length) {
			let s = _g2[_g1];
			++_g1;
			let _g = s.type;
			let s2 = n22.createSocket(_g._hx_index == 2 ? graph_SocketType.Module(_g.io,n22.moduleBoundaries[n.moduleBoundaries.indexOf(_g.boundary)]) : s.type);
			s.phys.computeDrawingPos();
			s2.phys.setNormal(s.phys.normalX,s.phys.normalY);
		}
		return n22;
	}
	decomposeModule(node) {
		if(node.type._hx_index != 1) {
			throw haxe_Exception.thrown("can only decompose modules");
		}
		let g = node.moduleGraph;
		let bv = g.computeBoundingVolume();
		let np = node.phys;
		let _g = 0;
		let _g1 = g.vertices;
		while(_g < _g1.length) {
			let v = _g1[_g];
			++_g;
			v.point.x -= bv.x;
			v.point.y -= bv.y;
			v.point.x *= 0.75;
			v.point.y *= 0.75;
			v.point.x += np.vertex.point.x;
			v.point.y += np.vertex.point.y;
		}
		g.transferModule(g.nodes.slice(),this);
		let _g2 = 0;
		let _g3 = this.nodes;
		while(_g2 < _g3.length) {
			let _g = 0;
			let _g1 = _g3[_g2++].sockets;
			while(_g < _g1.length) {
				let s = _g1[_g];
				++_g;
				s.phys.lookAt(s.phys.vertex.point.x,s.phys.vertex.point.y);
			}
		}
		let boundaries = node.moduleBoundaries;
		let _g4 = [];
		let _g5 = 0;
		while(_g5 < boundaries.length) {
			++_g5;
			_g4.push([]);
		}
		let _g6 = [];
		let _g7 = 0;
		while(_g7 < boundaries.length) {
			++_g7;
			_g6.push([]);
		}
		let _g8 = 0;
		let _g9 = node.sockets;
		while(_g8 < _g9.length) {
			let s = _g9[_g8];
			++_g8;
			let sp = s.phys;
			let parent;
			let _g = s.type;
			if(_g._hx_index == 2) {
				parent = _g.boundary;
			} else {
				throw haxe_Exception.thrown("not a module socket");
			}
			let index = boundaries.indexOf(parent);
			let edges = sp.vertex.edges.slice();
			let _g1 = 0;
			while(_g1 < edges.length) {
				let e = edges[_g1];
				++_g1;
				if(e == sp.edge) {
					continue;
				}
				if(graph_SocketTypeTool.io(s.type)) {
					_g6[index].push(sp.vertex != e.v1 ? e.v1 : e.v2);
				} else {
					_g4[index].push(sp.vertex != e.v1 ? e.v1 : e.v2);
				}
				this.destroyEdge(e);
			}
		}
		let _g10 = 0;
		let _g11 = boundaries.length;
		while(_g10 < _g11) {
			let i = _g10++;
			let b = boundaries[i];
			b.boundaryToNormal();
			let _g = 0;
			let _g1 = _g4[i];
			while(_g < _g1.length) {
				let v = _g1[_g];
				++_g;
				let s = b.createSocket(graph_SocketType.Normal(false));
				s.phys.lookAt(v.point.x,v.point.y);
				this.createEdge(v,s.phys.vertex);
			}
			let _g2 = 0;
			let _g3 = _g6[i];
			while(_g2 < _g3.length) {
				let v = _g3[_g2];
				++_g2;
				let s = b.createSocket(graph_SocketType.Normal(true));
				s.phys.lookAt(v.point.x,v.point.y);
				this.createEdge(s.phys.vertex,v);
			}
		}
		this.destroyNode(node);
	}
	destroyNode(n) {
		let sockets = n.sockets.slice();
		let _g = 0;
		while(_g < sockets.length) n.destroySocket(sockets[_g++]);
		if(n.type._hx_index == 1) {
			n.moduleGraph.destroyEverything();
		} else {
			this.listener.onNodeDestroyed(n.id);
		}
		this.destroyVertexUnsafe(n.phys.vertex);
		HxOverrides.remove(this.nodes,n);
		this.updateRequired = true;
	}
	destroyEverything() {
		let ns = this.nodes.slice();
		let _g = 0;
		while(_g < ns.length) this.destroyNode(ns[_g++]);
		let es = this.edges.slice();
		let _g1 = 0;
		while(_g1 < es.length) this.destroyEdge(es[_g1++]);
		let vs = this.vertices.slice();
		let _g2 = 0;
		while(_g2 < vs.length) this.destroyVertex(vs[_g2++]);
	}
	connectCable(from,to,vibration) {
		if(vibration == null) {
			vibration = true;
		}
		let dx = to.point.x - from.point.x;
		let dy = to.point.y - from.point.y;
		let dist = Math.sqrt(dx * dx + dy * dy);
		let invDist = dist == 0 ? 0 : 1 / dist;
		let nx = dx * invDist;
		let ny = dy * invDist;
		let extended = [];
		while(dist > 5.) {
			let mid = this.createVertex(from.point.x + nx * 5.,from.point.y + ny * 5.,graph_VertexType.Normal,0.5);
			extended.push(mid);
			this.createEdge(from,mid);
			dist -= 5.;
			from = mid;
		}
		if(vibration) {
			let _g = 0;
			while(_g < extended.length) extended[_g++].vibrate();
		}
		this.createEdge(from,to);
	}
	isConnectable(from,to) {
		if(from == to || !this.isOutput(from) || !this.isInput(to) || this.isOnCableFrom(from,to)) {
			return false;
		}
		return true;
	}
	connectVertices(from,to) {
		if(!this.isConnectable(from,to)) {
			throw haxe_Exception.thrown("cannot connect vertices");
		}
		let dx = to.point.x - from.point.x;
		let dy = to.point.y - from.point.y;
		let dist = Math.sqrt(dx * dx + dy * dy);
		if(dist == 0) {
			dx = 0.1;
			dist = 0.010000000000000002;
		}
		let invDist = 1 / dist;
		let nx = dx * invDist;
		let ny = dy * invDist;
		let _g = from.type;
		if(_g._hx_index == 0) {
			let sp = _g.n.createSocket(graph_SocketType.Normal(true)).phys;
			sp.setNormal(nx,ny);
			from = sp.vertex;
		}
		let _g1 = to.type;
		if(_g1._hx_index == 0) {
			let sp = _g1.n.createSocket(graph_SocketType.Normal(false)).phys;
			sp.setNormal(-nx,-ny);
			to = sp.vertex;
		}
		this.connectCable(from,to);
	}
	isOutput(v) {
		let _g = v.type;
		switch(_g._hx_index) {
		case 0:
			let _g1 = _g.n.type;
			switch(_g1._hx_index) {
			case 0:
				return _g1.output;
			case 1:
				return _g1.output;
			case 2:
				return true;
			case 3:
				return _g1.io == true;
			}
			break;
		case 1:
			if(graph_SocketTypeTool.io(_g.s.type)) {
				return true;
			} else {
				return false;
			}
			break;
		case 2:
			return true;
		}
	}
	isInput(v) {
		let _g = v.type;
		switch(_g._hx_index) {
		case 0:
			let _g1 = _g.n.type;
			switch(_g1._hx_index) {
			case 0:
				return _g1.input;
			case 1:
				return _g1.input;
			case 2:
				return true;
			case 3:
				return _g1.io == false;
			}
			break;
		case 1:
			if(graph_SocketTypeTool.io(_g.s.type)) {
				return false;
			} else {
				return true;
			}
			break;
		case 2:
			return true;
		}
	}
	hasVisitedInDfs(v) {
		return v.tmpValForDfs == graph_Graph.dfsCount;
	}
	dfs(onVisit,from,updateDfsCount) {
		if(updateDfsCount == null) {
			updateDfsCount = true;
		}
		if(updateDfsCount) {
			graph_Graph.dfsCount++;
		}
		if(onVisit == null || from == null || from.tmpValForDfs == graph_Graph.dfsCount) {
			return;
		}
		let vs = [];
		vs.push(from);
		while(vs.length > 0) {
			let v = vs.pop();
			v.tmpValForDfs = graph_Graph.dfsCount;
			if(!onVisit(v)) {
				continue;
			}
			let _g = 0;
			let _g1 = v.edges;
			while(_g < _g1.length) {
				let e = _g1[_g];
				++_g;
				if(e.v1.tmpValForDfs != graph_Graph.dfsCount) {
					e.v1.tmpValForDfs = graph_Graph.dfsCount;
					vs.push(e.v1);
				}
				if(e.v2.tmpValForDfs != graph_Graph.dfsCount) {
					e.v2.tmpValForDfs = graph_Graph.dfsCount;
					vs.push(e.v2);
				}
			}
		}
	}
	isOnCableFrom(v1Normal,v2NormalOrSocket) {
		let result = false;
		this.dfs(function(v) {
			if(v == v2NormalOrSocket) {
				result = true;
			}
			if(!result) {
				return v.type == graph_VertexType.Normal;
			} else {
				return false;
			}
		},v1Normal);
		return result;
	}
	createVertex(x,y,type,invM) {
		let v = new graph_Vertex(x,y,type,invM);
		this.world.addPoint(v.point);
		this.vertices.push(v);
		this.updateRequired = true;
		return v;
	}
	createEdge(outVertex,inVertex,length) {
		if(length == null) {
			length = 0;
		}
		let e = new graph_Edge(outVertex,inVertex,length,outVertex.type._hx_index == 0 || inVertex.type._hx_index == 0);
		this.world.addSpring(e.spring);
		e.connect();
		this.edges.push(e);
		this.updateRequired = true;
		if(outVertex.type == graph_VertexType.Normal && outVertex.edges.length > 2) {
			throw haxe_Exception.thrown("!?!?!?");
		}
		if(inVertex.type == graph_VertexType.Normal && inVertex.edges.length > 2) {
			throw haxe_Exception.thrown("!?!?!?");
		}
		return e;
	}
	updateConnections() {
		this.updateRequired = false;
		console.log("src/graph/Graph.hx:756:","computing connections");
		let _g = 0;
		let _g1 = this.edges;
		while(_g < _g1.length) {
			let e = _g1[_g];
			++_g;
			e.firstEdgeOf = null;
			e.lastEdgeOf = null;
		}
		let _g2 = 0;
		let _g3 = this.nodes;
		while(_g2 < _g3.length) {
			let _g = 0;
			let _g1 = _g3[_g2++].sockets;
			while(_g < _g1.length) {
				let s = _g1[_g];
				++_g;
				s.prevConnections = s.connections;
				s.connections = [];
			}
		}
		let _g4 = 0;
		let _g5 = this.nodes;
		while(_g4 < _g5.length) {
			let _g = 0;
			let _g1 = _g5[_g4++].sockets;
			while(_g < _g1.length) {
				let s = _g1[_g];
				++_g;
				if(graph_SocketTypeTool.io(s.type) != true) {
					continue;
				}
				let sp = s.phys;
				let edgeBackToNode = sp.edge;
				let _g2 = 0;
				let _g3 = sp.vertex.edges;
				while(_g2 < _g3.length) {
					let e = _g3[_g2];
					++_g2;
					if(e == edgeBackToNode) {
						continue;
					}
					let prevV = sp.vertex;
					let v = prevV != e.v1 ? e.v1 : e.v2;
					let lastEdge = e;
					let info = new graph_CableInfo();
					while(v != null && v.type == graph_VertexType.Normal) {
						v.followCable(prevV,info);
						prevV = v;
						v = info.vertex;
						lastEdge = info.edge;
					}
					if(v == null) {
						continue;
					}
					let _g = v.type;
					if(_g._hx_index == 1) {
						let _g1 = _g.s;
						if(graph_SocketTypeTool.io(_g1.type) != false) {
							throw haxe_Exception.thrown("socket type error");
						}
						let _g2 = 0;
						let _g3 = s.connections;
						while(_g2 < _g3.length) {
							let c = _g3[_g2];
							++_g2;
							if(c.from == s && c.to == _g1) {
								throw haxe_Exception.thrown("duplicate connection found");
							}
						}
						let conn = new graph_SocketConnection(s,_g1,e,lastEdge);
						e.firstEdgeOf = conn;
						lastEdge.lastEdgeOf = conn;
						s.connections.push(conn);
						_g1.connections.push(conn);
					} else {
						throw haxe_Exception.thrown("cable connected to invalid vertex");
					}
				}
			}
		}
		let newConnections = [];
		let nodesToUpdate = new common_Set();
		let _g6 = 0;
		let _g7 = this.nodes;
		while(_g6 < _g7.length) {
			let _g = 0;
			let _g1 = _g7[_g6++].sockets;
			while(_g < _g1.length) {
				let s = _g1[_g];
				++_g;
				if(graph_SocketTypeTool.io(s.type) != true) {
					continue;
				}
				let _g2 = 0;
				let _g3 = s.connections;
				while(_g2 < _g3.length) {
					let c = _g3[_g2];
					++_g2;
					let s2 = c.to;
					let oldIndex = graph_SocketConnection.indexOf(s.prevConnections,s,s2);
					if(oldIndex == -1) {
						newConnections.push([s.id,s2.id]);
						nodesToUpdate.add(c.from.parent);
						nodesToUpdate.add(c.to.parent);
					} else {
						s.prevConnections.splice(oldIndex,1);
					}
				}
			}
		}
		let _g8 = 0;
		let _g9 = this.nodes;
		while(_g8 < _g9.length) {
			let _g = 0;
			let _g1 = _g9[_g8++].sockets;
			while(_g < _g1.length) {
				let s = _g1[_g];
				++_g;
				if(graph_SocketTypeTool.io(s.type) != true) {
					continue;
				}
				let _g2 = 0;
				let _g3 = s.prevConnections;
				while(_g2 < _g3.length) {
					let c = _g3[_g2];
					++_g2;
					this.listener.onSocketDisconnected(s.id,c.to.id);
					nodesToUpdate.add(c.from.parent);
					nodesToUpdate.add(c.to.parent);
				}
			}
		}
		let _g10 = 0;
		while(_g10 < newConnections.length) {
			let conn = newConnections[_g10];
			++_g10;
			this.listener.onSocketConnected(conn[0],conn[1]);
		}
		let a = nodesToUpdate.map.keys();
		while(a.hasNext()) a.next().notifyUpdate();
	}
	stepPhysics() {
		let i = -1;
		while(++i < this.edges.length) {
			let e = this.edges[i];
			if(!e.spring.stiff && e.spring.prevDist > 4.2) {
				let v1 = e.v1;
				let v2 = e.v2;
				let tmp = this.updateRequired;
				let v3 = this.createVertex((v1.point.x + v2.point.x) * 0.5,(v1.point.y + v2.point.y) * 0.5,graph_VertexType.Normal,2.);
				let c1 = e.firstEdgeOf;
				let c2 = e.lastEdgeOf;
				this.destroyEdge(e);
				let e1 = this.createEdge(v1,v3);
				let e2 = this.createEdge(v3,v2);
				if(c1 != null) {
					c1.firstEdge = e1;
					e1.firstEdgeOf = c1;
				}
				if(c2 != null) {
					c2.lastEdge = e2;
					e2.lastEdgeOf = c2;
				}
				this.updateRequired = tmp;
				--i;
			}
		}
		let i1 = -1;
		while(++i1 < this.vertices.length) {
			let v = this.vertices[i1];
			if(v.type._hx_index != 2 || v.selection.selected) {
				continue;
			}
			if(v.edges.length == 0) {
				this.destroyVertex(v);
				--i1;
				continue;
			}
			if(v.edges.length == 1) {
				let e = v.edges[0];
				let other = e.v1 == v ? e.v2 : e.v1;
				if(--v.life <= 0 || other.edges.length != 2 || other.type != graph_VertexType.Normal) {
					this.destroyVertex(v);
					--i1;
					continue;
				}
			}
			if(v.edges.length != 2) {
				continue;
			}
			let e1 = v.edges[0];
			let e2 = v.edges[1];
			if(e1.spring.stiff || e2.spring.stiff) {
				continue;
			}
			if(!(v == e1.v2 && v == e2.v1)) {
				if(v == e2.v2 && v == e1.v1) {
					let tmp = e1;
					e1 = e2;
					e2 = tmp;
				} else {
					continue;
				}
			}
			let v1 = e1.v1;
			let v2 = e2.v2;
			let c1 = e1.firstEdgeOf;
			let c2 = e2.lastEdgeOf;
			if((v1.type._hx_index != 2 || v1.edges.length > 2) && (v2.type._hx_index != 2 || v2.edges.length > 2)) {
				continue;
			}
			if(e1.spring.prevDist + e2.spring.prevDist > 3.8) {
				continue;
			}
			let tmp = this.updateRequired;
			this.destroyVertex(v);
			let e = this.createEdge(v1,v2);
			if(c1 != null) {
				c1.firstEdge = e;
				e.firstEdgeOf = c1;
			}
			if(c2 != null) {
				c2.lastEdge = e;
				e.lastEdgeOf = c2;
			}
			this.updateRequired = tmp;
			--i1;
		}
		let _g = 0;
		let _g1 = this.nodes;
		while(_g < _g1.length) {
			let n = _g1[_g];
			++_g;
			let toDestroy = null;
			let _g2 = 0;
			let _g3 = n.sockets;
			while(_g2 < _g3.length) {
				let s = _g3[_g2];
				++_g2;
				if(s.type._hx_index != 0) {
					continue;
				}
				if(s.phys.vertex.edges.length == 1) {
					if(toDestroy == null) {
						toDestroy = [];
					}
					toDestroy.push(s);
				}
			}
			if(toDestroy != null) {
				let _g = 0;
				while(_g < toDestroy.length) n.destroySocket(toDestroy[_g++]);
			}
		}
		let i2 = -1;
		while(++i2 < this.nodes.length) {
			let n = this.nodes[i2];
			if(n.type != graph_NodeType.Small) {
				continue;
			}
			let ins = 0;
			let outs = 0;
			let inV = null;
			let outV = null;
			let _g = 0;
			let _g1 = n.sockets;
			while(_g < _g1.length) {
				let s = _g1[_g];
				++_g;
				if(graph_SocketTypeTool.io(s.type)) {
					++outs;
					let sp = s.phys;
					let res = null;
					let _g = 0;
					let _g1 = sp.vertex.edges;
					while(_g < _g1.length) {
						let e = _g1[_g];
						++_g;
						let v = sp.vertex != e.v1 ? e.v1 : e.v2;
						if(v.type._hx_index != 0) {
							res = v;
							break;
						}
					}
					outV = res;
				} else {
					++ins;
					let sp = s.phys;
					let res = null;
					let _g = 0;
					let _g1 = sp.vertex.edges;
					while(_g < _g1.length) {
						let e = _g1[_g];
						++_g;
						let v = sp.vertex != e.v1 ? e.v1 : e.v2;
						if(v.type._hx_index != 0) {
							res = v;
							break;
						}
					}
					inV = res;
				}
			}
			if(ins <= 1 && outs <= 1) {
				this.destroyNode(n);
				if(inV != null && outV != null) {
					this.createEdge(inV,outV);
				}
				if(inV != null) {
					inV.vibrate(true);
				}
				if(outV != null) {
					outV.vibrate(true);
				}
				--i2;
				continue;
			}
		}
		if(this.updateRequired) {
			this.updateConnections();
		}
		let _g2 = 0;
		let _g3 = this.nodes;
		while(_g2 < _g3.length) {
			let _g = 0;
			let _g1 = _g3[_g2++].sockets;
			while(_g < _g1.length) _g1[_g++].phys.computeDrawingPos();
		}
		let _g4 = 1;
		let _g5 = this.nodes.length;
		while(_g4 < _g5) {
			let i = _g4++;
			let _g = 0;
			while(_g < i) {
				let n1 = this.nodes[i];
				let n2 = this.nodes[_g++];
				let n1p = n1.phys;
				let n2p = n2.phys;
				let v1 = n1p.vertex;
				let v2 = n2p.vertex;
				let invM1 = v1.point.invM;
				let invM2 = v2.point.invM;
				if(invM1 + invM2 == 0) {
					invM1 = 1;
					invM2 = 1;
				}
				let x1;
				let y1;
				let x2;
				let y2;
				let _g1 = v1.type;
				if(_g1._hx_index == 1) {
					let _g = _g1.s;
					x1 = _g.phys.xForDrawing;
					y1 = _g.phys.yForDrawing;
				} else {
					x1 = v1.point.x;
					y1 = v1.point.y;
				}
				let _g2 = v2.type;
				if(_g2._hx_index == 1) {
					let _g = _g2.s;
					x2 = _g.phys.xForDrawing;
					y2 = _g.phys.yForDrawing;
				} else {
					x2 = v2.point.x;
					y2 = v2.point.y;
				}
				let dx = x1 - x2;
				let dy = y1 - y2;
				let dist = Math.sqrt(dx * dx + dy * dy);
				let invDist = dist == 0 ? 0 : 1 / dist;
				let nx = dx * invDist;
				let ny = dy * invDist;
				let f = n1p.radius + n2p.radius + 1.0 - dist;
				f /= invM1 + invM2;
				f *= 0.1;
				if(f > 0) {
					v1.point.vx += f * nx * invM1;
					v1.point.vy += f * ny * invM1;
					v2.point.vx -= f * nx * invM2;
					v2.point.vy -= f * ny * invM2;
				}
				let _g3 = 0;
				let _g4 = n1.sockets;
				while(_g3 < _g4.length) {
					let s1 = _g4[_g3++];
					let _g = 0;
					let _g1 = n2.sockets;
					while(_g < _g1.length) {
						let s1p = s1.phys;
						let s2p = _g1[_g++].phys;
						let v1 = s1p.vertex;
						let v2 = s2p.vertex;
						let invM1 = v1.point.invM;
						let invM2 = v2.point.invM;
						if(invM1 + invM2 == 0) {
							invM1 = 1;
							invM2 = 1;
						}
						let x1;
						let y1;
						let x2;
						let y2;
						let _g2 = v1.type;
						if(_g2._hx_index == 1) {
							let _g = _g2.s;
							x1 = _g.phys.xForDrawing;
							y1 = _g.phys.yForDrawing;
						} else {
							x1 = v1.point.x;
							y1 = v1.point.y;
						}
						let _g3 = v2.type;
						if(_g3._hx_index == 1) {
							let _g = _g3.s;
							x2 = _g.phys.xForDrawing;
							y2 = _g.phys.yForDrawing;
						} else {
							x2 = v2.point.x;
							y2 = v2.point.y;
						}
						let dx = x1 - x2;
						let dy = y1 - y2;
						let dist = Math.sqrt(dx * dx + dy * dy);
						let invDist = dist == 0 ? 0 : 1 / dist;
						let nx = dx * invDist;
						let ny = dy * invDist;
						let f = s1p.radius + s2p.radius + 1.0 - dist;
						f /= invM1 + invM2;
						f *= 0.1;
						if(f > 0) {
							v1.point.vx += f * nx * invM1;
							v1.point.vy += f * ny * invM1;
							v2.point.vx -= f * nx * invM2;
							v2.point.vy -= f * ny * invM2;
						}
					}
				}
			}
		}
		let _g6 = 0;
		let _g7 = this.nodes;
		while(_g6 < _g7.length) {
			let n1 = _g7[_g6++];
			let _g = 0;
			let _g1 = this.nodes;
			while(_g < _g1.length) {
				let _g2 = 0;
				let _g3 = _g1[_g++].sockets;
				while(_g2 < _g3.length) {
					let n1p = n1.phys;
					let s2p = _g3[_g2++].phys;
					let v1 = n1p.vertex;
					let v2 = s2p.vertex;
					let invM1 = v1.point.invM;
					let invM2 = v2.point.invM;
					if(invM1 + invM2 == 0) {
						invM1 = 1;
						invM2 = 1;
					}
					let x1;
					let y1;
					let x2;
					let y2;
					let _g = v1.type;
					if(_g._hx_index == 1) {
						let _g1 = _g.s;
						x1 = _g1.phys.xForDrawing;
						y1 = _g1.phys.yForDrawing;
					} else {
						x1 = v1.point.x;
						y1 = v1.point.y;
					}
					let _g1 = v2.type;
					if(_g1._hx_index == 1) {
						let _g = _g1.s;
						x2 = _g.phys.xForDrawing;
						y2 = _g.phys.yForDrawing;
					} else {
						x2 = v2.point.x;
						y2 = v2.point.y;
					}
					let dx = x1 - x2;
					let dy = y1 - y2;
					let dist = Math.sqrt(dx * dx + dy * dy);
					let invDist = dist == 0 ? 0 : 1 / dist;
					let nx = dx * invDist;
					let ny = dy * invDist;
					let f = n1p.radius + s2p.radius + 1.0 - dist;
					f /= invM1 + invM2;
					f *= 0.1;
					if(f > 0) {
						v1.point.vx += f * nx * invM1;
						v1.point.vy += f * ny * invM1;
						v2.point.vx -= f * nx * invM2;
						v2.point.vy -= f * ny * invM2;
					}
				}
			}
		}
		let _g8 = 0;
		let _g9 = this.nodes;
		while(_g8 < _g9.length) {
			let n = _g9[_g8];
			++_g8;
			let _g = 1;
			let _g1 = n.sockets.length;
			while(_g < _g1) {
				let i = _g++;
				let _g1 = 0;
				while(_g1 < i) {
					let s1 = n.sockets[i];
					let s2 = n.sockets[_g1++];
					let s1p = s1.phys;
					let s2p = s2.phys;
					let v1 = s1p.vertex;
					let v2 = s2p.vertex;
					let strength = s1.type._hx_index == 1 || s2.type._hx_index == 1 ? 1 : 0.2;
					if(strength == null) {
						strength = 1.0;
					}
					let invM1 = v1.point.invM;
					let invM2 = v2.point.invM;
					if(invM1 + invM2 == 0) {
						invM1 = 1;
						invM2 = 1;
					}
					let x1;
					let y1;
					let x2;
					let y2;
					let _g = v1.type;
					if(_g._hx_index == 1) {
						let _g1 = _g.s;
						x1 = _g1.phys.xForDrawing;
						y1 = _g1.phys.yForDrawing;
					} else {
						x1 = v1.point.x;
						y1 = v1.point.y;
					}
					let _g2 = v2.type;
					if(_g2._hx_index == 1) {
						let _g = _g2.s;
						x2 = _g.phys.xForDrawing;
						y2 = _g.phys.yForDrawing;
					} else {
						x2 = v2.point.x;
						y2 = v2.point.y;
					}
					let dx = x1 - x2;
					let dy = y1 - y2;
					let dist = Math.sqrt(dx * dx + dy * dy);
					let invDist = dist == 0 ? 0 : 1 / dist;
					let nx = dx * invDist;
					let ny = dy * invDist;
					let f = (s1p.radius + s2p.radius + 1.0 - dist) * strength;
					f /= invM1 + invM2;
					f *= 0.1;
					if(f > 0) {
						v1.point.vx += f * nx * invM1;
						v1.point.vy += f * ny * invM1;
						v2.point.vx -= f * nx * invM2;
						v2.point.vy -= f * ny * invM2;
					}
				}
			}
		}
		let _g10 = 0;
		let _g11 = this.vertices;
		while(_g10 < _g11.length) {
			let v = _g11[_g10];
			++_g10;
			if(v.type != graph_VertexType.Normal) {
				continue;
			}
			let _g = 0;
			let _g1 = this.nodes;
			while(_g < _g1.length) {
				let np = _g1[_g++].phys;
				let v2 = np.vertex;
				let invM1 = v.point.invM;
				let invM2 = v2.point.invM;
				if(invM1 + invM2 == 0) {
					invM1 = 1;
					invM2 = 1;
				}
				let x1;
				let y1;
				let x2;
				let y2;
				let _g2 = v.type;
				if(_g2._hx_index == 1) {
					let _g = _g2.s;
					x1 = _g.phys.xForDrawing;
					y1 = _g.phys.yForDrawing;
				} else {
					x1 = v.point.x;
					y1 = v.point.y;
				}
				let _g3 = v2.type;
				if(_g3._hx_index == 1) {
					let _g = _g3.s;
					x2 = _g.phys.xForDrawing;
					y2 = _g.phys.yForDrawing;
				} else {
					x2 = v2.point.x;
					y2 = v2.point.y;
				}
				let dx = x1 - x2;
				let dy = y1 - y2;
				let dist = Math.sqrt(dx * dx + dy * dy);
				let invDist = dist == 0 ? 0 : 1 / dist;
				let nx = dx * invDist;
				let ny = dy * invDist;
				let f = np.radius + 1.0 - dist;
				f /= invM1 + invM2;
				f *= 0.1;
				if(f > 0) {
					v.point.vx += f * nx * invM1;
					v.point.vy += f * ny * invM1;
					v2.point.vx -= f * nx * invM2;
					v2.point.vy -= f * ny * invM2;
				}
			}
			let n = v.edges.length;
			if(n <= 2) {
				continue;
			}
			let _g2 = 1;
			while(_g2 < n) {
				let i = _g2++;
				let _g = 0;
				while(_g < i) {
					let j = _g++;
					let e = v.edges[i];
					let v1 = e.v1 != v ? e.v1 : e.v2;
					let e1 = v.edges[j];
					let v2 = e1.v1 != v ? e1.v1 : e1.v2;
					let invM1 = v1.point.invM;
					let invM2 = v2.point.invM;
					if(invM1 + invM2 == 0) {
						invM1 = 1;
						invM2 = 1;
					}
					let x1;
					let y1;
					let x2;
					let y2;
					let _g1 = v1.type;
					if(_g1._hx_index == 1) {
						let _g = _g1.s;
						x1 = _g.phys.xForDrawing;
						y1 = _g.phys.yForDrawing;
					} else {
						x1 = v1.point.x;
						y1 = v1.point.y;
					}
					let _g2 = v2.type;
					if(_g2._hx_index == 1) {
						let _g = _g2.s;
						x2 = _g.phys.xForDrawing;
						y2 = _g.phys.yForDrawing;
					} else {
						x2 = v2.point.x;
						y2 = v2.point.y;
					}
					let dx = x1 - x2;
					let dy = y1 - y2;
					let dist = Math.sqrt(dx * dx + dy * dy);
					let invDist = dist == 0 ? 0 : 1 / dist;
					let nx = dx * invDist;
					let ny = dy * invDist;
					let f = 6. - dist;
					f /= invM1 + invM2;
					f *= 0.1;
					if(f > 0) {
						v1.point.vx += f * nx * invM1;
						v1.point.vy += f * ny * invM1;
						v2.point.vx -= f * nx * invM2;
						v2.point.vy -= f * ny * invM2;
					}
				}
			}
		}
		this.world.step();
	}
	pick(x,y,flags,radius) {
		let minD = radius;
		let minV = null;
		let _g = 0;
		let _g1 = this.vertices;
		while(_g < _g1.length) {
			let v = _g1[_g];
			++_g;
			let vx = v.point.x;
			let vy = v.point.y;
			let r = 0;
			let _g2 = v.type;
			switch(_g2._hx_index) {
			case 0:
				if((flags & 1) == 0) {
					continue;
				}
				r = _g2.n.phys.radius;
				break;
			case 1:
				let _g3 = _g2.s;
				let _g4 = _g3.type;
				let tmp;
				switch(_g4._hx_index) {
				case 0:
					tmp = _g4.io ? 8 : 4;
					break;
				case 1:
					tmp = _g4.io ? 32 : 16;
					break;
				case 2:
					tmp = _g4.io ? 32 : 16;
					break;
				}
				if((flags & tmp) == 0) {
					continue;
				}
				let sp = _g3.phys;
				sp.computeDrawingPos();
				vx = sp.xForDrawing;
				vy = sp.yForDrawing;
				r = sp.radius;
				break;
			case 2:
				if((flags & 2) == 0) {
					continue;
				}
				r = 2.;
				break;
			}
			let dx = x - vx;
			let dy = y - vy;
			let dist = Math.sqrt(dx * dx + dy * dy);
			dist -= r;
			if(dist < minD) {
				minD = dist;
				minV = v;
			}
		}
		return minV;
	}
	destroyVertex(v) {
		switch(v.type._hx_index) {
		case 0:
			throw haxe_Exception.thrown("cannot destroy node vertex");
		case 1:
			throw haxe_Exception.thrown("cannot destroy socket vertex");
		case 2:
			this.destroyVertexUnsafe(v);
			break;
		}
	}
	destroyVertexUnsafe(v) {
		let es = v.edges.slice();
		let _g = 0;
		while(_g < es.length) this.destroyEdge(es[_g++]);
		this.world.removePoint(v.point);
		if(!HxOverrides.remove(this.vertices,v)) {
			throw haxe_Exception.thrown("couldn't remove vertex");
		}
		this.updateRequired = true;
	}
	destroyEdge(e) {
		this.world.removeSpring(e.spring);
		e.disconnect();
		if(!HxOverrides.remove(this.edges,e)) {
			throw haxe_Exception.thrown("couldn't remove edge");
		}
		this.updateRequired = true;
	}
	serialize(filter,keepIds) {
		this.updateConnections();
		let nodes = [];
		let filteredNodes = [];
		let _g = 0;
		let _g1 = this.nodes;
		while(_g < _g1.length) {
			let n = _g1[_g];
			++_g;
			if(filter.containNode(n)) {
				nodes.push(n.serialize(filter,keepIds));
				filteredNodes.push(n);
			}
		}
		let connections = [];
		let _g2 = 0;
		let _g3 = this.nodes;
		while(_g2 < _g3.length) {
			let _g = 0;
			let _g1 = _g3[_g2++].sockets;
			while(_g < _g1.length) {
				let s = _g1[_g];
				++_g;
				if(graph_SocketTypeTool.io(s.type) == false) {
					continue;
				}
				let _g2 = 0;
				let _g3 = s.connections;
				while(_g2 < _g3.length) {
					let c = _g3[_g2];
					++_g2;
					let fromN = c.from.parent;
					let toN = c.to.parent;
					let n1 = filteredNodes.indexOf(fromN);
					let n2 = filteredNodes.indexOf(toN);
					if(n1 == -1 || n2 == -1) {
						continue;
					}
					connections.push({ n1 : n1, s1 : fromN.sockets.indexOf(c.from), n2 : n2, s2 : toN.sockets.indexOf(c.to)});
				}
			}
		}
		return { nodes : nodes, connections : connections, id : keepIds ? this.id : -1};
	}
	static searchGraphById(root,id) {
		let search = null;
		search = function(next) {
			if(next.id == id) {
				return next;
			}
			let _g = 0;
			let _g1 = next.nodes;
			while(_g < _g1.length) {
				let node = _g1[_g];
				++_g;
				if(node.type._hx_index == 1) {
					let res = search(node.moduleGraph);
					if(res != null) {
						return res;
					}
				}
			}
			return null;
		};
		return search(root);
	}
	static deserializeInto(g,offsetX,offsetY,data,vibration) {
		if(vibration == null) {
			vibration = true;
		}
		if(data.id != -1) {
			throw haxe_Exception.thrown("cannot deserialize graph data with its id into an existing graph");
		}
		let indexOffset = g.nodes.length;
		let _g = 0;
		let _g1 = data.nodes;
		while(_g < _g1.length) {
			let n = _g1[_g];
			++_g;
			let v = offsetX;
			v = offsetX < -10000 ? -10000 : offsetX > 10000 ? 10000 : offsetX;
			let vi = Math.round(v * 10000);
			if(vi == 0 && v != 0) {
				vi = v > 0 ? 1 : -1;
			}
			let v1 = n.x / 10000 + vi / 10000;
			if(v1 < -10000) {
				v1 = -10000;
			} else if(v1 > 10000) {
				v1 = 10000;
			}
			let vi1 = Math.round(v1 * 10000);
			if(vi1 == 0 && v1 != 0) {
				vi1 = v1 > 0 ? 1 : -1;
			}
			let v2 = offsetY;
			v2 = offsetY < -10000 ? -10000 : offsetY > 10000 ? 10000 : offsetY;
			let vi2 = Math.round(v2 * 10000);
			if(vi2 == 0 && v2 != 0) {
				vi2 = v2 > 0 ? 1 : -1;
			}
			let v3 = n.y / 10000 + vi2 / 10000;
			if(v3 < -10000) {
				v3 = -10000;
			} else if(v3 > 10000) {
				v3 = 10000;
			}
			let vi3 = Math.round(v3 * 10000);
			if(vi3 == 0 && v3 != 0) {
				vi3 = v3 > 0 ? 1 : -1;
			}
			let node = g.createNode(vi1 / 10000,vi3 / 10000,graph_Node.deserializeType(n.type),graph_NodeSetting.deserialize(n.setting));
			if(node.type._hx_index == 1) {
				node.moduleGraph = graph_Graph.deserialize(n.graph,g.listener,vibration);
				node.moduleGraph.parentModule = node;
				let _this = n.boundaries;
				let result = new Array(_this.length);
				let _g = 0;
				let _g1 = _this.length;
				while(_g < _g1) {
					let i = _g++;
					result[i] = node.moduleGraph.nodes[_this[i]];
				}
				node.moduleBoundaries = result;
			}
			let _g2 = 0;
			let _g3 = n.sockets;
			while(_g2 < _g3.length) {
				let s = _g3[_g2];
				++_g2;
				node.createSocket(graph_Socket.deserializeType(s.type,node.moduleBoundaries)).phys.setAngle(s.angle / 10000);
			}
		}
		let _g2 = 0;
		let _g3 = data.connections;
		while(_g2 < _g3.length) {
			let c = _g3[_g2];
			++_g2;
			g.connectCable(g.nodes[indexOffset + c.n1].sockets[c.s1].phys.vertex,g.nodes[indexOffset + c.n2].sockets[c.s2].phys.vertex,vibration);
		}
		g.updateConnections();
		let addedNodes = g.nodes.slice(indexOffset);
		let _g4 = 0;
		while(_g4 < addedNodes.length) addedNodes[_g4++].notifyUpdate();
		return addedNodes;
	}
	static deserialize(data,listener,vibration) {
		if(vibration == null) {
			vibration = true;
		}
		let id = data.id;
		let graph = new graph_Graph(listener,id);
		data.id = -1;
		graph_Graph.deserializeInto(graph,0,0,data,vibration);
		data.id = id;
		return graph;
	}
}
$hxClasses["graph.Graph"] = graph_Graph;
graph_Graph.__name__ = "graph.Graph";
Object.assign(graph_Graph.prototype, {
	__class__: graph_Graph
});
class graph_GraphBoundingVolume {
	constructor(x,y,r) {
		this.x = x;
		this.y = y;
		this.r = r;
	}
}
$hxClasses["graph.GraphBoundingVolume"] = graph_GraphBoundingVolume;
graph_GraphBoundingVolume.__name__ = "graph.GraphBoundingVolume";
Object.assign(graph_GraphBoundingVolume.prototype, {
	__class__: graph_GraphBoundingVolume
});
class graph_Node extends app_event_Dispatcher {
	constructor(g,x,y,type,setting) {
		app_event_Dispatcher._hx_skip_constructor = true;
		super();
		app_event_Dispatcher._hx_skip_constructor = false;
		this._hx_constructor(g,x,y,type,setting);
	}
	_hx_constructor(g,x,y,type,setting) {
		this.id = ++graph_Node.idCount;
		super._hx_constructor();
		this.g = g;
		this.type = type;
		this.setting = setting;
		if(type._hx_index == 1) {
			this.moduleGraph = new graph_Graph(g.listener);
			this.moduleGraph.parentModule = this;
			this.moduleBoundaries = [];
		}
		this.phys = new graph_NodePhys(g,this,x,y);
		this.sockets = [];
		this.selection = new graph_Selection();
	}
	boundaryToNormal() {
		if(this.type._hx_index != 3) {
			throw haxe_Exception.thrown("not a boundary node");
		}
		this.phys.toSmall();
		this.type = graph_NodeType.Small;
		this.setting.name = "";
		this.setting.role = synth_NodeRole.Dupl;
		this.notifyUpdate();
	}
	createSocket(type) {
		let ok;
		switch(type._hx_index) {
		case 0:
			if(type.io) {
				let _g = this.type;
				switch(_g._hx_index) {
				case 0:
					ok = _g.output;
					break;
				case 1:
					ok = _g.output;
					break;
				case 2:
					ok = true;
					break;
				case 3:
					ok = _g.io == true;
					break;
				}
			} else {
				let _g = this.type;
				switch(_g._hx_index) {
				case 0:
					ok = _g.input;
					break;
				case 1:
					ok = _g.input;
					break;
				case 2:
					ok = true;
					break;
				case 3:
					ok = _g.io == false;
					break;
				}
			}
			break;
		case 1:
			switch(this.type._hx_index) {
			case 0:
				ok = true;
				break;
			case 1:
				ok = false;
				break;
			case 2:
				ok = false;
				break;
			case 3:
				ok = false;
				break;
			}
			break;
		case 2:
			switch(this.type._hx_index) {
			case 0:
				ok = true;
				break;
			case 1:
				ok = true;
				break;
			case 2:
				ok = true;
				break;
			case 3:
				ok = true;
				break;
			}
			break;
		}
		if(!ok) {
			throw haxe_Exception.thrown("cannot create socket");
		}
		let reference;
		if(this.type._hx_index == 1) {
			switch(type._hx_index) {
			case 0:
				throw haxe_Exception.thrown("not implemented yet");
			case 1:
				throw haxe_Exception.thrown("module node cannot have param socket");
			case 2:
				reference = type.boundary;
				break;
			}
		} else {
			reference = this;
		}
		let s = new graph_Socket(this.g,this,type);
		this.sockets.push(s);
		this.g.listener.onSocketCreated(s.id,reference.id,reference != this ? graph_SocketType.Normal(graph_SocketTypeTool.io(s.type)) : s.type);
		return s;
	}
	destroySocket(s) {
		let conns = s.connections.slice();
		let _g = 0;
		while(_g < conns.length) {
			let c = conns[_g];
			++_g;
			let s1 = c.from;
			let s2 = c.to;
			this.g.listener.onSocketDisconnected(s1.id,s2.id);
			HxOverrides.remove(s1.connections,c);
			HxOverrides.remove(s2.connections,c);
		}
		this.g.listener.onSocketDestroyed(s.id);
		this.g.destroyVertexUnsafe(s.phys.vertex);
		HxOverrides.remove(this.sockets,s);
	}
	notifyUpdate() {
		let _gthis = this;
		if(this.type._hx_index != 2 && this.setting.role._hx_index != 2) {
			let _g = this.setting.role;
			let nameLength = (_g._hx_index == 7 ? _g.num.toString() : this.setting.name).length;
			if(this.type._hx_index == 3) {
				++nameLength;
			}
			this.phys.changeScale(nameLength > 3 ? 1.0 + (nameLength - 3) * 0.25 : 1.0);
		}
		this.updateSockets();
		this.dispatch(function(l) {
			l.onNodeUpdate(_gthis);
		});
		if(this.type._hx_index != 1) {
			this.g.listener.onNodeUpdated(this.id);
		}
	}
	updateSockets() {
		let disabledNames = [];
		let _g = this.setting.role;
		switch(_g._hx_index) {
		case 0:
			break;
		case 1:
			break;
		case 2:
			break;
		case 3:
			break;
		case 4:
			switch(_g.type) {
			case "bp":case "bs":case "hp":case "lp":
				disabledNames.push("gain");
				break;
			case "hs":case "ls":
				disabledNames.push("Q");
				break;
			case "p":
				break;
			}
			break;
		case 5:
			break;
		case 6:
			break;
		case 7:
			break;
		case 8:
			break;
		case 9:
			break;
		case 10:
			break;
		}
		let _g1 = 0;
		let _g2 = this.sockets;
		while(_g1 < _g2.length) {
			let s = _g2[_g1];
			++_g1;
			let _g = s.type;
			s.grayedOut = _g._hx_index == 1 && disabledNames.indexOf(_g.name) != -1;
		}
	}
	serialize(filter,keepIds) {
		let sockets = [];
		let _gthis = this;
		let _g = 0;
		let _g1 = this.sockets;
		while(_g < _g1.length) {
			let s = _g1[_g];
			++_g;
			sockets.push(s.serialize());
		}
		let v = this.phys.vertex.point.x;
		if(v < -10000) {
			v = -10000;
		} else if(v > 10000) {
			v = 10000;
		}
		let vi = Math.round(v * 10000);
		if(vi == 0 && v != 0) {
			vi = v > 0 ? 1 : -1;
		}
		let v1 = this.phys.vertex.point.y;
		if(v1 < -10000) {
			v1 = -10000;
		} else if(v1 > 10000) {
			v1 = 10000;
		}
		let vi1 = Math.round(v1 * 10000);
		if(vi1 == 0 && v1 != 0) {
			vi1 = v1 > 0 ? 1 : -1;
		}
		let data = { x : vi, y : vi1, type : graph_Node.serializeType(this.type), setting : this.setting.serialize(), sockets : sockets};
		if(this.type._hx_index == 1) {
			data.graph = this.moduleGraph.serialize(graph_serial_NodeFilter.ALL,keepIds);
			let _this = this.moduleBoundaries;
			let result = new Array(_this.length);
			let _g = 0;
			let _g1 = _this.length;
			while(_g < _g1) {
				let i = _g++;
				result[i] = _gthis.moduleGraph.nodes.indexOf(_this[i]);
			}
			data.boundaries = result;
		}
		return data;
	}
	getX() {
		return this.phys.vertex.point.x;
	}
	getY() {
		return this.phys.vertex.point.y;
	}
	getRadius() {
		return this.phys.radius;
	}
	getText() {
		let _g = this.setting.role;
		if(_g._hx_index == 7) {
			return _g.num.toString();
		} else {
			return this.setting.name;
		}
	}
	getRole() {
		return this.setting.role;
	}
	getType() {
		return this.type;
	}
	static serializeType(type) {
		switch(type._hx_index) {
		case 0:
			return { normal : { input : type.input, output : type.output}};
		case 1:
			return { module : { input : type.input, output : type.output}};
		case 2:
			return { small : 0};
		case 3:
			return { boundary : type.io};
		}
	}
	static deserializeType(data) {
		let count = 0;
		if(data.normal != null) {
			count = 1;
		}
		if(data.module != null) {
			++count;
		}
		if(data.boundary != null) {
			++count;
		}
		if(data.small != null) {
			++count;
		}
		if(count != 1) {
			throw haxe_Exception.thrown("invalid node type data: " + Std.string(data));
		}
		if(data.normal != null) {
			return graph_NodeType.Normal(data.normal.input,data.normal.output);
		}
		if(data.module != null) {
			return graph_NodeType.Module(data.module.input,data.module.output);
		}
		if(data.boundary != null) {
			return graph_NodeType.Boundary(data.boundary);
		}
		if(data.small != null) {
			return graph_NodeType.Small;
		}
		throw haxe_Exception.thrown("!?");
	}
}
$hxClasses["graph.Node"] = graph_Node;
graph_Node.__name__ = "graph.Node";
graph_Node.__interfaces__ = [graph_NodeViewData];
graph_Node.__super__ = app_event_Dispatcher;
Object.assign(graph_Node.prototype, {
	__class__: graph_Node
});
class graph_NodePhys {
	constructor(g,node,x,y) {
		this.node = node;
		this.vertex = g.createVertex(x,y,graph_VertexType.Node(node),0);
		this.scale = node.type._hx_index == 2 ? 0.5 : node.setting.role._hx_index == 2 ? 3.0 : 1.0;
		this.set_drawingRadiusOffset(0);
	}
	toSmall() {
		this.vertex.point.invM = 0;
		this.changeScale(0.5);
	}
	changeScale(s) {
		if(s == null) {
			s = 1.0;
		}
		this.scale = s;
		this.radius = 12 * s + this.drawingRadiusOffset;
		if(this.node.sockets != null) {
			let _g = 0;
			let _g1 = this.node.sockets;
			while(_g < _g1.length) {
				let s = _g1[_g];
				++_g;
				s.phys.edge.spring.length = this.radius + s.phys.radius * 2;
			}
		}
	}
	set_drawingRadiusOffset(v) {
		this.drawingRadiusOffset = v;
		this.changeScale(this.scale);
		return v;
	}
}
$hxClasses["graph.NodePhys"] = graph_NodePhys;
graph_NodePhys.__name__ = "graph.NodePhys";
Object.assign(graph_NodePhys.prototype, {
	__class__: graph_NodePhys
});
class graph_NodeSetting {
	constructor(name,role) {
		this.name = name;
		this.role = role;
	}
	serialize() {
		return { name : this.name, role : graph_NodeSetting.serializeRole(this.role)};
	}
	static serializeRole(role) {
		switch(role._hx_index) {
		case 0:
			return { frequency : 0};
		case 1:
			return { oscillator : role.type};
		case 2:
			return { destination : 0};
		case 3:
			return { delay : 0};
		case 4:
			return { filter : role.type};
		case 5:
			return { compressor : 0};
		case 6:
			let _g = role.env;
			return { envelope : { a : _g.a, d : _g.d, s : _g.s, r : _g.r}};
		case 7:
			return { number : role.num.get_value()};
		case 8:
			return { binOp : role.type};
		case 9:
			return { dupl : 0};
		case 10:
			return { none : 0};
		}
	}
	static deserializeRole(data) {
		let count = 0;
		if(data.frequency != null) {
			count = 1;
		}
		if(data.oscillator != null) {
			++count;
		}
		if(data.destination != null) {
			++count;
		}
		if(data.delay != null) {
			++count;
		}
		if(data.filter != null) {
			++count;
		}
		if(data.compressor != null) {
			++count;
		}
		if(data.envelope != null) {
			++count;
		}
		if(data.number != null) {
			++count;
		}
		if(data.binOp != null) {
			++count;
		}
		if(data.dupl != null) {
			++count;
		}
		if(data.none != null) {
			++count;
		}
		if(count != 1) {
			throw haxe_Exception.thrown("invalid node role data: " + Std.string(data));
		}
		if(data.frequency != null) {
			return synth_NodeRole.Frequency;
		}
		if(data.oscillator != null) {
			return synth_NodeRole.Oscillator(data.oscillator);
		}
		if(data.destination != null) {
			return synth_NodeRole.Destination;
		}
		if(data.delay != null) {
			return synth_NodeRole.Delay;
		}
		if(data.filter != null) {
			return synth_NodeRole.Filter(data.filter);
		}
		if(data.compressor != null) {
			return synth_NodeRole.Compressor;
		}
		if(data.envelope != null) {
			return synth_NodeRole.Envelope(new synth_EnvelopeData(data.envelope.a,data.envelope.d,data.envelope.s,data.envelope.r));
		}
		if(data.number != null) {
			return synth_NodeRole.Number(new synth_NumberData(data.number));
		}
		if(data.binOp != null) {
			return synth_NodeRole.BinOp(data.binOp);
		}
		if(data.dupl != null) {
			return synth_NodeRole.Dupl;
		}
		if(data.none != null) {
			return synth_NodeRole.None;
		}
		throw haxe_Exception.thrown("!?");
	}
	static deserialize(data) {
		return new graph_NodeSetting(data.name,graph_NodeSetting.deserializeRole(data.role));
	}
}
$hxClasses["graph.NodeSetting"] = graph_NodeSetting;
graph_NodeSetting.__name__ = "graph.NodeSetting";
Object.assign(graph_NodeSetting.prototype, {
	__class__: graph_NodeSetting
});
class graph_NodeTypeTools {
	static canCreateInput(type) {
		switch(type._hx_index) {
		case 0:
			return type.input;
		case 1:
			return type.input;
		case 2:
			return true;
		case 3:
			return type.io == false;
		}
	}
	static canCreateOutput(type) {
		switch(type._hx_index) {
		case 0:
			return type.output;
		case 1:
			return type.output;
		case 2:
			return true;
		case 3:
			return type.io == true;
		}
	}
}
$hxClasses["graph.NodeTypeTools"] = graph_NodeTypeTools;
graph_NodeTypeTools.__name__ = "graph.NodeTypeTools";
class graph_Selection {
	constructor() {
		this.set_selected(false);
		this.count = 0;
	}
	set_selected(selected) {
		if(this.selected != selected) {
			this.selected = selected;
			this.count = 0;
		}
		return selected;
	}
}
$hxClasses["graph.Selection"] = graph_Selection;
graph_Selection.__name__ = "graph.Selection";
Object.assign(graph_Selection.prototype, {
	__class__: graph_Selection
});
class graph_Socket {
	constructor(g,parent,type) {
		this.id = ++graph_Socket.idCount;
		this.prevConnections = [];
		this.connections = [];
		this.g = g;
		this.parent = parent;
		this.type = type;
		this.phys = new graph_SocketPhys(g,parent.phys,this);
		this.selection = new graph_Selection();
		this.grayedOut = false;
	}
	serialize() {
		this.phys.computeDrawingPos();
		let v = this.phys.getAngle();
		if(v < -10000) {
			v = -10000;
		} else if(v > 10000) {
			v = 10000;
		}
		let vi = Math.round(v * 10000);
		if(vi == 0 && v != 0) {
			vi = v > 0 ? 1 : -1;
		}
		return { angle : vi, type : graph_Socket.serializeType(this.type,this.parent.moduleBoundaries)};
	}
	static serializeType(type,boundaries) {
		switch(type._hx_index) {
		case 0:
			return { normal : type.io};
		case 1:
			return { param : { io : type.io, name : type.name}};
		case 2:
			return { module : { io : type.io, boundaryNode : boundaries.indexOf(type.boundary)}};
		}
	}
	static deserializeType(data,boundaries) {
		let count = 0;
		if(data.normal != null) {
			count = 1;
		}
		if(data.param != null) {
			++count;
		}
		if(data.module != null) {
			++count;
		}
		if(count != 1) {
			throw haxe_Exception.thrown("invalid socket type data: " + Std.string(data));
		}
		if(data.normal != null) {
			return graph_SocketType.Normal(data.normal);
		}
		if(data.param != null) {
			return graph_SocketType.Param(data.param.io,data.param.name);
		}
		if(data.module != null) {
			return graph_SocketType.Module(data.module.io,boundaries[data.module.boundaryNode]);
		}
		throw haxe_Exception.thrown("!?");
	}
}
$hxClasses["graph.Socket"] = graph_Socket;
graph_Socket.__name__ = "graph.Socket";
Object.assign(graph_Socket.prototype, {
	__class__: graph_Socket
});
class graph_SocketConnection {
	constructor(from,to,firstEdge,lastEdge) {
		this.from = from;
		this.to = to;
		this.firstEdge = firstEdge;
		this.lastEdge = lastEdge;
	}
	other(s) {
		if(s != this.from) {
			return this.from;
		} else {
			return this.to;
		}
	}
	nearestEdge(s) {
		if(s == this.from) {
			return this.firstEdge;
		} else {
			return this.lastEdge;
		}
	}
	getIntermediateVertices() {
		let res = [];
		let prevV = this.firstEdge.v1;
		let v = this.firstEdge.v2;
		let info = new graph_CableInfo();
		while(v != this.lastEdge.v2) {
			res.push(v);
			v.followCable(prevV,info);
			prevV = v;
			v = info.vertex;
		}
		return res;
	}
	static indexOf(array,from,to) {
		let _g = 0;
		let _g1 = array.length;
		while(_g < _g1) {
			let i = _g++;
			let c = array[i];
			if(c.from == from && c.to == to) {
				return i;
			}
		}
		return -1;
	}
}
$hxClasses["graph.SocketConnection"] = graph_SocketConnection;
graph_SocketConnection.__name__ = "graph.SocketConnection";
Object.assign(graph_SocketConnection.prototype, {
	__class__: graph_SocketConnection
});
class graph_SocketPhys {
	constructor(g,nodePhys,socket) {
		this.socket = socket;
		this.nodePhys = nodePhys;
		let tmp;
		switch(socket.type._hx_index) {
		case 0:
			tmp = 2.0;
			break;
		case 1:
			tmp = 4.0;
			break;
		case 2:
			tmp = 4.0;
			break;
		}
		this.radius = tmp;
		this.vertex = g.createVertex(nodePhys.vertex.point.x + Math.random() * 2 - 1,nodePhys.vertex.point.y + Math.random() * 2 - 1,graph_VertexType.Socket(socket),0.2);
		this.edge = g.createEdge(nodePhys.vertex,this.vertex,nodePhys.radius + this.radius * 2);
		this.xForDrawing = 0;
		this.yForDrawing = 0;
		this.normalX = 0;
		this.normalY = 0;
		this.labels = null;
		this.labelText = "";
	}
	setNormal(nx,ny) {
		this.vertex.point.x = this.nodePhys.vertex.point.x + nx * (this.nodePhys.radius + this.radius * 2);
		this.vertex.point.y = this.nodePhys.vertex.point.y + ny * (this.nodePhys.radius + this.radius * 2);
	}
	getAngle() {
		this.computeDrawingPos();
		return Math.atan2(this.normalY,this.normalX);
	}
	setAngle(angle) {
		this.setNormal(Math.cos(angle),Math.sin(angle));
	}
	lookAt(x,y) {
		let dx = x - this.nodePhys.vertex.point.x;
		let dy = y - this.nodePhys.vertex.point.y;
		let d = Math.sqrt(dx * dx + dy * dy);
		let invD = d == 0 ? 0 : 1 / d;
		this.setNormal(dx * invD,dy * invD);
	}
	computeDrawingPos() {
		let sx = this.vertex.point.x;
		let sy = this.vertex.point.y;
		let dx = sx - this.nodePhys.vertex.point.x;
		let dy = sy - this.nodePhys.vertex.point.y;
		let dist = Math.sqrt(dx * dx + dy * dy);
		let invDist = dist == 0 ? 0 : 1 / dist;
		this.normalX = dx * invDist;
		this.normalY = dy * invDist;
		this.xForDrawing = sx - this.normalX * this.radius;
		this.yForDrawing = sy - this.normalY * this.radius;
	}
}
$hxClasses["graph.SocketPhys"] = graph_SocketPhys;
graph_SocketPhys.__name__ = "graph.SocketPhys";
Object.assign(graph_SocketPhys.prototype, {
	__class__: graph_SocketPhys
});
var graph_SocketType = $hxEnums["graph.SocketType"] = { __ename__ : "graph.SocketType", __constructs__ : ["Normal","Param","Module"]
	,Normal: ($_=function(io) { return {_hx_index:0,io:io,__enum__:"graph.SocketType",toString:$estr}; },$_.__params__ = ["io"],$_)
	,Param: ($_=function(io,name) { return {_hx_index:1,io:io,name:name,__enum__:"graph.SocketType",toString:$estr}; },$_.__params__ = ["io","name"],$_)
	,Module: ($_=function(io,boundary) { return {_hx_index:2,io:io,boundary:boundary,__enum__:"graph.SocketType",toString:$estr}; },$_.__params__ = ["io","boundary"],$_)
};
class graph_SocketTypeTool {
	static io(type) {
		switch(type._hx_index) {
		case 0:
			return type.io;
		case 1:
			return type.io;
		case 2:
			return type.io;
		}
	}
}
$hxClasses["graph.SocketTypeTool"] = graph_SocketTypeTool;
graph_SocketTypeTool.__name__ = "graph.SocketTypeTool";
class graph_Vertex {
	constructor(x,y,type,invM) {
		this.id = ++graph_Vertex.idCount;
		this.life = 60;
		this.type = type;
		this.point = new phys_Point(x,y,invM);
		let tmp;
		switch(type._hx_index) {
		case 0:
			tmp = 0.8;
			break;
		case 1:
			tmp = 0.8;
			break;
		case 2:
			tmp = 0.95;
			break;
		}
		this.point.damp = tmp;
		this.edges = [];
		this.tmpValForDfs = 0;
		this.tmpValForRendering = 0;
		this.selection = new graph_Selection();
	}
	vibrate(strong) {
		if(strong == null) {
			strong = false;
		}
		let ang = Math.random() * Math.PI * 2;
		let amp = strong ? 10 : 2;
		let fx = Math.cos(ang) * amp;
		let fy = Math.sin(ang) * amp;
		let _g = 0;
		let _g1 = this.edges;
		while(_g < _g1.length) {
			let e = _g1[_g];
			++_g;
			let v = this != e.v1 ? e.v1 : e.v2;
			if(v.type._hx_index != 0) {
				this.point.vx += fx;
				this.point.vy += fy;
				v.point.vx -= fx;
				v.point.vy -= fy;
				return;
			}
		}
	}
	followCable(prev,out) {
		if(this.edges.length == 1) {
			let _this = this.edges[0];
			if((this != _this.v1 ? _this.v1 : _this.v2) != prev) {
				throw haxe_Exception.thrown("invalid prev point in cable");
			}
			out.vertex = null;
			out.edge = null;
			return false;
		}
		if(this.edges.length == 2) {
			let _this = this.edges[0];
			let v1 = this != _this.v1 ? _this.v1 : _this.v2;
			let _this1 = this.edges[1];
			let v2 = this != _this1.v1 ? _this1.v1 : _this1.v2;
			if(v1 != prev && v2 != prev) {
				throw haxe_Exception.thrown("invalid prev point in cable");
			}
			if(v1 != prev) {
				out.vertex = v1;
				out.edge = this.edges[0];
			} else {
				out.vertex = v2;
				out.edge = this.edges[1];
			}
			return true;
		}
		throw haxe_Exception.thrown("cannot follow cable: edges=" + this.edges.length);
	}
}
$hxClasses["graph.Vertex"] = graph_Vertex;
graph_Vertex.__name__ = "graph.Vertex";
Object.assign(graph_Vertex.prototype, {
	__class__: graph_Vertex
});
var graph_VertexType = $hxEnums["graph.VertexType"] = { __ename__ : "graph.VertexType", __constructs__ : ["Node","Socket","Normal"]
	,Node: ($_=function(n) { return {_hx_index:0,n:n,__enum__:"graph.VertexType",toString:$estr}; },$_.__params__ = ["n"],$_)
	,Socket: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"graph.VertexType",toString:$estr}; },$_.__params__ = ["s"],$_)
	,Normal: {_hx_index:2,__enum__:"graph.VertexType",toString:$estr}
};
class graph_serial_Fixed {
	static _new(val) {
		return val;
	}
	static fromFloat(v) {
		if(v < -10000) {
			v = -10000;
		} else if(v > 10000) {
			v = 10000;
		}
		let vi = Math.round(v * 10000);
		if(vi == 0 && v != 0) {
			vi = v > 0 ? 1 : -1;
		}
		return vi;
	}
	static add(a,b) {
		let v = a / 10000 + b / 10000;
		if(v < -10000) {
			v = -10000;
		} else if(v > 10000) {
			v = 10000;
		}
		let vi = Math.round(v * 10000);
		if(vi == 0 && v != 0) {
			vi = v > 0 ? 1 : -1;
		}
		return vi;
	}
	static sub(a,b) {
		let v = a / 10000 - b / 10000;
		if(v < -10000) {
			v = -10000;
		} else if(v > 10000) {
			v = 10000;
		}
		let vi = Math.round(v * 10000);
		if(vi == 0 && v != 0) {
			vi = v > 0 ? 1 : -1;
		}
		return vi;
	}
	static mult(a,b) {
		let v = a / 10000 * (b / 10000);
		if(v < -10000) {
			v = -10000;
		} else if(v > 10000) {
			v = 10000;
		}
		let vi = Math.round(v * 10000);
		if(vi == 0 && v != 0) {
			vi = v > 0 ? 1 : -1;
		}
		return vi;
	}
	static neg(a) {
		let v = -(a / 10000);
		if(v < -10000) {
			v = -10000;
		} else if(v > 10000) {
			v = 10000;
		}
		let vi = Math.round(v * 10000);
		if(vi == 0 && v != 0) {
			vi = v > 0 ? 1 : -1;
		}
		return vi;
	}
}
class graph_serial_NodeFilter {
	constructor(containNode) {
		this.containNode = containNode;
	}
	static single(node) {
		return new graph_serial_NodeFilter(function(n) {
			return n == node;
		});
	}
}
$hxClasses["graph.serial.NodeFilter"] = graph_serial_NodeFilter;
graph_serial_NodeFilter.__name__ = "graph.serial.NodeFilter";
Object.assign(graph_serial_NodeFilter.prototype, {
	__class__: graph_serial_NodeFilter
});
class haxe_IMap {
}
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
Object.assign(haxe_IMap.prototype, {
	__class__: haxe_IMap
});
class haxe_Exception extends Error {
	constructor(message,previous,native) {
		super(message);
		this.message = message;
		this.__previousException = previous;
		this.__nativeException = native != null ? native : this;
	}
	unwrap() {
		return this.__nativeException;
	}
	get_native() {
		return this.__nativeException;
	}
	static caught(value) {
		if(((value) instanceof haxe_Exception)) {
			return value;
		} else if(((value) instanceof Error)) {
			return new haxe_Exception(value.message,null,value);
		} else {
			return new haxe_ValueException(value,null,value);
		}
	}
	static thrown(value) {
		if(((value) instanceof haxe_Exception)) {
			return value.get_native();
		} else if(((value) instanceof Error)) {
			return value;
		} else {
			let e = new haxe_ValueException(value);
			return e;
		}
	}
}
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.__super__ = Error;
Object.assign(haxe_Exception.prototype, {
	__class__: haxe_Exception
});
class haxe_Serializer {
	constructor() {
		this.buf = new StringBuf();
		this.cache = [];
		this.useCache = haxe_Serializer.USE_CACHE;
		this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
		this.shash = new haxe_ds_StringMap();
		this.scount = 0;
	}
	toString() {
		return this.buf.b;
	}
	serializeString(s) {
		let x = this.shash.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		this.shash.h[s] = this.scount++;
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	serializeRef(v) {
		let vt = typeof(v);
		let _g = 0;
		let _g1 = this.cache.length;
		while(_g < _g1) {
			let i = _g++;
			let ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	serializeFields(v) {
		let _g = 0;
		let _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			let f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	serialize(v) {
		let _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			let v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			let v2 = v;
			if(isNaN(v2)) {
				this.buf.b += "k";
			} else if(!isFinite(v2)) {
				this.buf.b += v2 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v2 == null ? "null" : "" + v2;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				let className = v.__name__;
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(v.__ename__);
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw haxe_Exception.thrown("Cannot serialize function");
		case 6:
			let c = _g.c;
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				let ucount = 0;
				this.buf.b += "a";
				let _g1 = 0;
				let _g2 = v["length"];
				while(_g1 < _g2) {
					let i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				this.buf.b += "v";
				this.buf.b += Std.string(v.getTime());
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				let v3 = v;
				let k = v3.keys();
				while(k.hasNext()) {
					let k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v3.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_List:
				this.buf.b += "l";
				let _g_head = v.h;
				while(_g_head != null) {
					let val = _g_head.item;
					_g_head = _g_head.next;
					this.serialize(val);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				let v4 = v;
				let k1 = v4.keys();
				while(k1.hasNext()) {
					let k = k1.next();
					let id = Reflect.field(k,"__id__");
					Reflect.deleteField(k,"__id__");
					this.serialize(k);
					k["__id__"] = id;
					this.serialize(v4.h[k.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				let v5 = v;
				let k2 = haxe_ds_StringMap.keysIterator(v5.h);
				while(k2.hasNext()) {
					let k = k2.next();
					this.serializeString(k);
					this.serialize(v5.h[k]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				let v6 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v6.length * 8 / 6));
				this.buf.b += ":";
				let i = 0;
				let max = v6.length - 2;
				let b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					b64 = new Array(haxe_Serializer.BASE64.length);
					let _g = 0;
					let _g1 = haxe_Serializer.BASE64.length;
					while(_g < _g1) {
						let i = _g++;
						b64[i] = HxOverrides.cca(haxe_Serializer.BASE64,i);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i < max) {
					let b1 = v6.b[i++];
					let b2 = v6.b[i++];
					let b3 = v6.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCodePoint(b64[b3 & 63]);
				}
				if(i == max) {
					let b1 = v6.b[i++];
					let b2 = v6.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[b2 << 2 & 63]);
				} else if(i == max + 1) {
					let b1 = v6.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[b1 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			let e = _g.e;
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(e.__ename__);
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v._hx_index);
			} else {
				let e = v;
				this.serializeString($hxEnums[e.__enum__].__constructs__[e._hx_index]);
			}
			this.buf.b += ":";
			let params = Type.enumParameters(v);
			this.buf.b += Std.string(params.length);
			let _g3 = 0;
			while(_g3 < params.length) this.serialize(params[_g3++]);
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw haxe_Exception.thrown("Cannot serialize " + Std.string(v));
		}
	}
	static run(v) {
		let s = new haxe_Serializer();
		s.serialize(v);
		return s.toString();
	}
}
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = "haxe.Serializer";
Object.assign(haxe_Serializer.prototype, {
	__class__: haxe_Serializer
});
class haxe__$Unserializer_DefaultResolver {
	constructor() {
	}
	resolveClass(name) {
		return $hxClasses[name];
	}
	resolveEnum(name) {
		return $hxEnums[name];
	}
}
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
Object.assign(haxe__$Unserializer_DefaultResolver.prototype, {
	__class__: haxe__$Unserializer_DefaultResolver
});
class haxe_Unserializer {
	constructor(buf) {
		this.buf = buf;
		this.length = buf.length;
		this.pos = 0;
		this.scache = [];
		this.cache = [];
		let r = haxe_Unserializer.DEFAULT_RESOLVER;
		if(r == null) {
			r = new haxe__$Unserializer_DefaultResolver();
			haxe_Unserializer.DEFAULT_RESOLVER = r;
		}
		this.resolver = r;
	}
	setResolver(r) {
		if(r == null) {
			if(haxe__$Unserializer_NullResolver.instance == null) {
				haxe__$Unserializer_NullResolver.instance = new haxe__$Unserializer_NullResolver();
			}
			this.resolver = haxe__$Unserializer_NullResolver.instance;
		} else {
			this.resolver = r;
		}
	}
	readDigits() {
		let k = 0;
		let s = false;
		let fpos = this.pos;
		while(true) {
			let c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	readFloat() {
		let p1 = this.pos;
		while(true) {
			let c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	unserializeObject(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw haxe_Exception.thrown("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			let k = this.unserialize();
			if(typeof(k) != "string") {
				throw haxe_Exception.thrown("Invalid object key");
			}
			o[k] = this.unserialize();
		}
		this.pos++;
	}
	unserializeEnum(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw haxe_Exception.thrown("Invalid enum format");
		}
		let nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		let args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	unserialize() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			let name = this.unserialize();
			let cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			return cl;
		case 66:
			let name1 = this.unserialize();
			let e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw haxe_Exception.thrown("Enum not found " + name1);
			}
			return e;
		case 67:
			let name2 = this.unserialize();
			let cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw haxe_Exception.thrown("Class not found " + name2);
			}
			let o = Object.create(cl1.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw haxe_Exception.thrown("Invalid custom data");
			}
			return o;
		case 77:
			let h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			while(this.buf.charCodeAt(this.pos) != 104) h.set(this.unserialize(),this.unserialize());
			this.pos++;
			return h;
		case 82:
			let n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw haxe_Exception.thrown("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			let a = [];
			this.cache.push(a);
			while(true) {
				let c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					let n = this.readDigits();
					a[a.length + n - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			let h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			while(this.buf.charCodeAt(this.pos) != 104) {
				let s = this.unserialize();
				let value = this.unserialize();
				h1.h[s] = value;
			}
			this.pos++;
			return h1;
		case 99:
			let name3 = this.unserialize();
			let cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw haxe_Exception.thrown("Class not found " + name3);
			}
			let o1 = Object.create(cl2.prototype);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			let name4 = this.unserialize();
			let edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name4);
			}
			this.pos++;
			let index = this.readDigits();
			let tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw haxe_Exception.thrown("Unknown enum index " + name4 + "@" + index);
			}
			let e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			let l = new haxe_ds_List();
			this.cache.push(l);
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			let o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			let h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			let c = this.buf.charCodeAt(this.pos++);
			while(c == 58) {
				let i = this.readDigits();
				let value = this.unserialize();
				h2.h[i] = value;
				c = this.buf.charCodeAt(this.pos++);
			}
			if(c != 104) {
				throw haxe_Exception.thrown("Invalid IntMap format");
			}
			return h2;
		case 114:
			let n1 = this.readDigits();
			if(n1 < 0 || n1 >= this.cache.length) {
				throw haxe_Exception.thrown("Invalid reference");
			}
			return this.cache[n1];
		case 115:
			let len = this.readDigits();
			let buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid bytes length");
			}
			let codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			let i = this.pos;
			let rest = len & 3;
			let max = i + (len - rest);
			let bytes = new haxe_io_Bytes(new ArrayBuffer((len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0)));
			let bpos = 0;
			while(i < max) {
				let c1 = codes[buf.charCodeAt(i++)];
				let c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				let c3 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				let c4 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				let c1 = codes[buf.charCodeAt(i++)];
				let c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				if(rest == 3) {
					let c3 = codes[buf.charCodeAt(i++)];
					bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			let d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			let name5 = this.unserialize();
			let edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw haxe_Exception.thrown("Enum not found " + name5);
			}
			let e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw haxe_Exception.thrown(this.unserialize());
		case 121:
			let len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw haxe_Exception.thrown("Invalid string length");
			}
			let s = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	static initCodes() {
		let codes = [];
		let _g = 0;
		let _g1 = haxe_Unserializer.BASE64.length;
		while(_g < _g1) {
			let i = _g++;
			codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
		}
		return codes;
	}
}
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
Object.assign(haxe_Unserializer.prototype, {
	__class__: haxe_Unserializer
});
class haxe__$Unserializer_NullResolver {
	constructor() {
	}
	resolveClass(name) {
		return null;
	}
	resolveEnum(name) {
		return null;
	}
}
$hxClasses["haxe._Unserializer.NullResolver"] = haxe__$Unserializer_NullResolver;
haxe__$Unserializer_NullResolver.__name__ = "haxe._Unserializer.NullResolver";
Object.assign(haxe__$Unserializer_NullResolver.prototype, {
	__class__: haxe__$Unserializer_NullResolver
});
class haxe_ValueException extends haxe_Exception {
	constructor(value,previous,native) {
		super(String(value),previous,native);
		this.value = value;
	}
	unwrap() {
		return this.value;
	}
}
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
Object.assign(haxe_ValueException.prototype, {
	__class__: haxe_ValueException
});
class haxe_ds_ArraySort {
	static sort(a,cmp) {
		haxe_ds_ArraySort.rec(a,cmp,0,a.length);
	}
	static rec(a,cmp,from,to) {
		let middle = from + to >> 1;
		if(to - from < 12) {
			if(to <= from) {
				return;
			}
			let _g = from + 1;
			while(_g < to) {
				let j = _g++;
				while(j > from) {
					if(cmp(a[j],a[j - 1]) < 0) {
						haxe_ds_ArraySort.swap(a,j - 1,j);
					} else {
						break;
					}
					--j;
				}
			}
			return;
		}
		haxe_ds_ArraySort.rec(a,cmp,from,middle);
		haxe_ds_ArraySort.rec(a,cmp,middle,to);
		haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
	}
	static doMerge(a,cmp,from,pivot,to,len1,len2) {
		while(true) {
			let first_cut;
			let second_cut;
			let len11;
			let len22;
			if(len1 == 0 || len2 == 0) {
				return;
			}
			if(len1 + len2 == 2) {
				if(cmp(a[pivot],a[from]) < 0) {
					haxe_ds_ArraySort.swap(a,pivot,from);
				}
				return;
			}
			if(len1 > len2) {
				len11 = len1 >> 1;
				first_cut = from + len11;
				second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
				len22 = second_cut - pivot;
			} else {
				len22 = len2 >> 1;
				second_cut = pivot + len22;
				first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
				len11 = first_cut - from;
			}
			haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
			let new_mid = first_cut + len22;
			haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
			from = new_mid;
			pivot = second_cut;
			len1 -= len11;
			len2 -= len22;
		}
	}
	static rotate(a,cmp,from,mid,to) {
		if(from == mid || mid == to) {
			return;
		}
		let n = haxe_ds_ArraySort.gcd(to - from,mid - from);
		while(n-- != 0) {
			let val = a[from + n];
			let shift = mid - from;
			let p1 = from + n;
			let p2 = from + n + shift;
			while(p2 != from + n) {
				a[p1] = a[p2];
				p1 = p2;
				if(to - p2 > shift) {
					p2 += shift;
				} else {
					p2 = from + (shift - (to - p2));
				}
			}
			a[p1] = val;
		}
	}
	static gcd(m,n) {
		while(n != 0) {
			let t = m % n;
			m = n;
			n = t;
		}
		return m;
	}
	static upper(a,cmp,from,to,val) {
		let len = to - from;
		let half;
		let mid;
		while(len > 0) {
			half = len >> 1;
			mid = from + half;
			if(cmp(a[val],a[mid]) < 0) {
				len = half;
			} else {
				from = mid + 1;
				len = len - half - 1;
			}
		}
		return from;
	}
	static lower(a,cmp,from,to,val) {
		let len = to - from;
		let half;
		let mid;
		while(len > 0) {
			half = len >> 1;
			mid = from + half;
			if(cmp(a[mid],a[val]) < 0) {
				from = mid + 1;
				len = len - half - 1;
			} else {
				len = half;
			}
		}
		return from;
	}
	static swap(a,i,j) {
		let tmp = a[i];
		a[i] = a[j];
		a[j] = tmp;
	}
}
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
class haxe_ds_IntMap {
	constructor() {
		this.h = { };
	}
	set(key,value) {
		this.h[key] = value;
	}
	get(key) {
		return this.h[key];
	}
	exists(key) {
		return this.h.hasOwnProperty(key);
	}
	remove(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	keys() {
		let a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	iterator() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			let i = this.it.next();
			return this.ref[i];
		}};
	}
	keyValueIterator() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
}
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_IntMap.prototype, {
	__class__: haxe_ds_IntMap
});
class haxe_ds_List {
	constructor() {
		this.length = 0;
	}
	add(item) {
		let x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
}
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
Object.assign(haxe_ds_List.prototype, {
	__class__: haxe_ds_List
});
class haxe_ds__$List_ListNode {
	constructor(item,next) {
		this.item = item;
		this.next = next;
	}
}
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
Object.assign(haxe_ds__$List_ListNode.prototype, {
	__class__: haxe_ds__$List_ListNode
});
class haxe_ds_ObjectMap {
	constructor() {
		this.h = { __keys__ : { }};
	}
	set(key,value) {
		let id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	get(key) {
		return this.h[key.__id__];
	}
	exists(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	remove(key) {
		let id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	keys() {
		let a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	iterator() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			let i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	keyValueIterator() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
}
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_ObjectMap.prototype, {
	__class__: haxe_ds_ObjectMap
});
class haxe_ds_StringMap {
	constructor() {
		this.h = Object.create(null);
	}
	exists(key) {
		return Object.prototype.hasOwnProperty.call(this.h,key);
	}
	get(key) {
		return this.h[key];
	}
	set(key,value) {
		this.h[key] = value;
	}
	keys() {
		return haxe_ds_StringMap.keysIterator(this.h);
	}
	iterator() {
		return haxe_ds_StringMap.valueIterator(this.h);
	}
	keyValueIterator() {
		return haxe_ds_StringMap.kvIterator(this.h);
	}
	static keysIterator(h) {
		let keys = Object.keys(h);
		let len = keys.length;
		let idx = 0;
		return { hasNext : function() {
			return idx < len;
		}, next : function() {
			idx += 1;
			return keys[idx - 1];
		}};
	}
	static valueIterator(h) {
		let keys = Object.keys(h);
		let len = keys.length;
		let idx = 0;
		return { hasNext : function() {
			return idx < len;
		}, next : function() {
			idx += 1;
			return h[keys[idx - 1]];
		}};
	}
	static kvIterator(h) {
		let keys = Object.keys(h);
		let len = keys.length;
		let idx = 0;
		return { hasNext : function() {
			return idx < len;
		}, next : function() {
			idx += 1;
			let k = keys[idx - 1];
			return { key : k, value : h[k]};
		}};
	}
}
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_StringMap.prototype, {
	__class__: haxe_ds_StringMap
});
class haxe_io_Bytes {
	constructor(data) {
		this.length = data.byteLength;
		this.b = new Uint8Array(data);
		this.b.bufferValue = data;
		data.hxBytes = this;
		data.bytes = this.b;
	}
}
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
Object.assign(haxe_io_Bytes.prototype, {
	__class__: haxe_io_Bytes
});
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
Object.assign(haxe_iterators_ArrayIterator.prototype, {
	__class__: haxe_iterators_ArrayIterator
});
class haxe_iterators_MapKeyValueIterator {
	constructor(map) {
		this.map = map;
		this.keys = map.keys();
	}
	hasNext() {
		return this.keys.hasNext();
	}
	next() {
		let key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
}
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
Object.assign(haxe_iterators_MapKeyValueIterator.prototype, {
	__class__: haxe_iterators_MapKeyValueIterator
});
class js_Boot {
	static getClass(o) {
		if(o == null) {
			return null;
		} else if(((o) instanceof Array)) {
			return Array;
		} else {
			let cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			let name = js_Boot.__nativeClassName(o);
			if(name != null) {
				return js_Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				let e = $hxEnums[o.__enum__];
				let n = e.__constructs__[o._hx_index];
				let con = e[n];
				if(con.__params__) {
					s = s + "\t";
					return n + "(" + ((function($this) {
						var $r;
						let _g = [];
						{
							let _g1 = 0;
							let _g2 = con.__params__;
							while(true) {
								if(!(_g1 < _g2.length)) {
									break;
								}
								let p = _g2[_g1];
								_g1 = _g1 + 1;
								_g.push(js_Boot.__string_rec(o[p],s));
							}
						}
						$r = _g;
						return $r;
					}(this))).join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __interfLoop(cc,cl) {
		while(true) {
			if(cc == null) {
				return false;
			}
			if(cc == cl) {
				return true;
			}
			let intf = cc.__interfaces__;
			if(intf != null && (cc.__super__ == null || cc.__super__.__interfaces__ != intf)) {
				let _g = 0;
				let _g1 = intf.length;
				while(_g < _g1) {
					let i = intf[_g++];
					if(i == cl || js_Boot.__interfLoop(i,cl)) {
						return true;
					}
				}
			}
			cc = cc.__super__;
		}
	}
	static __instanceof(o,cl) {
		if(cl == null) {
			return false;
		}
		switch(cl) {
		case Array:
			return ((o) instanceof Array);
		case Bool:
			return typeof(o) == "boolean";
		case Dynamic:
			return o != null;
		case Float:
			return typeof(o) == "number";
		case Int:
			if(typeof(o) == "number") {
				return ((o | 0) === o);
			} else {
				return false;
			}
			break;
		case String:
			return typeof(o) == "string";
		default:
			if(o != null) {
				if(typeof(cl) == "function") {
					if(js_Boot.__downcastCheck(o,cl)) {
						return true;
					}
				} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
					if(((o) instanceof cl)) {
						return true;
					}
				}
			} else {
				return false;
			}
			if(cl == Class ? o.__name__ != null : false) {
				return true;
			}
			if(cl == Enum ? o.__ename__ != null : false) {
				return true;
			}
			return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
		}
	}
	static __downcastCheck(o,cl) {
		if(!((o) instanceof cl)) {
			if(cl.__isInterface__) {
				return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static __cast(o,t) {
		if(o == null || js_Boot.__instanceof(o,t)) {
			return o;
		} else {
			throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
		}
	}
	static __nativeClassName(o) {
		let name = js_Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __isNativeObj(o) {
		return js_Boot.__nativeClassName(o) != null;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
class phys_Point {
	constructor(x,y,invM) {
		if(invM == null) {
			invM = 1.0;
		}
		this.x = x;
		this.y = y;
		this.invM = invM;
		this.vx = 0;
		this.vy = 0;
		this.damp = 0.98;
	}
	move() {
		this.x += this.vx;
		this.y += this.vy;
		this.vx *= this.damp;
		this.vy *= this.damp;
	}
}
$hxClasses["phys.Point"] = phys_Point;
phys_Point.__name__ = "phys.Point";
Object.assign(phys_Point.prototype, {
	__class__: phys_Point
});
class phys_Spring {
	constructor(p1,p2,length,stiff) {
		this.p1 = p1;
		this.p2 = p2;
		let dx = p1.x - p2.x;
		let dy = p1.y - p2.y;
		this.prevDist = Math.sqrt(dx * dx + dy * dy);
		this.length = length;
		this.stiff = stiff;
		this.totalImp = 0;
	}
	preSolve() {
		let a = this.p1;
		let b = this.p2;
		let dx = a.x - b.x;
		let dy = a.y - b.y;
		this.prevDist = Math.sqrt(dx * dx + dy * dy);
		this.totalImp *= 0.5;
		let dx1 = this.p1.x + this.p1.vx - (this.p2.x + this.p2.vx);
		let dy1 = this.p1.y + this.p1.vy - (this.p2.y + this.p2.vy);
		let dist = Math.sqrt(dx1 * dx1 + dy1 * dy1);
		let invDist = dist > 0 ? 1 / dist : 0;
		let nx = dx1 * invDist;
		let ny = dy1 * invDist;
		this.p1.vx += nx * this.totalImp * this.p1.invM;
		this.p1.vy += ny * this.totalImp * this.p1.invM;
		this.p2.vx -= nx * this.totalImp * this.p2.invM;
		this.p2.vy -= ny * this.totalImp * this.p2.invM;
	}
	solve() {
		let dx = this.p1.x + this.p1.vx - (this.p2.x + this.p2.vx);
		let dy = this.p1.y + this.p1.vy - (this.p2.y + this.p2.vy);
		let dist = Math.sqrt(dx * dx + dy * dy);
		let invDist = dist > 0 ? 1 / dist : 0;
		let nx = dx * invDist;
		let ny = dy * invDist;
		let imp = 1 / ((this.p1.invM + this.p2.invM) * (1.0 + (this.stiff ? 0 : 10.0))) * (this.length - dist) * 0.7;
		this.totalImp += imp;
		this.p1.vx += nx * imp * this.p1.invM;
		this.p1.vy += ny * imp * this.p1.invM;
		this.p2.vx -= nx * imp * this.p2.invM;
		this.p2.vy -= ny * imp * this.p2.invM;
	}
	postSolve() {
	}
}
$hxClasses["phys.Spring"] = phys_Spring;
phys_Spring.__name__ = "phys.Spring";
Object.assign(phys_Spring.prototype, {
	__class__: phys_Spring
});
class phys_World {
	constructor() {
		this.ps = [];
		this.ss = [];
	}
	addPoint(p) {
		this.ps.push(p);
	}
	removePoint(p) {
		return HxOverrides.remove(this.ps,p);
	}
	addSpring(s) {
		this.ss.push(s);
	}
	removeSpring(s) {
		return HxOverrides.remove(this.ss,s);
	}
	step() {
		let _g = 0;
		let _g1 = this.ss;
		while(_g < _g1.length) _g1[_g++].preSolve();
		let _g2 = 0;
		let _g3 = this.ss;
		while(_g2 < _g3.length) _g3[_g2++].solve();
		let _g4 = 0;
		let _g5 = this.ss;
		while(_g4 < _g5.length) _g5[_g4++].solve();
		let _g6 = 0;
		let _g7 = this.ss;
		while(_g6 < _g7.length) _g7[_g6++].solve();
		let _g8 = 0;
		let _g9 = this.ss;
		while(_g8 < _g9.length) _g9[_g8++].solve();
		let _g10 = 0;
		let _g11 = this.ss;
		while(_g10 < _g11.length) _g11[_g10++].solve();
		let _g12 = 0;
		let _g13 = this.ss;
		while(_g12 < _g13.length) _g13[_g12++].solve();
		let _g14 = 0;
		let _g15 = this.ss;
		while(_g14 < _g15.length) _g15[_g14++].solve();
		let _g16 = 0;
		let _g17 = this.ss;
		while(_g16 < _g17.length) _g17[_g16++].solve();
		let _g18 = 0;
		let _g19 = this.ss;
		while(_g18 < _g19.length) _g19[_g18++].postSolve();
		let _g20 = 0;
		let _g21 = this.ps;
		while(_g20 < _g21.length) _g21[_g20++].move();
	}
}
$hxClasses["phys.World"] = phys_World;
phys_World.__name__ = "phys.World";
Object.assign(phys_World.prototype, {
	__class__: phys_World
});
class pot_core_Pot {
	constructor(app,canvas) {
		this.app = app;
		this.canvas = canvas;
		this.timer = new pot_util_Timer($bind(this,this.frame));
	}
	resize(width,height,pixelRatio) {
		if(pixelRatio == null) {
			pixelRatio = 1;
		}
		this.width = width;
		this.height = height;
		this.pixelRatio = pixelRatio;
		this.canvas.width = width;
		this.canvas.height = height;
	}
	frameRate(fps) {
		if(fps == 0) {
			this.timer.setFrameRate(60);
			this.timer.setUseAnimationFrame(true);
		} else {
			this.timer.setFrameRate(fps);
		}
	}
	start() {
		this.timer.start();
	}
	stop() {
		this.timer.stop();
	}
	frame() {
		if(this.app.input != null) {
			this.app.input.update();
		}
		this.app.loop();
		this.app.frameCount++;
	}
}
$hxClasses["pot.core.Pot"] = pot_core_Pot;
pot_core_Pot.__name__ = "pot.core.Pot";
Object.assign(pot_core_Pot.prototype, {
	__class__: pot_core_Pot
});
class pot_input_CodeValue {
	static fromString(code) {
		if(pot_input_CodeValue.ALL.indexOf(code) == -1) {
			return null;
		}
		return code;
	}
}
class pot_input_Input {
	constructor(canvas,pot) {
		this.mouse = new pot_input_Mouse();
		this.touches = new pot_input_TouchesData();
		this.keyboard = new pot_input_KeyboardData();
		this.scalingMode = 1;
		this.addEvents(canvas,pot);
	}
	addEvents(canvas,pot) {
		this.mouse.addEvents(canvas,canvas,this,pot);
		let this1 = this.touches;
		let canvas1 = canvas;
		let elem = canvas;
		let input = this;
		let pot1 = pot;
		elem.addEventListener("touchstart",function(e) {
			if(e.cancelable) {
				e.preventDefault();
			}
			let touches = e.changedTouches;
			let _g = 0;
			let _g1 = touches.length;
			while(_g < _g1) {
				let rawTouch = touches[_g++];
				let touch = this1.getByRawId(rawTouch.identifier,true);
				let x = rawTouch.clientX - elem.getBoundingClientRect().left;
				let x1;
				switch(input.scalingMode) {
				case 0:
					x1 = canvas1.width / pot1.pixelRatio / canvas1.clientWidth;
					break;
				case 1:
					x1 = canvas1.width / canvas1.clientWidth;
					break;
				}
				let x2 = x * x1;
				let y = rawTouch.clientY - elem.getBoundingClientRect().top;
				let y1;
				switch(input.scalingMode) {
				case 0:
					y1 = canvas1.height / pot1.pixelRatio / canvas1.clientHeight;
					break;
				case 1:
					y1 = canvas1.height / canvas1.clientHeight;
					break;
				}
				touch.nx = x2;
				touch.ny = y * y1;
				touch.ntouching = true;
				touch.ntouching2 = true;
			}
		});
		elem.addEventListener("touchmove",function(e) {
			if(e.cancelable) {
				e.preventDefault();
			}
			let touches = e.changedTouches;
			let _g = 0;
			let _g1 = touches.length;
			while(_g < _g1) {
				let rawTouch = touches[_g++];
				let touch = this1.getByRawId(rawTouch.identifier);
				if(touch != null) {
					let x = rawTouch.clientX - elem.getBoundingClientRect().left;
					let x1;
					switch(input.scalingMode) {
					case 0:
						x1 = canvas1.width / pot1.pixelRatio / canvas1.clientWidth;
						break;
					case 1:
						x1 = canvas1.width / canvas1.clientWidth;
						break;
					}
					let x2 = x * x1;
					let y = rawTouch.clientY - elem.getBoundingClientRect().top;
					let y1;
					switch(input.scalingMode) {
					case 0:
						y1 = canvas1.height / pot1.pixelRatio / canvas1.clientHeight;
						break;
					case 1:
						y1 = canvas1.height / canvas1.clientHeight;
						break;
					}
					touch.nx = x2;
					touch.ny = y * y1;
				}
			}
		});
		let end = function(e) {
			if(e.cancelable) {
				e.preventDefault();
			}
			let touches = e.changedTouches;
			let _g = 0;
			let _g1 = touches.length;
			while(_g < _g1) {
				let rawTouch = touches[_g++];
				let touch = this1.getByRawId(rawTouch.identifier);
				if(touch != null) {
					let x = rawTouch.clientX - elem.getBoundingClientRect().left;
					let x1;
					switch(input.scalingMode) {
					case 0:
						x1 = canvas1.width / pot1.pixelRatio / canvas1.clientWidth;
						break;
					case 1:
						x1 = canvas1.width / canvas1.clientWidth;
						break;
					}
					let x2 = x * x1;
					let y = rawTouch.clientY - elem.getBoundingClientRect().top;
					let y1;
					switch(input.scalingMode) {
					case 0:
						y1 = canvas1.height / pot1.pixelRatio / canvas1.clientHeight;
						break;
					case 1:
						y1 = canvas1.height / canvas1.clientHeight;
						break;
					}
					touch.nx = x2;
					touch.ny = y * y1;
					touch.ntouching = false;
				}
			}
		};
		elem.addEventListener("touchend",end);
		elem.addEventListener("touchcancel",end);
		let this2 = this.keyboard;
		let elem1 = window.document.body;
		elem1.addEventListener("keydown",function(e) {
			let code = pot_input_CodeValue.fromString(e.code);
			if(code == null) {
				return;
			}
			if(!pot_input_CodeValue.FUNCTIONS.includes(code) && e.cancelable) {
				e.preventDefault();
			}
			if(!this2.keys.exists(code)) {
				this2.keys.set(code,new pot_input_Key());
			}
			this2.keys.get(code).press();
			this2.ndowns.add(e.key);
		});
		elem1.addEventListener("keyup",function(e) {
			let code = pot_input_CodeValue.fromString(e.code);
			if(code == null) {
				return;
			}
			if(!pot_input_CodeValue.FUNCTIONS.includes(code) && e.cancelable) {
				e.preventDefault();
			}
			if(!this2.keys.exists(code)) {
				this2.keys.set(code,new pot_input_Key());
			}
			this2.keys.get(code).release();
			this2.nups.add(e.key);
		});
		window.addEventListener("blur",function(e) {
			let key = this2.keys.iterator();
			while(key.hasNext()) key.next().release();
		});
	}
	update() {
		this.mouse.update();
		let this1 = this.touches;
		let i = 0;
		while(i < this1.touches.length) {
			let touch = this1.touches[i];
			if(!touch.ptouching && !touch.touching && !touch.ntouching) {
				HxOverrides.remove(this1.touches,touch);
			} else {
				touch.update();
				++i;
			}
		}
		let this2 = this.keyboard;
		let key = this2.keys.iterator();
		while(key.hasNext()) key.next().update();
		this2.downs.clear();
		this2.ups.clear();
		let jsIterator = this2.ndowns.values();
		let _g_lastStep = jsIterator.next();
		while(!_g_lastStep.done) {
			let v = _g_lastStep.value;
			_g_lastStep = jsIterator.next();
			this2.downs.add(v);
		}
		let jsIterator1 = this2.ups.values();
		let _g1_lastStep = jsIterator1.next();
		while(!_g1_lastStep.done) {
			let v = _g1_lastStep.value;
			_g1_lastStep = jsIterator1.next();
			this2.ups.add(v);
		}
		this2.ndowns.clear();
		this2.nups.clear();
	}
}
$hxClasses["pot.input.Input"] = pot_input_Input;
pot_input_Input.__name__ = "pot.input.Input";
Object.assign(pot_input_Input.prototype, {
	__class__: pot_input_Input
});
class pot_input_InputTools {
}
$hxClasses["pot.input.InputTools"] = pot_input_InputTools;
pot_input_InputTools.__name__ = "pot.input.InputTools";
class pot_input_Key {
	constructor() {
		this.down = false;
		this.pdown = false;
		this.ndown = false;
		this.ndown2 = false;
		this.ddown = 0;
	}
	press() {
		this.ndown = true;
		this.ndown2 = true;
	}
	release() {
		this.ndown = false;
	}
	update() {
		this.pdown = this.down;
		this.down = this.ndown || this.ndown2;
		this.ndown2 = false;
		this.ddown = (this.down ? 1 : 0) - (this.pdown ? 1 : 0);
	}
}
$hxClasses["pot.input.Key"] = pot_input_Key;
pot_input_Key.__name__ = "pot.input.Key";
Object.assign(pot_input_Key.prototype, {
	__class__: pot_input_Key
});
class pot_input_KeyValue {
}
class pot_input_Keyboard {
	static _new() {
		return new pot_input_KeyboardData();
	}
	static get(this1,code) {
		if(!this1.keys.exists(code)) {
			this1.keys.set(code,new pot_input_Key());
		}
		return this1.keys.get(code);
	}
	static getNum(this1,index) {
		let code = pot_input_CodeValue.DIGITS[index];
		if(!this1.keys.exists(code)) {
			this1.keys.set(code,new pot_input_Key());
		}
		return this1.keys.get(code);
	}
	static addEvents(this1,canvas,elem) {
		elem.addEventListener("keydown",function(e) {
			let code = pot_input_CodeValue.fromString(e.code);
			if(code == null) {
				return;
			}
			if(!pot_input_CodeValue.FUNCTIONS.includes(code) && e.cancelable) {
				e.preventDefault();
			}
			if(!this1.keys.exists(code)) {
				this1.keys.set(code,new pot_input_Key());
			}
			this1.keys.get(code).press();
			this1.ndowns.add(e.key);
		});
		elem.addEventListener("keyup",function(e) {
			let code = pot_input_CodeValue.fromString(e.code);
			if(code == null) {
				return;
			}
			if(!pot_input_CodeValue.FUNCTIONS.includes(code) && e.cancelable) {
				e.preventDefault();
			}
			if(!this1.keys.exists(code)) {
				this1.keys.set(code,new pot_input_Key());
			}
			this1.keys.get(code).release();
			this1.nups.add(e.key);
		});
		window.addEventListener("blur",function(e) {
			let key = this1.keys.iterator();
			while(key.hasNext()) key.next().release();
		});
	}
	static update(this1) {
		let key = this1.keys.iterator();
		while(key.hasNext()) key.next().update();
		this1.downs.clear();
		this1.ups.clear();
		let jsIterator = this1.ndowns.values();
		let _g_lastStep = jsIterator.next();
		while(!_g_lastStep.done) {
			let v = _g_lastStep.value;
			_g_lastStep = jsIterator.next();
			this1.downs.add(v);
		}
		let jsIterator1 = this1.ups.values();
		let _g1_lastStep = jsIterator1.next();
		while(!_g1_lastStep.done) {
			let v = _g1_lastStep.value;
			_g1_lastStep = jsIterator1.next();
			this1.ups.add(v);
		}
		this1.ndowns.clear();
		this1.nups.clear();
	}
	static isControlDown(this1) {
		let code = "ControlLeft";
		if(!this1.keys.exists(code)) {
			this1.keys.set(code,new pot_input_Key());
		}
		if(!this1.keys.get(code).down) {
			let code = "ControlRight";
			if(!this1.keys.exists(code)) {
				this1.keys.set(code,new pot_input_Key());
			}
			return this1.keys.get(code).down;
		} else {
			return true;
		}
	}
	static isShiftDown(this1) {
		let code = "ShiftLeft";
		if(!this1.keys.exists(code)) {
			this1.keys.set(code,new pot_input_Key());
		}
		if(!this1.keys.get(code).down) {
			let code = "ShiftRight";
			if(!this1.keys.exists(code)) {
				this1.keys.set(code,new pot_input_Key());
			}
			return this1.keys.get(code).down;
		} else {
			return true;
		}
	}
	static isAltDown(this1) {
		let code = "AltLeft";
		if(!this1.keys.exists(code)) {
			this1.keys.set(code,new pot_input_Key());
		}
		if(!this1.keys.get(code).down) {
			let code = "AltRight";
			if(!this1.keys.exists(code)) {
				this1.keys.set(code,new pot_input_Key());
			}
			return this1.keys.get(code).down;
		} else {
			return true;
		}
	}
	static isKeyDown(this1,key) {
		return this1.downs.has(key);
	}
	static isKeyUp(this1,key) {
		return this1.ups.has(key);
	}
	static forEachDownKey(this1,f) {
		let jsIterator = this1.downs.values();
		let _g_lastStep = jsIterator.next();
		while(!_g_lastStep.done) {
			let v = _g_lastStep.value;
			_g_lastStep = jsIterator.next();
			f(v);
		}
	}
	static forEachUpKey(this1,f) {
		let jsIterator = this1.ups.values();
		let _g_lastStep = jsIterator.next();
		while(!_g_lastStep.done) {
			let v = _g_lastStep.value;
			_g_lastStep = jsIterator.next();
			f(v);
		}
	}
	static forEachCode(this1,f) {
		let _g = this1.keys.keyValueIterator();
		while(_g.hasNext()) {
			let _g1 = _g.next();
			f(_g1.key,_g1.value);
		}
	}
}
class pot_input_KeyboardData {
	constructor() {
		this.keys = new haxe_ds_StringMap();
		this.downs = new Set();
		this.ups = new Set();
		this.ndowns = new Set();
		this.nups = new Set();
	}
}
$hxClasses["pot.input.KeyboardData"] = pot_input_KeyboardData;
pot_input_KeyboardData.__name__ = "pot.input.KeyboardData";
Object.assign(pot_input_KeyboardData.prototype, {
	__class__: pot_input_KeyboardData
});
class pot_input_Mouse {
	constructor() {
		this.px = 0;
		this.py = 0;
		this.x = 0;
		this.y = 0;
		this.nx = 0;
		this.ny = 0;
		this.dx = 0;
		this.dy = 0;
		this.wheel = 0;
		this.nwheel = 0;
		this.pleft = false;
		this.pmiddle = false;
		this.pright = false;
		this.left = false;
		this.middle = false;
		this.right = false;
		this.nleft = false;
		this.nmiddle = false;
		this.nright = false;
		this.dleft = 0;
		this.dmiddle = 0;
		this.dright = 0;
		this.enabled = false;
	}
	addEvents(canvas,elem,input,pot) {
		let _gthis = this;
		elem.addEventListener("mousedown",function(e) {
			_gthis.enabled = true;
			if(e.cancelable) {
				e.preventDefault();
			}
			switch(e.button) {
			case 0:
				_gthis.nleft = true;
				_gthis.nleft2 = true;
				break;
			case 1:
				_gthis.nmiddle = true;
				_gthis.nmiddle2 = true;
				break;
			case 2:
				_gthis.nright = true;
				_gthis.nright2 = true;
				break;
			}
			let tmp = e.clientX - elem.getBoundingClientRect().left;
			let tmp1;
			switch(input.scalingMode) {
			case 0:
				tmp1 = canvas.width / pot.pixelRatio / canvas.clientWidth;
				break;
			case 1:
				tmp1 = canvas.width / canvas.clientWidth;
				break;
			}
			_gthis.nx = tmp * tmp1;
			let tmp2 = e.clientY - elem.getBoundingClientRect().top;
			let tmp3;
			switch(input.scalingMode) {
			case 0:
				tmp3 = canvas.height / pot.pixelRatio / canvas.clientHeight;
				break;
			case 1:
				tmp3 = canvas.height / canvas.clientHeight;
				break;
			}
			return _gthis.ny = tmp2 * tmp3;
		});
		elem.addEventListener("mouseup",function(e) {
			_gthis.enabled = true;
			if(e.cancelable) {
				e.preventDefault();
			}
			switch(e.button) {
			case 0:
				_gthis.nleft = false;
				break;
			case 1:
				_gthis.nmiddle = false;
				break;
			case 2:
				_gthis.nright = false;
				break;
			}
			let tmp = e.clientX - elem.getBoundingClientRect().left;
			let tmp1;
			switch(input.scalingMode) {
			case 0:
				tmp1 = canvas.width / pot.pixelRatio / canvas.clientWidth;
				break;
			case 1:
				tmp1 = canvas.width / canvas.clientWidth;
				break;
			}
			_gthis.nx = tmp * tmp1;
			let tmp2 = e.clientY - elem.getBoundingClientRect().top;
			let tmp3;
			switch(input.scalingMode) {
			case 0:
				tmp3 = canvas.height / pot.pixelRatio / canvas.clientHeight;
				break;
			case 1:
				tmp3 = canvas.height / canvas.clientHeight;
				break;
			}
			return _gthis.ny = tmp2 * tmp3;
		});
		elem.addEventListener("mousemove",function(e) {
			_gthis.enabled = true;
			let tmp = e.clientX - elem.getBoundingClientRect().left;
			let tmp1;
			switch(input.scalingMode) {
			case 0:
				tmp1 = canvas.width / pot.pixelRatio / canvas.clientWidth;
				break;
			case 1:
				tmp1 = canvas.width / canvas.clientWidth;
				break;
			}
			_gthis.nx = tmp * tmp1;
			let tmp2 = e.clientY - elem.getBoundingClientRect().top;
			let tmp3;
			switch(input.scalingMode) {
			case 0:
				tmp3 = canvas.height / pot.pixelRatio / canvas.clientHeight;
				break;
			case 1:
				tmp3 = canvas.height / canvas.clientHeight;
				break;
			}
			return _gthis.ny = tmp2 * tmp3;
		});
		elem.addEventListener("wheel",function(e) {
			let scale;
			switch(e.deltaMode) {
			case 0:
				scale = 1;
				break;
			case 1:
				scale = 24;
				break;
			case 2:
				scale = 720;
				break;
			default:
				throw haxe_Exception.thrown("invalid wheel delta mode");
			}
			_gthis.nwheel += e.deltaY * scale;
			e.preventDefault();
		});
		elem.addEventListener("contextmenu",function(e) {
			_gthis.enabled = true;
			e.preventDefault();
		});
		elem.addEventListener("pointerdown",function(e) {
			elem.setPointerCapture(e.pointerId);
		});
		elem.addEventListener("pointerup",function(e) {
			elem.releasePointerCapture(e.pointerId);
		});
	}
	update() {
		this.px = this.x;
		this.py = this.y;
		this.x = this.nx;
		this.y = this.ny;
		this.dx = this.x - this.px;
		this.dy = this.y - this.py;
		this.pleft = this.left;
		this.pmiddle = this.middle;
		this.pright = this.right;
		this.left = this.nleft || this.nleft2;
		this.middle = this.nmiddle || this.nmiddle2;
		this.right = this.nright || this.nright2;
		this.nleft2 = false;
		this.nmiddle2 = false;
		this.nright2 = false;
		this.dleft = (this.left ? 1 : 0) - (this.pleft ? 1 : 0);
		this.dmiddle = (this.middle ? 1 : 0) - (this.pmiddle ? 1 : 0);
		this.dright = (this.right ? 1 : 0) - (this.pright ? 1 : 0);
		this.wheel = this.nwheel;
		this.nwheel = 0;
	}
}
$hxClasses["pot.input.Mouse"] = pot_input_Mouse;
pot_input_Mouse.__name__ = "pot.input.Mouse";
Object.assign(pot_input_Mouse.prototype, {
	__class__: pot_input_Mouse
});
class pot_input_Touch {
	constructor() {
		this.px = 0;
		this.py = 0;
		this.x = 0;
		this.y = 0;
		this.nx = 0;
		this.ny = 0;
		this.dx = 0;
		this.dy = 0;
		this.ptouching = false;
		this.touching = false;
		this.ntouching = false;
		this.ntouching2 = false;
		this.dtouching = 0;
		this.rawId = 0;
	}
	update() {
		this.px = this.x;
		this.py = this.y;
		this.x = this.nx;
		this.y = this.ny;
		this.dx = this.x - this.px;
		this.dy = this.y - this.py;
		this.ptouching = this.touching;
		this.touching = this.ntouching || this.ntouching2;
		this.ntouching2 = false;
		this.dtouching = (this.touching ? 1 : 0) - (this.ptouching ? 1 : 0);
	}
}
$hxClasses["pot.input.Touch"] = pot_input_Touch;
pot_input_Touch.__name__ = "pot.input.Touch";
Object.assign(pot_input_Touch.prototype, {
	__class__: pot_input_Touch
});
class pot_input_Touches {
	static _new() {
		return new pot_input_TouchesData();
	}
	static get_length(this1) {
		return this1.touches.length;
	}
	static get(this1,index) {
		return this1.touches[index];
	}
	static addEvents(this1,canvas,elem,input,pot) {
		elem.addEventListener("touchstart",function(e) {
			if(e.cancelable) {
				e.preventDefault();
			}
			let touches = e.changedTouches;
			let _g = 0;
			let _g1 = touches.length;
			while(_g < _g1) {
				let rawTouch = touches[_g++];
				let touch = this1.getByRawId(rawTouch.identifier,true);
				let x = rawTouch.clientX - elem.getBoundingClientRect().left;
				let x1;
				switch(input.scalingMode) {
				case 0:
					x1 = canvas.width / pot.pixelRatio / canvas.clientWidth;
					break;
				case 1:
					x1 = canvas.width / canvas.clientWidth;
					break;
				}
				let x2 = x * x1;
				let y = rawTouch.clientY - elem.getBoundingClientRect().top;
				let y1;
				switch(input.scalingMode) {
				case 0:
					y1 = canvas.height / pot.pixelRatio / canvas.clientHeight;
					break;
				case 1:
					y1 = canvas.height / canvas.clientHeight;
					break;
				}
				touch.nx = x2;
				touch.ny = y * y1;
				touch.ntouching = true;
				touch.ntouching2 = true;
			}
		});
		elem.addEventListener("touchmove",function(e) {
			if(e.cancelable) {
				e.preventDefault();
			}
			let touches = e.changedTouches;
			let _g = 0;
			let _g1 = touches.length;
			while(_g < _g1) {
				let rawTouch = touches[_g++];
				let touch = this1.getByRawId(rawTouch.identifier);
				if(touch != null) {
					let x = rawTouch.clientX - elem.getBoundingClientRect().left;
					let x1;
					switch(input.scalingMode) {
					case 0:
						x1 = canvas.width / pot.pixelRatio / canvas.clientWidth;
						break;
					case 1:
						x1 = canvas.width / canvas.clientWidth;
						break;
					}
					let x2 = x * x1;
					let y = rawTouch.clientY - elem.getBoundingClientRect().top;
					let y1;
					switch(input.scalingMode) {
					case 0:
						y1 = canvas.height / pot.pixelRatio / canvas.clientHeight;
						break;
					case 1:
						y1 = canvas.height / canvas.clientHeight;
						break;
					}
					touch.nx = x2;
					touch.ny = y * y1;
				}
			}
		});
		let end = function(e) {
			if(e.cancelable) {
				e.preventDefault();
			}
			let touches = e.changedTouches;
			let _g = 0;
			let _g1 = touches.length;
			while(_g < _g1) {
				let rawTouch = touches[_g++];
				let touch = this1.getByRawId(rawTouch.identifier);
				if(touch != null) {
					let x = rawTouch.clientX - elem.getBoundingClientRect().left;
					let x1;
					switch(input.scalingMode) {
					case 0:
						x1 = canvas.width / pot.pixelRatio / canvas.clientWidth;
						break;
					case 1:
						x1 = canvas.width / canvas.clientWidth;
						break;
					}
					let x2 = x * x1;
					let y = rawTouch.clientY - elem.getBoundingClientRect().top;
					let y1;
					switch(input.scalingMode) {
					case 0:
						y1 = canvas.height / pot.pixelRatio / canvas.clientHeight;
						break;
					case 1:
						y1 = canvas.height / canvas.clientHeight;
						break;
					}
					touch.nx = x2;
					touch.ny = y * y1;
					touch.ntouching = false;
				}
			}
		};
		elem.addEventListener("touchend",end);
		elem.addEventListener("touchcancel",end);
	}
	static update(this1) {
		let i = 0;
		while(i < this1.touches.length) {
			let touch = this1.touches[i];
			if(!touch.ptouching && !touch.touching && !touch.ntouching) {
				HxOverrides.remove(this1.touches,touch);
			} else {
				touch.update();
				++i;
			}
		}
	}
}
class pot_input_TouchesData {
	constructor() {
		this.touches = [];
	}
	getByRawId(rawId,create) {
		if(create == null) {
			create = false;
		}
		let _g = 0;
		let _g1 = this.touches;
		while(_g < _g1.length) {
			let t = _g1[_g];
			++_g;
			if(t.rawId == rawId) {
				return t;
			}
		}
		if(create) {
			return this.newTouch(rawId);
		} else {
			return null;
		}
	}
	newTouch(rawId) {
		let minId = 0;
		while(true) {
			let tmp = minId;
			let _g = 0;
			let _g1 = this.touches;
			while(_g < _g1.length) if(_g1[_g++].id == minId) {
				++minId;
			}
			if(tmp == minId) {
				break;
			}
		}
		let touch = new pot_input_Touch();
		touch.rawId = rawId;
		touch.id = minId;
		this.touches.push(touch);
		return touch;
	}
}
$hxClasses["pot.input.TouchesData"] = pot_input_TouchesData;
pot_input_TouchesData.__name__ = "pot.input.TouchesData";
Object.assign(pot_input_TouchesData.prototype, {
	__class__: pot_input_TouchesData
});
class pot_util_Timer {
	constructor(frame) {
		this.frame = frame;
		this.targetSleep = 16.666666666666668;
		this.useAnimationFrame = false;
	}
	start() {
		if(this.running) {
			return;
		}
		this.nextTime = Date.now();
		this.running = true;
		window.setTimeout($bind(this,this.loop),0);
	}
	stop() {
		if(!this.running) {
			return;
		}
		this.running = false;
	}
	setFrameRate(frameRate) {
		this.targetSleep = 1000 / frameRate;
	}
	setUseAnimationFrame(useAnimationFrame) {
		this.useAnimationFrame = useAnimationFrame;
	}
	loop(arg) {
		if(!this.running) {
			return;
		}
		if(pot_util_Timer.catchErrors) {
			try {
				this.frame();
			} catch( _g ) {
				let _g1 = haxe_Exception.caught(_g).unwrap();
				let v = _g1 == null ? "null" : Std.string(_g1);
				window.alert(Std.string("error: " + v));
			}
		} else {
			this.frame();
		}
		let currentTime = Date.now();
		this.nextTime += this.targetSleep;
		if(this.nextTime < currentTime + 5) {
			this.nextTime = currentTime + 5;
		}
		let sleep = this.nextTime - currentTime + 0.5 | 0;
		if(this.useAnimationFrame) {
			window.requestAnimationFrame($bind(this,this.loop));
		} else {
			window.setTimeout($bind(this,this.loop),sleep);
		}
	}
	now() {
		return Date.now();
	}
}
$hxClasses["pot.util.Timer"] = pot_util_Timer;
pot_util_Timer.__name__ = "pot.util.Timer";
Object.assign(pot_util_Timer.prototype, {
	__class__: pot_util_Timer
});
class render_View {
	constructor(sizePeek) {
		this.sizePeek = sizePeek;
		this.data = new render_ViewData();
	}
	getData() {
		return this.data.copy();
	}
	setData(data) {
		this.data.centerX = data.centerX;
		this.data.centerY = data.centerY;
		let s = data.scale;
		let scale = this.data.scale;
		scale = s < 0.1 ? 0.1 : s > 10 ? 10 : s;
		let f = this.data.scale;
		if(!isFinite(f)) {
			scale = 2;
		}
		this.data.scale = scale;
	}
	worldX(screenX) {
		return (screenX - this.sizePeek.getW() * 0.5) / this.data.scale + this.data.centerX;
	}
	worldY(screenY) {
		return (screenY - this.sizePeek.getH() * 0.5) / this.data.scale + this.data.centerY;
	}
	screenX(worldX) {
		return (worldX - this.data.centerX) * this.data.scale + this.sizePeek.getW() * 0.5;
	}
	screenY(worldY) {
		return (worldY - this.data.centerY) * this.data.scale + this.sizePeek.getH() * 0.5;
	}
	computeCenterX(screenX,worldX) {
		return worldX - (screenX - this.sizePeek.getW() * 0.5) / this.data.scale;
	}
	computeCenterY(screenY,worldY) {
		return worldY - (screenY - this.sizePeek.getH() * 0.5) / this.data.scale;
	}
	centering(screenX,screenY,worldX,worldY) {
		let v = worldX - (screenX - this.sizePeek.getW() * 0.5) / this.data.scale;
		this.data.centerX = v;
		let v1 = worldY - (screenY - this.sizePeek.getH() * 0.5) / this.data.scale;
		this.data.centerY = v1;
	}
	applyTransform(g) {
		let tx = this.sizePeek.getW() * 0.5;
		let ty = this.sizePeek.getH() * 0.5;
		g.c2d.translate(tx,ty);
		g.c2d.scale(this.data.scale,this.data.scale);
		g.c2d.translate(-this.data.centerX,-this.data.centerY);
	}
}
$hxClasses["render.View"] = render_View;
render_View.__name__ = "render.View";
Object.assign(render_View.prototype, {
	__class__: render_View
});
class render_ViewData {
	constructor() {
		this.centerX = 0;
		this.centerY = 0;
		this.scale = 1;
	}
	copy() {
		let res = new render_ViewData();
		res.centerX = this.centerX;
		res.centerY = this.centerY;
		res.scale = this.scale;
		return res;
	}
}
$hxClasses["render.ViewData"] = render_ViewData;
render_ViewData.__name__ = "render.ViewData";
Object.assign(render_ViewData.prototype, {
	__class__: render_ViewData
});
class synth_NodeRoleTools {
	static copy(role) {
		switch(role._hx_index) {
		case 6:
			let _g = role.env;
			return synth_NodeRole.Envelope(new synth_EnvelopeData(_g.a,_g.d,_g.s,_g.r));
		case 7:
			return synth_NodeRole.Number(new synth_NumberData(role.num.get_value()));
		default:
			return role;
		}
	}
}
$hxClasses["synth.NodeRoleTools"] = synth_NodeRoleTools;
synth_NodeRoleTools.__name__ = "synth.NodeRoleTools";
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
pot_core_App._hx_skip_constructor = false;
app_NodeInfo.ANGLE_SPACING = 0.62831853071795862;
app_NodeList.FREQUENCY = new app_NodeInfo("Frequency","f",graph_NodeType.Normal(false,true),synth_NodeRole.Frequency,[],[]);
app_NodeList.OSCILLATOR = new app_NodeInfo("Oscillator","sin",graph_NodeType.Normal(false,true),synth_NodeRole.Oscillator("sin"),[new app_NodeInputParamInfo("freq",440),new app_NodeInputParamInfo("gain",0.5),new app_NodeInputParamInfo("detune",0.0)],[]);
app_NodeList.OUTPUT = new app_NodeInfo("Output","out",graph_NodeType.Normal(true,false),synth_NodeRole.Destination,[],[]);
app_NodeList.DELAY = new app_NodeInfo("Delay","del",graph_NodeType.Normal(true,true),synth_NodeRole.Delay,[new app_NodeInputParamInfo("time",0.2)],[]);
app_NodeList.FILTER = new app_NodeInfo("Filter","LPF",graph_NodeType.Normal(true,true),synth_NodeRole.Filter("lp"),[new app_NodeInputParamInfo("freq",350),new app_NodeInputParamInfo("Q",1),new app_NodeInputParamInfo("gain",0)],[]);
app_NodeList.COMPRESSOR = new app_NodeInfo("Compressor","cmp",graph_NodeType.Normal(true,true),synth_NodeRole.Compressor,[],[]);
app_NodeList.ENVELOPE = new app_NodeInfo("Envelope","env",graph_NodeType.Normal(false,true),synth_NodeRole.Envelope(new synth_EnvelopeData(0.05,0.1,0.8,0.1)),[],[]);
app_NodeList.NUMBER = new app_NodeInfo("Number","",graph_NodeType.Normal(false,true),synth_NodeRole.Number(new synth_NumberData(0.0)),[],[]);
app_NodeList.ADD = new app_NodeInfo("Addition","+",graph_NodeType.Small,synth_NodeRole.BinOp(0),[],[]);
app_NodeList.MULT = new app_NodeInfo("Multiplication","×",graph_NodeType.Small,synth_NodeRole.BinOp(1),[],[]);
app_NodeList.DUPL = new app_NodeInfo("Duplication","",graph_NodeType.Small,synth_NodeRole.Dupl,[],[]);
app_AudioNodeTools.mapN = new WeakMap();
app_AudioNodeTools.mapP = new WeakMap();
app_event_Dispatcher._hx_skip_constructor = false;
app_graphics_Graphics.PI = 3.141592653589793;
app_graphics_Graphics.TWO_PI = 6.2831853071795862;
app_graphics_Graphics.HALF_PI = 1.5707963267948966;
app_ui_Sprite._hx_skip_constructor = false;
app_ui_core_Element.idCount = 0;
app_ui_core_layout_Axis.X = false;
app_ui_core_layout_Axis.Y = true;
app_ui_core_layout_Layout._hx_skip_constructor = false;
app_ui_view_Font.FONT_NAME = "Courier New";
app_ui_view_Font.FONT_BASE_SIZE = 10;
app_ui_view_Font.BOLD = true;
app_ui_view_main_breadcrumb_Breadcrumb.ITEM_HEIGHT = 16;
app_ui_view_main_breadcrumb_Breadcrumb.FONT_SIZE = 1.1;
app_ui_view_main_breadcrumb_Breadcrumb.FONT_SIZE_SEPARATOR = 1.0;
app_ui_view_main_graph_ClickSettings.DRAG_BEGIN_THRESHOLD_PX = 6;
app_ui_view_main_graph_ClickSettings.TRAIL_INTERVAL_PX = 6;
app_ui_view_main_graph_ClickSettings.PICK_RADIUS_PX = 6;
app_ui_view_main_graph_ClickSettings.LASSO_LEAST_VERTEX_COUNT = 10;
app_ui_view_main_graph_ClickSettings.LASSO_CLOSE_THRESHOLD_RATIO = 0.8;
app_ui_view_main_graph_history_GraphHistory.MAX_SIZE = 100;
app_ui_view_menu_Menu.WIDTH = 250;
app_ui_view_menu_Menu.PADDING = 8;
app_ui_view_menu_Menu.FONT_SIZE = 1.3;
app_ui_view_menu_Menu.ITEM_HEIGHT = 20;
app_ui_view_menu_Menu.ITEM_MARGIN = 2;
app_ui_view_menu_Menu.ITEM_SPACE = 8;
app_ui_view_menu_Menu.ANIMATION_DURATION = 10;
app_ui_view_menu_Menu.MENU_CLOSE_WAIT_RATIO = 0.5;
graph_Graph.CABLE_LENGTH = 4.0;
graph_Graph.MARGIN = 1.0;
graph_Graph.CABLE_MASS = 0.5;
graph_Graph.idCount = 0;
graph_Graph.dfsCount = 1;
graph_Node.idCount = 0;
graph_NodePhys.DEFAULT_RADIUS = 12;
graph_NodePhys.SMALL_NODE_INV_MASS = 0;
graph_NodePhys.NORMAL_NODE_INV_MASS = 0;
graph_Socket.idCount = 0;
graph_SocketPhys.RADIUS_SMALL = 2.0;
graph_SocketPhys.RADIUS_LARGE = 4.0;
graph_SocketPhys.INV_MASS = 0.2;
graph_Vertex.MAX_LIFE = 60;
graph_Vertex.CABLE_DAMPING = 0.95;
graph_Vertex.NODE_DAMPING = 0.8;
graph_Vertex.idCount = 0;
graph_serial_NodeFilter.ALL = new graph_serial_NodeFilter(function(_) {
	return true;
});
graph_serial_NodeFilter.NONE = new graph_serial_NodeFilter(function(_) {
	return false;
});
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
pot_input_CodeValue.Escape = "Escape";
pot_input_CodeValue.Digit0 = "Digit0";
pot_input_CodeValue.Digit1 = "Digit1";
pot_input_CodeValue.Digit2 = "Digit2";
pot_input_CodeValue.Digit3 = "Digit3";
pot_input_CodeValue.Digit4 = "Digit4";
pot_input_CodeValue.Digit5 = "Digit5";
pot_input_CodeValue.Digit6 = "Digit6";
pot_input_CodeValue.Digit7 = "Digit7";
pot_input_CodeValue.Digit8 = "Digit8";
pot_input_CodeValue.Digit9 = "Digit9";
pot_input_CodeValue.Minus = "Minus";
pot_input_CodeValue.Equal = "Equal";
pot_input_CodeValue.Backspace = "Backspace";
pot_input_CodeValue.Tab = "Tab";
pot_input_CodeValue.KeyQ = "KeyQ";
pot_input_CodeValue.KeyW = "KeyW";
pot_input_CodeValue.KeyE = "KeyE";
pot_input_CodeValue.KeyR = "KeyR";
pot_input_CodeValue.KeyT = "KeyT";
pot_input_CodeValue.KeyY = "KeyY";
pot_input_CodeValue.KeyU = "KeyU";
pot_input_CodeValue.KeyI = "KeyI";
pot_input_CodeValue.KeyO = "KeyO";
pot_input_CodeValue.KeyP = "KeyP";
pot_input_CodeValue.BracketLeft = "BracketLeft";
pot_input_CodeValue.BracketRight = "BracketRight";
pot_input_CodeValue.Enter = "Enter";
pot_input_CodeValue.ControlLeft = "ControlLeft";
pot_input_CodeValue.KeyA = "KeyA";
pot_input_CodeValue.KeyS = "KeyS";
pot_input_CodeValue.KeyD = "KeyD";
pot_input_CodeValue.KeyF = "KeyF";
pot_input_CodeValue.KeyG = "KeyG";
pot_input_CodeValue.KeyH = "KeyH";
pot_input_CodeValue.KeyJ = "KeyJ";
pot_input_CodeValue.KeyK = "KeyK";
pot_input_CodeValue.KeyL = "KeyL";
pot_input_CodeValue.Semicolon = "Semicolon";
pot_input_CodeValue.Quote = "Quote";
pot_input_CodeValue.Backquote = "Backquote";
pot_input_CodeValue.ShiftLeft = "ShiftLeft";
pot_input_CodeValue.Backslash = "Backslash";
pot_input_CodeValue.KeyZ = "KeyZ";
pot_input_CodeValue.KeyX = "KeyX";
pot_input_CodeValue.KeyC = "KeyC";
pot_input_CodeValue.KeyV = "KeyV";
pot_input_CodeValue.KeyB = "KeyB";
pot_input_CodeValue.KeyN = "KeyN";
pot_input_CodeValue.KeyM = "KeyM";
pot_input_CodeValue.Comma = "Comma";
pot_input_CodeValue.Period = "Period";
pot_input_CodeValue.Slash = "Slash";
pot_input_CodeValue.ShiftRight = "ShiftRight";
pot_input_CodeValue.NumpadMultiply = "NumpadMultiply";
pot_input_CodeValue.AltLeft = "AltLeft";
pot_input_CodeValue.Space = "Space";
pot_input_CodeValue.CapsLock = "CapsLock";
pot_input_CodeValue.F1 = "F1";
pot_input_CodeValue.F2 = "F2";
pot_input_CodeValue.F3 = "F3";
pot_input_CodeValue.F4 = "F4";
pot_input_CodeValue.F5 = "F5";
pot_input_CodeValue.F6 = "F6";
pot_input_CodeValue.F7 = "F7";
pot_input_CodeValue.F8 = "F8";
pot_input_CodeValue.F9 = "F9";
pot_input_CodeValue.F10 = "F10";
pot_input_CodeValue.Numpad7 = "Numpad7";
pot_input_CodeValue.Numpad8 = "Numpad8";
pot_input_CodeValue.Numpad9 = "Numpad9";
pot_input_CodeValue.NumpadSubtract = "NumpadSubtract";
pot_input_CodeValue.Numpad4 = "Numpad4";
pot_input_CodeValue.Numpad5 = "Numpad5";
pot_input_CodeValue.Numpad6 = "Numpad6";
pot_input_CodeValue.NumpadAdd = "NumpadAdd";
pot_input_CodeValue.Numpad1 = "Numpad1";
pot_input_CodeValue.Numpad2 = "Numpad2";
pot_input_CodeValue.Numpad3 = "Numpad3";
pot_input_CodeValue.Numpad0 = "Numpad0";
pot_input_CodeValue.NumpadDecimal = "NumpadDecimal";
pot_input_CodeValue.IntlBackslash = "IntlBackslash";
pot_input_CodeValue.F11 = "F11";
pot_input_CodeValue.F12 = "F12";
pot_input_CodeValue.IntlYen = "IntlYen";
pot_input_CodeValue.NumpadEnter = "NumpadEnter";
pot_input_CodeValue.ControlRight = "ControlRight";
pot_input_CodeValue.NumpadDivide = "NumpadDivide";
pot_input_CodeValue.PrintScreen = "PrintScreen";
pot_input_CodeValue.AltRight = "AltRight";
pot_input_CodeValue.NumLock = "NumLock";
pot_input_CodeValue.Home = "Home";
pot_input_CodeValue.ArrowUp = "ArrowUp";
pot_input_CodeValue.PageUp = "PageUp";
pot_input_CodeValue.ArrowLeft = "ArrowLeft";
pot_input_CodeValue.ArrowRight = "ArrowRight";
pot_input_CodeValue.End = "End";
pot_input_CodeValue.ArrowDown = "ArrowDown";
pot_input_CodeValue.PageDown = "PageDown";
pot_input_CodeValue.Insert = "Insert";
pot_input_CodeValue.Delete = "Delete";
pot_input_CodeValue.ContextMenu = "ContextMenu";
pot_input_CodeValue.DIGITS = ["Digit0","Digit1","Digit2","Digit3","Digit4","Digit5","Digit6","Digit7","Digit8","Digit9"];
pot_input_CodeValue.FUNCTIONS = ["F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12"];
pot_input_CodeValue.ALL = ["Escape","Digit0","Digit1","Digit2","Digit3","Digit4","Digit5","Digit6","Digit7","Digit8","Digit9","Minus","Equal","Backspace","Tab","KeyQ","KeyW","KeyE","KeyR","KeyT","KeyY","KeyU","KeyI","KeyO","KeyP","BracketLeft","BracketRight","Enter","ControlLeft","KeyA","KeyS","KeyD","KeyF","KeyG","KeyH","KeyJ","KeyK","KeyL","Semicolon","Quote","Backquote","ShiftLeft","Backslash","KeyZ","KeyX","KeyC","KeyV","KeyB","KeyN","KeyM","Comma","Period","Slash","ShiftRight","NumpadMultiply","AltLeft","Space","CapsLock","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","Numpad7","Numpad8","Numpad9","NumpadSubtract","Numpad4","Numpad5","Numpad6","NumpadAdd","Numpad1","Numpad2","Numpad3","Numpad0","NumpadDecimal","IntlBackslash","F11","F12","IntlYen","NumpadEnter","ControlRight","NumpadDivide","PrintScreen","AltRight","NumLock","Home","ArrowUp","PageUp","ArrowLeft","ArrowRight","End","ArrowDown","PageDown","Insert","Delete","ContextMenu"];
pot_input_KeyValue.Alt = "Alt";
pot_input_KeyValue.CapsLock = "CapsLock";
pot_input_KeyValue.Control = "Control";
pot_input_KeyValue.Meta = "Meta";
pot_input_KeyValue.NumLock = "NumLock";
pot_input_KeyValue.Shift = "Shift";
pot_input_KeyValue.Enter = "Enter";
pot_input_KeyValue.Tab = "Tab";
pot_input_KeyValue.Space = " ";
pot_input_KeyValue.ArrowDown = "ArrowDown";
pot_input_KeyValue.ArrowLeft = "ArrowLeft";
pot_input_KeyValue.ArrowRight = "ArrowRight";
pot_input_KeyValue.ArrowUp = "ArrowUp";
pot_input_KeyValue.End = "End";
pot_input_KeyValue.Home = "Home";
pot_input_KeyValue.PageDown = "PageDown";
pot_input_KeyValue.PageUp = "PageUp";
pot_input_KeyValue.Backspace = "Backspace";
pot_input_KeyValue.Delete = "Delete";
pot_input_KeyValue.Insert = "Insert";
pot_input_KeyValue.ContextMenu = "ContextMenu";
pot_input_KeyValue.Escape = "Escape";
pot_input_KeyValue.F1 = "F1";
pot_input_KeyValue.F2 = "F2";
pot_input_KeyValue.F3 = "F3";
pot_input_KeyValue.F4 = "F4";
pot_input_KeyValue.F5 = "F5";
pot_input_KeyValue.F6 = "F6";
pot_input_KeyValue.F7 = "F7";
pot_input_KeyValue.F8 = "F8";
pot_input_KeyValue.F9 = "F9";
pot_input_KeyValue.F10 = "F10";
pot_input_KeyValue.F11 = "F11";
pot_input_KeyValue.F12 = "F12";
pot_input_KeyValue.DIGITS = ["0","1","2","3","4","5","6","7","8","9"];
pot_input_KeyValue.FUNCTIONS = ["F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12"];
pot_util_Timer.catchErrors = false;
pot_util_Timer.MIN_SLEEP_TIME = 5;
render_View.MIN_SCALE = 0.1;
render_View.MAX_SCALE = 10;
render_View.DEFAULT_SCALE = 2;
app_Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
